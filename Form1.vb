Imports System.Drawing
Imports System.Net
Imports System.Net.Sockets
Imports System.Net.NetworkInformation
Imports Microsoft
Imports System.Reflection
Imports System.Windows.Forms.VisualStyles.VisualStyleElement.TrackBar
Imports SnmpSharpNet
Imports System.Threading.Tasks
Imports System.IO
Imports System.Runtime.Serialization.Formatters.Binary
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq
Imports Newtonsoft
Imports System.Data
Imports System.ComponentModel
Imports System.Security
Imports System.Text
Imports System.Security.Cryptography
Imports System.Diagnostics.Eventing.Reader
Imports System.Threading
Imports Lextm.SharpSnmpLib.Messaging
Imports System.Net.Http.Headers
Imports System.Diagnostics
Imports System.Text.RegularExpressions
Imports System.Windows
Imports System.Runtime.InteropServices
Imports System.Drawing.Drawing2D
Imports System.Windows.Forms.VisualStyles.VisualStyleElement.Status
Imports ClosedXML.Excel
Imports iTextSharp.text
Imports iTextSharp.text.pdf
Imports Npgsql
'Imports DocumentFormat.OpenXml.Office2010.Excel
Imports System.Globalization
Imports FxResources.System
Imports FxResources
Imports Org.BouncyCastle.Crypto
Imports System.Configuration


' Ustaw lokalizację aplikacji na język polski

Module GlobalVariables
    Public printerOids As New List(Of String) From {
        ".1.3.6.1.2.1.43.8.2.1.14.1.1", ' HP Manufacturer
        ".1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1", ' Konica Minolta Manufacturer
        ".1.3.6.1.2.1.25.3.2.1.3.1", ' urządzenie
        ".1.3.6.1.2.1.1.1.0", ' Urządzenie DEVELOP
        ".1.3.6.1.4.1.11.2.3.9.1.1.7.0", ' Manufacture OKI
        ".1.3.6.1.2.1.25.3.2.1.3.1", ' Manufacture LEX
        ".1.3.6.1.4.1.11.2.3.9.1.1.7.0", ' Manufacture BROTHER
        ".1.3.6.1.4.1.1347.40.35.1.1.2.1", ' Urządzenie KYOCERA
        ".1.3.6.1.2.1.43.5.1.1.16.1" ' Urządzeie XEROX
    }
End Module


Module Logger

    Private folderLogPath As String = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "PrinterMonitor Agent", "log")
    Private filePathLogs As String = Path.Combine(folderLogPath, "trace.log")


    Public Sub Log(message As String)
        ' Upewnij się, że folder logów istnieje
        If Not Directory.Exists(folderLogPath) Then
            Directory.CreateDirectory(folderLogPath)
        End If

        Try
            Using writer As StreamWriter = New StreamWriter(filePathLogs, True)
                writer.WriteLine($"{DateTime.Now:yyyy-MM-dd HH:mm:ss}: {message}")
            End Using
        Catch ex As Exception
            ' Obsługa błędów w przypadku nieudanego zapisu do logu
            Console.WriteLine($"Błąd zapisu logu: {ex.Message}")
        End Try
    End Sub
End Module

Public Class Form1

    Public Sub New()
        Thread.CurrentThread.CurrentCulture = New CultureInfo("pl-PL")
        Thread.CurrentThread.CurrentUICulture = New CultureInfo("pl-PL")
        InitializeComponent()
        SetPlaceholder()
    End Sub

    Private Sub TraceWithTimestamp(message As String)
        Dim timestampedMessage As String = $"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - {message}"
        Trace.WriteLine(timestampedMessage)
    End Sub





    Public dataTable As DataTable
    Private dataTable1 As DataTable

    Private folderDataPath As String = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "PrinterMonitor Agent", "data")
    Private folderConfigPath As String = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "PrinterMonitor Agent", "config")

    Private filePath As String = Path.Combine(folderDataPath, "deviceList.json")
    Private filePathExportData As String = Path.Combine(folderDataPath, "exportData.json")
    Private settingsFilePath As String = Path.Combine(folderConfigPath, "appSettings.json")
    Private connectFilePath As String = Path.Combine(folderConfigPath, "dbConnect.json")

    Private contextMenuStrip1 As New ContextMenuStrip()
    Private WithEvents copyMenuItem As New ToolStripMenuItem("Kopiuj komórkę")
    Private WithEvents copyMenuItem1 As New ToolStripMenuItem("Otwórz w przeglądarce")
    Private WithEvents copyMenuItem2 As New ToolStripMenuItem("Ustwienia kolumn")
    Private WithEvents copyMenuItem3 As New ToolStripMenuItem("Edytuj urządzenie")
    Private WithEvents copyMenuItem4 As New ToolStripMenuItem("Usuń urządzenie")
    Private WithEvents copyMenuItem5 As New ToolStripMenuItem("Odczyt danych urządzenia")
    Private contextMenuStrip2 As New ContextMenuStrip()
    Private WithEvents trayItem1 As New ToolStripMenuItem("Tryb pełnoekranowy")
    Private WithEvents trayItem2 As New ToolStripMenuItem("Zamknij program")
    Private clickedButton As Button
    Private minIpBytes As Byte()
    Private maxIpAddress As System.Net.IPAddress
    Private maxIpBytes As Byte()
    Private minIpAddress As System.Net.IPAddress
    Private lowTonerBk As Boolean = False
    Private lowTonerY As Boolean = False
    Private lowTonerM As Boolean = False
    Private lowTonerC As Boolean = False
    Private zielonaKropka As String = "●"
    Private czerwonaKropka As String = "•"
    Private kolorHeader As Color = Color.FromArgb(221, 221, 187)
    Private ReadOnly lockObjectLista As New Object()
    Private ReadOnly lockObjectExportData As New Object()
    Private cancellationTokenSource As CancellationTokenSource
    Private ReadOnly fileLock As New Object()






    Private settings As AppSettings
    Private connect As dbConnect
    Private radio1_SposobOdczytuZmieniaj As New RadioButton()
    Private radio2_SposobOdczytuNieZmieniaj As New RadioButton()
    Private radio1_OdczytAuto As New RadioButton()
    Private radio2_OdczytManual As New RadioButton()
    Private numericUpDownIloscOdczytow As New NumericUpDown()
    Private comboHoursPierwszyOdczyt As New ComboBox()
    Private comboMinutesPierwszyOdczyt As New ComboBox()
    Private check_SlownikMiejscePostoju_On_Off As New CheckBox()
    Private check_SlownikDodatkoweInfo_On_Off As New CheckBox()
    Private check_NazwaHosta_On_Off As New CheckBox()
    Private check_DodatkoweInfo_On_Off As New CheckBox()
    Private check_Mac_On_Off As New CheckBox()
    Private check_LicznikMono_On_Off As New CheckBox()
    Private check_LicznikKolor_On_Off As New CheckBox()
    Private check_TonerBk_On_Off As New CheckBox()
    Private check_BkPercent_On_Off As New CheckBox()
    Private check_TonerY_On_Off As New CheckBox()
    Private check_YPercent_On_Off As New CheckBox()
    Private check_TonerM_On_Off As New CheckBox()
    Private check_MPercent_On_Off As New CheckBox()
    Private check_TonerC_On_Off As New CheckBox()
    Private check_CPercent_On_Off As New CheckBox()
    Private odczytTimer As System.Timers.Timer
    Private initialRunTime As DateTime
    Private checkUstawieniaKolumnZapiszNaStale_On_Off As New CheckBox()
    Private checkUstawieniaKolumnPrzywrocDomyslne_On_Off As New CheckBox()
    Private PolaczenieSerwerHostDane As New TextBox
    Private PolaczenieSerwerUsernameDane As New TextBox
    Private PolaczenieSerwerPasswordDane As New TextBox
    Private PolaczenieSerwerDatabaseDane As New TextBox
    Private PolaczenieSerwerClientDane As New TextBox


    ' Klucz szyfrowania (w przykładzie poniżej jest prosty, ale w rzeczywistych aplikacjach powinien być bardziej złożony i przechowywany w bezpiecznym miejscu)
    Private Const encryptionKey As String = "Bauw29!Pp933#newWW&okGhV" ' Klucz musi mieć 16, 24 lub 32 znaki

    Private daneSzukajUrzadzen As Dane
    Private istniejeAll As Boolean
    Private istniejeOnlySerial As Boolean
    Private iloscNowych As Integer
    Private iloscZaktualizowanych As Integer

    ' SORTOWANIE PO WYSZUKIWANIU
    Private originalDataSource As DataTable
    Private filteredData As DataTable ' Pole przechowujące przefiltrowane dane
    Private currentSearchTerm As String ' Pole przechowujące bieżący wyszukiwany termin

    Private columnStates As New Dictionary(Of String, Boolean)() ' Zmienna przechowująca stany checkboxów
    Private columnCheckBoxes As New Dictionary(Of String, CheckBox)() ' Słownik checkboxów dla kolumn
    Private originalStyles As New Dictionary(Of Button, Tuple(Of System.Drawing.Font, System.Drawing.Point, System.Drawing.Color, System.Drawing.Size, Integer))
    Private originalColorButtonsMenu As System.Drawing.Color = System.Drawing.Color.FromArgb(235, 235, 224)

    Private headerCheckBox As New CheckBox()
    Private statusCountOnline As Integer = 0
    Private statusCountOffline As Integer = 0
    Private disaableBottomInfo As Boolean = False

    Private ReadOnly semaphore As New SemaphoreSlim(1, 1)




    ' WARTOŚCI ZAPISYWANE DO JSON
    Public Class Dane
        Public Property AdresIp As String
        Public Property Hostname As String
        Public Property Urzadzenie As String
        Public Property SerialNumber As String
        Public Property Mac As String
        Public Property MiejscePostoju As String
        Public Property DodatkoweInfo As String
    End Class

    ' PLIK Z ODCZYTAMI LICZNIKÓW I TONERÓW exportData.json
    Public Class DaneToDatabase
        Public Property SerialNumber As String
        Public Property CzyKolor As Boolean
        Public Property LicznikM As Integer?
        Public Property LicznikK As Integer?
        Public Property PercentTonerBk As String
        Public Property PercentTonerY As String
        Public Property PercentTonerM As String
        Public Property PercentTonerC As String
        Public Property Status As Boolean
        Public Property DataOdczytu As String
    End Class


    Public Class NetworkEntries
        Public Property AddressIP As String
    End Class
    Public Class slMiejPost
        Public Property MiejscePostoju As String
    End Class
    Public Class slDodInfo
        Public Property DodatkoweInfo As String
    End Class
    Public Class AppSettings
        Public Property sposobOdczytuAuto As Boolean?
        Public Property sposobOdczytuManual As Boolean?
        Public Property odczytAuto As Boolean?
        Public Property odczytManual As Boolean?
        Public Property odczytIloscOdczytow As Integer
        Public Property odczytHoursPierwszyOdczyt As Integer
        Public Property odczytMinutesPierwszyOdczyt As Integer
        Public Property odczytOstatniOdczyt As DateTime
        Public Property odczytOstatniZnanyHoursPierwszyOdczyt As Integer = -1
        Public Property odczytOstatniZnanyMinutesPierwszyOdczyt As Integer = -1
        Public Property slownikMiejscePostojuON As Boolean?
        Public Property slownikDodatkoweInfoON As Boolean?
        Public Property kolumnaNazwaHostaON As Boolean?
        Public Property kolumnaDodatkoweInfoON As Boolean?
        Public Property kolumnaMacON As Boolean?
        Public Property kolumnaLicznikMonoON As Boolean?
        Public Property kolumnaLicznikKolorON As Boolean?
        Public Property kolumnaTonerBkON As Boolean?
        Public Property kolumnaBkPercentON As Boolean?
        Public Property kolumnaTonerYON As Boolean?
        Public Property kolumnaYPercentON As Boolean?
        Public Property kolumnaTonerMON As Boolean?
        Public Property kolumnaMPercentON As Boolean?
        Public Property kolumnaTonerCON As Boolean?
        Public Property kolumnaCPercentON As Boolean?
        Public Property kolumnaSortAdresAscON As Boolean?
        Public Property kolumnaSortAdresDescON As Boolean?
        Public Property kolumnaSortNazwaHostaAscON As Boolean?
        Public Property kolumnaSortNazwaHostaDescON As Boolean?
        Public Property kolumnaSortUrzadzenieAscON As Boolean?
        Public Property kolumnaSortUrzadzenieDescON As Boolean?
        Public Property kolumnaSortSerialAscON As Boolean?
        Public Property kolumnaSortSerialDescON As Boolean?
        Public Property kolumnaSortMiejscePostojuAscON As Boolean?
        Public Property kolumnaSortMiejscePostojuDescON As Boolean?
        Public Property kolumnaSortDodatkoweInfoAscON As Boolean?
        Public Property kolumnaSortDodatkoweInfoDescON As Boolean?
        Public Property siecAlternatywnaPodsiec As List(Of NetworkEntries) = New List(Of NetworkEntries)()
        Public Property slownikMiejscePostoju As List(Of slMiejPost) = New List(Of slMiejPost)()
        Public Property slownikDodatkoweInformacje As List(Of slDodInfo) = New List(Of slDodInfo)()

    End Class

    Public Class dbConnect
        Public Property connectToServerHost As String
        Public Property connectToServerUsername As String
        Public Property connectToServerPassword As String
        Public Property connectToServerDatabase As String
        Public Property connectToServerKlient As String
    End Class


    ' Metoda zapisująca lub aktualizująca dane do bazy danych
    Public Sub SaveOrUpdateJsonDataToPostgreSQL(filePath As String)

        Try
            Logger.Log("Rozpoczęcie funkcji SaveOrUpdateJsonDataToPostgreSQL")

            ' Ładowanie danych z plików JSON
            Logger.Log("Ładowanie danych z plików JSON")
            Dim jsonPrintersData As String = File.ReadAllText(filePath)
            Dim jsonDataToDatabase As String = File.ReadAllText(filePathExportData)
            Dim printers As List(Of Dane) = JsonConvert.DeserializeObject(Of List(Of Dane))(jsonPrintersData)
            Dim odczyty As List(Of DaneToDatabase) = JsonConvert.DeserializeObject(Of List(Of DaneToDatabase))(jsonDataToDatabase)

            ' Ustawienie połączenia do bazy danych
            Logger.Log("Ustawienie połączenia do bazy danych")
            Dim connectionString As String = $"Host={connect.connectToServerHost};Username={connect.connectToServerUsername};Password={connect.connectToServerPassword};Database={connect.connectToServerDatabase};Timeout=300;"

            Using conn As New NpgsqlConnection(connectionString)
                conn.Open()
                Logger.Log("Połączenie z bazą danych otwarte")

                ' Tworzenie transakcji
                Using transaction As NpgsqlTransaction = conn.BeginTransaction()
                    Try
                        ' Sprawdzenie lub dodanie klienta
                        Logger.Log("Sprawdzanie lub dodawanie klienta")
                        Dim clientId As Integer = GetClientId(connect.connectToServerKlient, conn)
                        If clientId = 0 AndAlso Not String.IsNullOrEmpty(connect.connectToServerKlient) Then
                            Logger.Log("Dodawanie nowego klienta")
                            Dim insertClientQuery As String = "INSERT INTO klienci (nazwa) VALUES (@klientNazwa) RETURNING id_klient;"
                            Using insertClientCmd As New NpgsqlCommand(insertClientQuery, conn, transaction)
                                insertClientCmd.Parameters.AddWithValue("@klientNazwa", connect.connectToServerKlient)
                                clientId = Convert.ToInt32(insertClientCmd.ExecuteScalar())
                            End Using
                        End If

                        ' Przetwarzanie danych drukarek
                        For Each printer As Dane In printers
                            Logger.Log($"Przetwarzanie drukarki: {printer.SerialNumber}")
                            If PrinterExists(printer.SerialNumber, conn, transaction) Then
                                Logger.Log($"Aktualizacja drukarki {printer.SerialNumber}")
                                UpdatePrinter(printer, clientId, conn, transaction)
                            Else
                                Logger.Log($"Dodawanie nowej drukarki {printer.SerialNumber}")
                                Dim insertPrinterQuery As String = "INSERT INTO printers (adres, hostname, urzadzenie, serial, mac, miejsce_postoju, dodatkowe_informacje, klient_id, data_dodania) " &
                                                    "VALUES (@adresIp, @hostname, @urzadzenie, @serialNumber, @mac, @miejscePostoju, @dodatkoweInfo, @clientId, @dataDodania);"

                                Using insertPrinterCmd As New NpgsqlCommand(insertPrinterQuery, conn, transaction)
                                    insertPrinterCmd.Parameters.AddWithValue("@adresIp", If(String.IsNullOrEmpty(printer.AdresIp), DBNull.Value, printer.AdresIp))
                                    insertPrinterCmd.Parameters.AddWithValue("@hostname", If(String.IsNullOrEmpty(printer.Hostname), DBNull.Value, printer.Hostname))
                                    insertPrinterCmd.Parameters.AddWithValue("@urzadzenie", If(String.IsNullOrEmpty(printer.Urzadzenie), DBNull.Value, printer.Urzadzenie))
                                    insertPrinterCmd.Parameters.AddWithValue("@serialNumber", If(String.IsNullOrEmpty(printer.SerialNumber), DBNull.Value, printer.SerialNumber))
                                    insertPrinterCmd.Parameters.AddWithValue("@mac", If(String.IsNullOrEmpty(printer.Mac), DBNull.Value, printer.Mac))
                                    insertPrinterCmd.Parameters.AddWithValue("@miejscePostoju", If(String.IsNullOrEmpty(printer.MiejscePostoju), DBNull.Value, printer.MiejscePostoju))
                                    insertPrinterCmd.Parameters.AddWithValue("@dodatkoweInfo", If(String.IsNullOrEmpty(printer.DodatkoweInfo), DBNull.Value, printer.DodatkoweInfo))
                                    insertPrinterCmd.Parameters.AddWithValue("@clientId", clientId)
                                    insertPrinterCmd.Parameters.AddWithValue("@dataDodania", DateTime.Now)

                                    insertPrinterCmd.ExecuteNonQuery()
                                    Logger.Log($"Dodano drukarkę {printer.SerialNumber}")
                                End Using
                            End If
                        Next

                        ' Przetwarzanie odczytów
                        For Each odczyt As DaneToDatabase In odczyty
                            Logger.Log($"Przetwarzanie odczytu dla drukarki: {odczyt.SerialNumber}")
                            Dim printerId As Integer = GetPrinterId(odczyt.SerialNumber, conn, transaction)

                            If printerId = 0 Then
                                Throw New Exception($"Drukarka o numerze seryjnym {odczyt.SerialNumber} nie została znaleziona.")
                            End If

                            ' Pobranie ostatniego odczytu
                            Dim ostatniOdczytStatus As (Boolean, DateTime) = GetLastOdczytStatus(printerId, conn, transaction)
                            Dim ostatniStatus As Boolean = ostatniOdczytStatus.Item1
                            Dim ostatniaData As DateTime = ostatniOdczytStatus.Item2

                            If OdczytExistsForToday(printerId, conn, transaction) Then
                                If odczyt.Status OrElse (ostatniStatus AndAlso (ostatniStatus = True Or ostatniaData.Date < DateTime.Now.Date)) Then
                                    Logger.Log("Aktualizacja istniejącego odczytu")
                                    UpdateOdczyt(printerId, odczyt, conn, transaction, ostatniStatus)
                                End If
                            Else
                                If odczyt.Status OrElse (ostatniStatus = True And ostatniaData.Date < DateTime.Now.Date) Then
                                    Logger.Log("Dodanie nowego odczytu")
                                    Dim insertOdczytQuery As String = "INSERT INTO odczyty (printer_id, data_odczytu, czas_odczytu, licznik_m, licznik_k, percent_toner_bk, percent_toner_y, percent_toner_m, percent_toner_c, status, ostatni_status, czy_kolor) " &
                                                "VALUES (@printerId, @dataOdczytu, (@czasOdczytu::time(0)), @licznikM, @licznikK, @percentTonerBk, @percentTonerY, @percentTonerM, @percentTonerC, @status, @ostatniStatus, @czyKolor);"

                                    Using insertOdczytCmd As New NpgsqlCommand(insertOdczytQuery, conn, transaction)
                                        insertOdczytCmd.Parameters.AddWithValue("@printerId", printerId)
                                        insertOdczytCmd.Parameters.AddWithValue("@dataOdczytu", DateTime.Now)
                                        insertOdczytCmd.Parameters.AddWithValue("@czasOdczytu", DateTime.Now.TimeOfDay)
                                        insertOdczytCmd.Parameters.AddWithValue("@licznikM", If(odczyt.LicznikM.HasValue, odczyt.LicznikM.Value, DBNull.Value))
                                        insertOdczytCmd.Parameters.AddWithValue("@licznikK", If(odczyt.LicznikK.HasValue, odczyt.LicznikK.Value, DBNull.Value))
                                        insertOdczytCmd.Parameters.AddWithValue("@percentTonerBk", If(String.IsNullOrWhiteSpace(odczyt.PercentTonerBk), DBNull.Value, odczyt.PercentTonerBk))
                                        insertOdczytCmd.Parameters.AddWithValue("@percentTonerY", If(String.IsNullOrWhiteSpace(odczyt.PercentTonerY), DBNull.Value, odczyt.PercentTonerY))
                                        insertOdczytCmd.Parameters.AddWithValue("@percentTonerM", If(String.IsNullOrWhiteSpace(odczyt.PercentTonerM), DBNull.Value, odczyt.PercentTonerM))
                                        insertOdczytCmd.Parameters.AddWithValue("@percentTonerC", If(String.IsNullOrWhiteSpace(odczyt.PercentTonerC), DBNull.Value, odczyt.PercentTonerC))
                                        insertOdczytCmd.Parameters.AddWithValue("@status", odczyt.Status)
                                        insertOdczytCmd.Parameters.AddWithValue("@ostatniStatus", ostatniStatus)
                                        insertOdczytCmd.Parameters.AddWithValue("@czyKolor", odczyt.CzyKolor)

                                        insertOdczytCmd.ExecuteNonQuery()
                                        Logger.Log("Dodano nowy odczyt")
                                    End Using

                                End If
                            End If
                        Next

                        ' Zatwierdzenie transakcji
                        Logger.Log("Zatwierdzanie transakcji")
                        transaction.Commit()

                    Catch ex As Exception
                        transaction.Rollback()
                        Logger.Log("Błąd w transakcji: " & ex.Message)
                        Throw New Exception("Błąd podczas zapisywania danych: " & ex.Message)
                    End Try
                End Using
            End Using

        Catch ex As Exception
            Logger.Log("Error w SaveOrUpdateJsonDataToPostgreSQL: " & ex.Message)
        End Try
    End Sub


    ' Funkcja do aktualizacji danych w tabeli odczyty
    Private Sub UpdateOdczyt(printerId As Integer, odczyt As DaneToDatabase, conn As NpgsqlConnection, transaction As NpgsqlTransaction, lastStatus As Boolean)
        Dim updateOdczytQuery As String = "UPDATE odczyty SET czas_odczytu = (@czasOdczytu::time(0)), licznik_m = @licznikM, licznik_k = @licznikK, percent_toner_bk = @percentTonerBk, percent_toner_y = @percentTonerY, percent_toner_m = @percentTonerM, percent_toner_c = @percentTonerC, ostatni_status = @ostatniStatus, status = @status, czy_kolor = @czyKolor " &
                                  "WHERE printer_id = @printerId AND DATE(data_odczytu) = CURRENT_DATE;"

        Using updateOdczytCmd As New NpgsqlCommand(updateOdczytQuery, conn, transaction)
            updateOdczytCmd.Parameters.AddWithValue("@printerId", printerId)
            updateOdczytCmd.Parameters.AddWithValue("@czasOdczytu", DateTime.Now.TimeOfDay)
            updateOdczytCmd.Parameters.AddWithValue("@licznikM", If(odczyt.LicznikM.HasValue, odczyt.LicznikM.Value, DBNull.Value))
            updateOdczytCmd.Parameters.AddWithValue("@licznikK", If(odczyt.LicznikK.HasValue, odczyt.LicznikK.Value, DBNull.Value))
            updateOdczytCmd.Parameters.AddWithValue("@percentTonerBk", If(String.IsNullOrWhiteSpace(odczyt.PercentTonerBk), DBNull.Value, odczyt.PercentTonerBk))
            updateOdczytCmd.Parameters.AddWithValue("@percentTonerY", If(String.IsNullOrWhiteSpace(odczyt.PercentTonerY), DBNull.Value, odczyt.PercentTonerY))
            updateOdczytCmd.Parameters.AddWithValue("@percentTonerM", If(String.IsNullOrWhiteSpace(odczyt.PercentTonerM), DBNull.Value, odczyt.PercentTonerM))
            updateOdczytCmd.Parameters.AddWithValue("@percentTonerC", If(String.IsNullOrWhiteSpace(odczyt.PercentTonerC), DBNull.Value, odczyt.PercentTonerC))
            updateOdczytCmd.Parameters.AddWithValue("@status", odczyt.Status)
            updateOdczytCmd.Parameters.AddWithValue("@ostatniStatus", lastStatus)
            updateOdczytCmd.Parameters.AddWithValue("@czyKolor", odczyt.CzyKolor)

            updateOdczytCmd.ExecuteNonQuery()
        End Using
    End Sub

    ' Funkcja do pobrania statusu ostatniego odczytu i daty
    Private Function GetLastOdczytStatus(printerId As Integer, conn As NpgsqlConnection, transaction As NpgsqlTransaction) As (Boolean, DateTime)
        ' Przykładowe zapytanie, aby uzyskać ostatni status i datę
        Dim query As String = "SELECT status, data_odczytu FROM odczyty WHERE printer_id = @printerId ORDER BY data_odczytu DESC LIMIT 1;"
        Using cmd As New NpgsqlCommand(query, conn, transaction)
            cmd.Parameters.AddWithValue("@printerId", printerId)
            Using reader As NpgsqlDataReader = cmd.ExecuteReader()
                If reader.Read() Then
                    Return (reader.GetBoolean(0), reader.GetDateTime(1))
                End If
            End Using
        End Using
        Return (False, DateTime.MinValue) ' Zwróć fałszywy status i minimalną datę, jeśli nie ma odczytów
    End Function

    ' Funkcja sprawdzająca, czy odczyt istnieje dla danej drukarki w danym dniu
    Private Function OdczytExistsForToday(printerId As Integer, conn As NpgsqlConnection, Optional transaction As NpgsqlTransaction = Nothing) As Boolean
        Dim query As String = "SELECT COUNT(*) FROM odczyty WHERE printer_id = @printerId AND DATE(data_odczytu) = CURRENT_DATE;"
        Using cmd As New NpgsqlCommand(query, conn, transaction)
            cmd.Parameters.AddWithValue("@printerId", printerId)
            Dim count As Integer = Convert.ToInt32(cmd.ExecuteScalar())
            Return count > 0
        End Using
    End Function



    ' Funkcja do uzyskania ID drukarki na podstawie numeru seryjnego
    Private Function GetPrinterId(serialNumber As String, conn As NpgsqlConnection, Optional transaction As NpgsqlTransaction = Nothing) As Integer
        Dim query As String = "SELECT id_printer FROM printers WHERE serial = @serialNumber;"
        Using cmd As New NpgsqlCommand(query, conn, transaction)
            cmd.Parameters.AddWithValue("@serialNumber", serialNumber)
            Dim result As Object = cmd.ExecuteScalar()
            If result IsNot Nothing Then
                Return Convert.ToInt32(result)
            End If
        End Using
        Return 0
    End Function

    ' Funkcja do aktualizacji danych drukarki w bazie danych
    Private Sub UpdatePrinter(printer As Dane, clientId As Integer, conn As NpgsqlConnection, transaction As NpgsqlTransaction)
        ' Definicja zapytania aktualizującego dane drukarki w tabeli printers na podstawie numeru seryjnego
        Dim updatePrinterQuery As String = "UPDATE printers SET adres = @adresIp, hostname = @hostname, urzadzenie = @urzadzenie, " &
                                       "mac = @mac, miejsce_postoju = @miejscePostoju, dodatkowe_informacje = @dodatkoweInfo, " &
                                       "klient_id = @clientId " &
                                       "WHERE serial = @serialNumber;"

        ' Utworzenie komendy aktualizującej z przekazanymi parametrami
        Using updatePrinterCmd As New NpgsqlCommand(updatePrinterQuery, conn, transaction)
            ' Ustawienie wartości parametrów komendy z danych drukarki, przy jednoczesnym sprawdzeniu, czy są one null
            updatePrinterCmd.Parameters.AddWithValue("@adresIp", If(String.IsNullOrEmpty(printer.AdresIp), DBNull.Value, printer.AdresIp))
            updatePrinterCmd.Parameters.AddWithValue("@hostname", If(String.IsNullOrEmpty(printer.Hostname), DBNull.Value, printer.Hostname))
            updatePrinterCmd.Parameters.AddWithValue("@urzadzenie", If(String.IsNullOrEmpty(printer.Urzadzenie), DBNull.Value, printer.Urzadzenie))
            updatePrinterCmd.Parameters.AddWithValue("@serialNumber", If(String.IsNullOrEmpty(printer.SerialNumber), DBNull.Value, printer.SerialNumber))
            updatePrinterCmd.Parameters.AddWithValue("@mac", If(String.IsNullOrEmpty(printer.Mac), DBNull.Value, printer.Mac))
            updatePrinterCmd.Parameters.AddWithValue("@miejscePostoju", If(String.IsNullOrEmpty(printer.MiejscePostoju), DBNull.Value, printer.MiejscePostoju))
            updatePrinterCmd.Parameters.AddWithValue("@dodatkoweInfo", If(String.IsNullOrEmpty(printer.DodatkoweInfo), DBNull.Value, printer.DodatkoweInfo))
            updatePrinterCmd.Parameters.AddWithValue("@clientId", clientId) ' Ustawienie ID klienta, który jest zawsze wymagany

            ' Wykonanie komendy aktualizującej
            updatePrinterCmd.ExecuteNonQuery()
        End Using
    End Sub

    ' Funkcja sprawdzająca, czy klient istnieje, zwraca `id_klient` lub 0, jeśli nie istnieje
    Private Function GetClientId(klientNazwa As String, conn As NpgsqlConnection) As Integer
        Dim query As String = "SELECT id_klient FROM klienci WHERE nazwa = @klientNazwa;"
        Using cmd As New NpgsqlCommand(query, conn)
            cmd.Parameters.AddWithValue("@klientNazwa", klientNazwa)
            Dim result As Object = cmd.ExecuteScalar()
            If result IsNot Nothing Then
                Return Convert.ToInt32(result)
            End If
        End Using
        Return 0
    End Function

    ' Funkcja sprawdzająca, czy drukarka o podanym numerze seryjnym istnieje w bazie
    Private Function PrinterExists(serialNumber As String, conn As NpgsqlConnection, Optional transaction As NpgsqlTransaction = Nothing) As Boolean
        Dim query As String = "SELECT COUNT(*) FROM printers WHERE serial = @serialNumber;"
        Using cmd As New NpgsqlCommand(query, conn, transaction)
            cmd.Parameters.AddWithValue("@serialNumber", serialNumber)
            Dim count As Integer = Convert.ToInt32(cmd.ExecuteScalar())
            Return count > 0
        End Using
    End Function


    ' Przycisk uruchamiający zapis danych do bazy
    Private Sub btnTransfer_Click(sender As Object, e As EventArgs) Handles btnTransfer.Click
        SaveOrUpdateJsonDataToPostgreSQL(filePath)
    End Sub


    ' GŁÓWNA FUNKCJA SZUKAJĄCA URZĄDZEŃ ASYNCHRONICZNA
    Private Async Function GetPrinterInfoAsync(printerIP As String) As Task(Of PrinterInfo)
        Return Await Task.Run(Function() GetPrinterInfo(printerIP))
    End Function

    'GŁÓWNA FUNKCJA SZUKAJĄCA URZĄDZEŃ SYNCHRONICZNA
    Public Function GetPrinterInfo(printerIP) As PrinterInfo

        Dim printerInfo As New PrinterInfo()
        printerInfo.IPAddress = printerIP

        Dim objSNMP As Object = Nothing

        Try
            Dim printerCommunity As String = "public"
            objSNMP = CreateObject("OlePrn.OleSNMP")
            objSNMP.Open(printerIP, printerCommunity, 2, 1000)

            Dim urzadzenie = ".1.3.6.1.2.1.25.3.2.1.3.1"
            Dim serial = ".1.3.6.1.2.1.43.5.1.1.17.1"
            Dim mac = ".1.3.6.1.2.1.2.2.1.6.2"

            ' ################## KONICA MINOLTA MONO/KOLOR OID ################## 
            Dim manufakture_KONICA = ".1.3.6.1.4.1.2699.1.2.1.2.1.1.3.1"

            ' ################## KONICA MINOLTA MONO OID ################## 
            Dim tonerBkLevel_KONICA_mono = ".1.3.6.1.2.1.43.11.1.1.9.1.1"
            Dim tonerBkMax_KONICA_mono = ".1.3.6.1.2.1.43.11.1.1.8.1.1"
            Dim hostname_KONICA_mono = "1.3.6.1.2.1.1.5.0"
            Dim counter_Total_KONICA_mono_1 = ".1.3.6.1.4.1.18334.1.1.1.5.7.2.1.1.0"
            Dim counter_Scan_KONICA_mono = ".1.3.6.1.4.1.18334.1.1.1.5.7.2.3.1.5.1"
            Dim counter_Total_KONICA_mono_2 = ".1.3.6.1.2.1.43.10.2.1.4.1.1" ' KONICA MINOLTA bizhub 20

            ' ################## KONICA MINOLTA KOLOR OID ################## 
            Dim hostname_KONICA = ".1.3.6.1.4.1.2699.1.2.1.2.1.1.2.1"
            Dim hostname_KONICA_C220 = ".1.3.6.1.4.1.18334.1.1.2.1.5.7.1.1.1.12.1"
            Dim hostname_KONICA_C258_C3351 = ".1.3.6.1.4.1.2699.1.2.1.3.1.1.4.1.1"
            Dim tonerBkLevel_KONICA = ".1.3.6.1.2.1.43.11.1.1.9.1.4"
            Dim tonerBkMax_KONICA = ".1.3.6.1.2.1.43.11.1.1.8.1.4"
            Dim tonerYLevel_KONICA = ".1.3.6.1.2.1.43.11.1.1.9.1.3"
            Dim tonerYMax_KONICA = ".1.3.6.1.2.1.43.11.1.1.8.1.3"
            Dim tonerMLevel_KONICA = ".1.3.6.1.2.1.43.11.1.1.9.1.2"
            Dim tonerMMax_KONICA = ".1.3.6.1.2.1.43.11.1.1.8.1.2"
            Dim tonerCLevel_KONICA = ".1.3.6.1.2.1.43.11.1.1.9.1.1"
            Dim tonerCMax_KONICA = ".1.3.6.1.2.1.43.11.1.1.8.1.1"
            Dim counter_Total_KONICA = ".1.3.6.1.2.1.43.10.2.1.4.1.1"
            Dim counter_Mono_Prt_KONICA = ".1.3.6.1.4.1.18334.1.1.1.5.7.2.2.1.5.1.2"
            Dim counter_Kolor_Prt_KONICA = ".1.3.6.1.4.1.18334.1.1.1.5.7.2.2.1.5.2.2"
            Dim counter_Two_Kolor_Prt_KONICA = ".1.3.6.1.4.1.18334.1.1.1.5.7.2.2.1.5.4.2"
            Dim counter_Mono_Copy_KONICA = ".1.3.6.1.4.1.18334.1.1.1.5.7.2.2.1.5.1.1"
            Dim counter_Kolor_Copy_KONICA = ".1.3.6.1.4.1.18334.1.1.1.5.7.2.2.1.5.2.1"
            Dim counter_Two_Kolor_Copy_KONICA = ".1.3.6.1.4.1.18334.1.1.1.5.7.2.2.1.5.4.1"
            Dim counter_Single_Kolor_Copy_KONICA = ".1.3.6.1.4.1.18334.1.1.1.5.7.2.2.1.5.3.1"
            Dim counter_Mono_Prt_Scan_KONICA = ".1.3.6.1.4.1.18334.1.1.1.5.7.2.3.1.7.1"
            Dim counter_Mono_Prt_Fax_KONICA = ".1.3.6.1.4.1.18334.1.1.1.5.7.2.3.1.7.2"
            Dim counter_Kolor_Prt_Scan_KONICA = ".1.3.6.1.4.1.18334.1.1.1.5.7.2.3.1.11.1" '8 na pewno nie, ew. 13, 14
            Dim counter_Scan_KONICA = ".1.3.6.1.4.1.18334.1.1.1.5.7.2.3.1.5.1"

            ' ##################  DEVELOP KOLOR OID ################## 
            Dim urzadzenie_DEVELOP = ".1.3.6.1.2.1.1.1.0"
            Dim serial_DEVELOP = ".1.3.6.1.2.1.43.5.1.1.17.1"
            Dim hostname_DEVELOP = ".1.3.6.1.4.1.18334.1.1.2.1.5.7.1.1.1.12.1"
            Dim tonerBkLevel_DEVELOP = ".1.3.6.1.2.1.43.11.1.1.9.1.4"
            Dim tonerBkMax_DEVELOP = ".1.3.6.1.2.1.43.11.1.1.8.1.4"
            Dim tonerYLevel_DEVELOP = ".1.3.6.1.2.1.43.11.1.1.9.1.3"
            Dim tonerYMax_DEVELOP = ".1.3.6.1.2.1.43.11.1.1.8.1.3"
            Dim tonerMLevel_DEVELOP = ".1.3.6.1.2.1.43.11.1.1.9.1.2"
            Dim tonerMMax_DEVELOP = ".1.3.6.1.2.1.43.11.1.1.8.1.2"
            Dim tonerCLevel_DEVELOP = ".1.3.6.1.2.1.43.11.1.1.9.1.1"
            Dim tonerCMax_DEVELOP = ".1.3.6.1.2.1.43.11.1.1.8.1.1"
            Dim counter_Total_DEVELOP = ".1.3.6.1.2.1.43.10.2.1.4.1.1"
            Dim counter_Mono_Prt_DEVELOP = ".1.3.6.1.4.1.18334.1.1.1.5.7.2.2.1.5.1.2"
            Dim counter_Kolor_Prt_DEVELOP = ".1.3.6.1.4.1.18334.1.1.1.5.7.2.2.1.5.2.2"
            Dim counter_Two_Kolor_Prt_DEVELOP = ".1.3.6.1.4.1.18334.1.1.1.5.7.2.2.1.5.4.2"
            Dim counter_Mono_Copy_DEVELOP = ".1.3.6.1.4.1.18334.1.1.1.5.7.2.2.1.5.1.1"
            Dim counter_Kolor_Copy_DEVELOP = ".1.3.6.1.4.1.18334.1.1.1.5.7.2.2.1.5.2.1"
            Dim counter_Two_Kolor_Copy_DEVELOP = ".1.3.6.1.4.1.18334.1.1.1.5.7.2.2.1.5.4.1"
            Dim counter_Single_Kolor_Copy_DEVELOP = ".1.3.6.1.4.1.18334.1.1.1.5.7.2.2.1.5.3.1"
            Dim counter_Mono_Prt_Scan_DEVELOP = ".1.3.6.1.4.1.18334.1.1.1.5.7.2.3.1.7.1"
            Dim counter_Kolor_Prt_Scan_DEVELOP = ".1.3.6.1.4.1.18334.1.1.1.5.7.2.3.1.8.1"
            Dim counter_Scan_DEVELOP = ".1.3.6.1.4.1.18334.1.1.1.5.7.2.3.1.5.1"

            ' ################## HP KOLOR OID ################## 
            Dim tonerYLevel_HP = ".1.3.6.1.2.1.43.11.1.1.9.1.4"
            Dim tonerYMax_HP = ".1.3.6.1.2.1.43.11.1.1.8.1.4"
            Dim tonerMLevel_HP = ".1.3.6.1.2.1.43.11.1.1.9.1.3"
            Dim tonerMMax_HP = ".1.3.6.1.2.1.43.11.1.1.8.1.3"
            Dim tonerCLevel_HP = ".1.3.6.1.2.1.43.11.1.1.9.1.2"
            Dim tonerCMax_HP = ".1.3.6.1.2.1.43.11.1.1.8.1.2"
            Dim counter_Mono_Prt_HP = ".1.3.6.1.4.1.11.2.3.9.4.2.1.4.1.2.6.0"
            Dim counter_Kolor_Prt_HP = ".1.3.6.1.4.1.11.2.3.9.4.2.1.4.1.2.7.0"

            ' ################## HP MONO OID ################## 
            Dim manufakture_HP = ".1.3.6.1.2.1.43.8.2.1.14.1.1"
            Dim hostname_HP = ".1.3.6.1.2.1.1.5.0"
            Dim tonerBkLevel_HP = ".1.3.6.1.2.1.43.11.1.1.9.1.1"
            Dim tonerBkMax_HP = ".1.3.6.1.2.1.43.11.1.1.8.1.1"
            Dim counter_Total_HP = ".1.3.6.1.2.1.43.10.2.1.4.1.1"
            Dim counter_Scan_Adf_HP = ".1.3.6.1.4.1.11.2.3.9.4.2.1.2.2.1.44.0"
            Dim counter_Scan_Glass_HP = ".1.3.6.1.4.1.11.2.3.9.4.2.1.2.2.1.74.0"

            ' ################## OKI OID ################## 
            Dim manufakture_OKI = ".1.3.6.1.4.1.11.2.3.9.1.1.7.0"
            Dim serial_OKI = ".1.3.6.1.4.1.2001.1.1.1.1.11.1.10.45.0"
            Dim model_OKI = ".1.3.6.1.2.1.25.3.2.1.3.1"
            Dim hostname_OKI = ".1.3.6.1.2.1.1.5.0"
            Dim tonerBkLevel_OKI = ".1.3.6.1.2.1.43.11.1.1.9.1.1"
            Dim tonerBkMax_OKI = ".1.3.6.1.2.1.43.11.1.1.8.1.1"
            Dim counter_Total_OKI = ".1.3.6.1.4.1.2001.1.1.1.1.11.1.10.130.0"

            ' ################## LEXMARK MONO OID ################## 
            Dim manufakture_LEX = ".1.3.6.1.2.1.25.3.2.1.3.1"
            Dim serial_LEX = ".1.3.6.1.4.1.641.2.1.2.1.6.1"
            Dim urzadzenie_LEX = ".1.3.6.1.4.1.641.2.1.2.1.2.1"
            Dim hostname_LEX = ".1.3.6.1.2.1.1.5.0"
            Dim tonerBkLevel_LEX = ".1.3.6.1.2.1.43.11.1.1.9.1.1"
            Dim tonerBkMax_LEX = ".1.3.6.1.2.1.43.11.1.1.8.1.1"
            Dim tonerBkLevel_LEX_MS_MX = ".1.3.6.1.2.1.43.11.1.1.9.1.2"
            Dim tonerBkMax_LEX_MS_MX = ".1.3.6.1.2.1.43.11.1.1.8.1.2"
            Dim counter_Total_LEX = ".1.3.6.1.4.1.641.2.1.5.2.0"
            Dim counter_Total_LEX_MS_MX = ".1.3.6.1.2.1.43.10.2.1.4.1.1"

            ' ################## BROTHER MONO OID ################## 
            Dim counter_Total_BROTHER = ".1.3.6.1.2.1.43.10.2.1.4.1.1"

            ' ################## BROTHER KOLOR OID ################## 
            Dim manufakture_BROTHER = ".1.3.6.1.4.1.11.2.3.9.1.1.7.0"
            Dim serial_BROTHER = ".1.3.6.1.2.1.43.5.1.1.17.1"
            Dim hostname_BROTHER = ".1.3.6.1.2.1.1.5.0"
            Dim tonerBkLevel_BROTHER = ".1.3.6.1.2.1.43.11.1.1.9.1.1"
            Dim tonerBkMax_BROTHER = ".1.3.6.1.2.1.43.11.1.1.8.1.1"
            Dim tonerYLevel_BROTHER = ".1.3.6.1.2.1.43.11.1.1.9.1.4"
            Dim tonerYMax_BROTHER = ".1.3.6.1.2.1.43.11.1.1.8.1.4"
            Dim tonerMLevel_BROTHER = ".1.3.6.1.2.1.43.11.1.1.9.1.3"
            Dim tonerMMax_BROTHER = ".1.3.6.1.2.1.43.11.1.1.8.1.3"
            Dim tonerCLevel_BROTHER = ".1.3.6.1.2.1.43.11.1.1.9.1.2"
            Dim tonerCMax_BROTHER = ".1.3.6.1.2.1.43.11.1.1.8.1.2"
            Dim counter_Mono_Prt_BROTHER = ".1.3.6.1.4.1.2435.2.3.9.4.2.1.5.5.52.21.1.3.3"
            Dim counter_Kolor_Prt_BROTHER = ".1.3.6.1.4.1.2435.2.3.9.4.2.1.5.5.52.21.1.3.2"
            Dim counter_Mono_Copy_BROTHER = ".1.3.6.1.4.1.2435.2.3.9.4.2.1.5.5.52.21.1.3.6"
            Dim counter_Kolor_Copy_BROTHER = ".1.3.6.1.4.1.2435.2.3.9.4.2.1.5.5.52.21.1.3.5"
            Dim counter_Mono_Fax_BROTHER = ".1.3.6.1.4.1.2435.2.3.9.4.2.1.5.5.52.21.1.3.9"
            Dim counter_Kolor_Fax_BROTHER = ".1.3.6.1.4.1.2435.2.3.9.4.2.1.5.5.52.21.1.3.8"
            Dim counter_Scan_Adf_1_Sides_BROTHER = ".1.3.6.1.4.1.2435.2.3.9.4.2.1.5.5.54.2.2.1.3.1"
            Dim counter_Scan_Adf_2_Sides_BROTHER = ".1.3.6.1.4.1.2435.2.3.9.4.2.1.5.5.54.2.2.1.3.3"
            Dim counter_Scan_Glass_BROTHER = ".1.3.6.1.4.1.2435.2.3.9.4.2.1.5.5.54.2.2.1.3.2"


            ' ################## KYOCERA MONO OID ################## 
            Dim urzadzenie_KYOCERA = ".1.3.6.1.4.1.1347.40.35.1.1.2.1"
            Dim serial_KYOCERA = ".1.3.6.1.2.1.43.5.1.1.17.1"
            Dim hostname_KYOCERA = ".1.3.6.1.4.1.1347.40.10.1.1.5.1"
            Dim tonerBkLevel_KYOCERA = ".1.3.6.1.2.1.43.11.1.1.9.1.1"
            Dim tonerBkMax_KYOCERA = ".1.3.6.1.2.1.43.11.1.1.8.1.1"
            Dim counter_Total_KYOCERA = ".1.3.6.1.4.1.1347.43.10.1.1.12.1.1"

            ' ##################  XEROX MONO OID ################## 
            Dim urzadzenie_XEROX = ".1.3.6.1.2.1.43.5.1.1.16.1"
            Dim serial_XEROX = ".1.3.6.1.2.1.43.5.1.1.17.1"
            Dim hostname_XEROX = ".1.3.6.1.2.1.43.14.1.1.9.1.9"
            Dim tonerBkLevel_XEROX = ".1.3.6.1.2.1.43.11.1.1.9.1.1"
            Dim tonerBkMax_XEROX = ".1.3.6.1.2.1.43.11.1.1.8.1.1"
            Dim counter_Total_XEROX = ".1.3.6.1.2.1.43.10.2.1.4.1.1"

            ' ##################  SAMSUNG MONO OID ##################          
            Dim serial_SAMSUNG = ".1.3.6.1.2.1.43.5.1.1.17.1"
            Dim hostname_SAMSUNG = ".1.3.6.1.2.1.43.5.1.1.16.1"
            Dim tonerBkLevel_SAMSUNG = ".1.3.6.1.2.1.43.11.1.1.9.1.1"
            Dim tonerBkMax_SAMSUNG = ".1.3.6.1.2.1.43.11.1.1.8.1.1"
            Dim counter_Total_SAMSUNG = ".1.3.6.1.2.1.43.10.2.1.4.1.1"

            ' ##################  CANON MONO OID ##################          
            Dim serial_CANON = ".1.3.6.1.4.1.1602.1.2.1.4.0"
            Dim hostname_CANON = ".1.3.6.1.4.1.2699.1.2.1.2.1.1.2.1"
            Dim tonerBkLevel_CANON = ".1.3.6.1.2.1.43.11.1.1.9.1.1"
            Dim tonerBkMax_CANON = ".1.3.6.1.2.1.43.11.1.1.8.1.1"
            Dim counter_Total_CANON = ".1.3.6.1.2.1.43.10.2.1.4.1.1"

            Dim Printer_Hostname As String = String.Empty
            Dim Printer_MarkaModel As String = String.Empty
            printerInfo.IsColorPrinter = False
            printerInfo.IsAdvancedPrinter = False
            printerInfo.Manufacture = ""
            Dim r = ".1.3.6.1.2.1.2.2.1.6.2"

            ' Sprawdź, czy urządzenie jest drukarką poprzez sprawdzenie OID-ów producenta
            Dim isPrinter As Boolean = False
            For Each oid In GlobalVariables.printerOids
                Try
                    Dim result As String = objSNMP.Get(oid)
                    If Not String.IsNullOrEmpty(result) Then
                        isPrinter = True
                        Exit For
                    End If
                Catch ex As Exception
                    ' Ignoruj wyjątki dla poszczególnych OID-ów
                    ' Logger.Log("Ignorowany wyjątek dla OID: " & oid & " - " & ex.Message)
                End Try
            Next

            If Not isPrinter Then
                ' Logger.Log("Urządzenie nie jest drukarką.")
                Return Nothing
            End If

            Try
                urzadzenie = objSNMP.Get(urzadzenie)

            Catch ex As Exception
                urzadzenie = String.Empty
                'Logger.Log("Błąd przy pobieraniu urzadzenie: " & ex.Message)
            End Try

            Try
                manufakture_HP = objSNMP.Get(manufakture_HP)
            Catch ex As Exception
                manufakture_HP = String.Empty
                'Logger.Log("Błąd przy pobieraniu manufakture_HP: " & ex.Message)
            End Try
            Try
                manufakture_OKI = objSNMP.Get(manufakture_OKI)
            Catch ex As Exception
                manufakture_OKI = String.Empty
                ' Logger.Log("Błąd przy pobieraniu manufakture_OKI: " & ex.Message)
            End Try
            Try
                manufakture_LEX = objSNMP.Get(manufakture_LEX)
            Catch ex As Exception
                manufakture_LEX = String.Empty
                ' Logger.Log("Błąd przy pobieraniu manufakture_LEX: " & ex.Message)
            End Try
            Try
                manufakture_KONICA = objSNMP.Get(manufakture_KONICA)
            Catch ex As Exception
                manufakture_KONICA = String.Empty
                'Logger.Log("Błąd przy pobieraniu manufakture_KONICA: " & ex.Message)
            End Try
            Try
                manufakture_BROTHER = objSNMP.Get(manufakture_BROTHER)
            Catch ex As Exception
                manufakture_BROTHER = String.Empty
                'Logger.Log("Błąd przy pobieraniu manufakture_BROTHER: " & ex.Message)
            End Try
            Try
                urzadzenie_KYOCERA = objSNMP.Get(urzadzenie_KYOCERA)
            Catch ex As Exception
                urzadzenie_KYOCERA = String.Empty
                'Logger.Log("Błąd przy pobieraniu urzadzenie_KYOCERA: " & ex.Message)
            End Try
            Try
                urzadzenie_XEROX = objSNMP.Get(urzadzenie_XEROX)
            Catch ex As Exception
                urzadzenie_XEROX = String.Empty
                'Logger.Log("Błąd przy pobieraniu urzadzenie_XEROX: " & ex.Message)
            End Try
            Try
                urzadzenie_DEVELOP = objSNMP.Get(urzadzenie_DEVELOP)
            Catch ex As Exception
                urzadzenie_DEVELOP = String.Empty
                'Logger.Log("Błąd przy pobieraniu urzadzenie_DEVELOP: " & ex.Message)
            End Try
            Try
                printerInfo.SerialNumber = objSNMP.Get(serial)
            Catch ex As Exception
                printerInfo.SerialNumber = String.Empty
                'Logger.Log("Błąd przy pobieraniu serial: " & ex.Message)
            End Try



            '############################## CANON MONO ###############################################################
            If Not String.IsNullOrEmpty(urzadzenie) AndAlso (urzadzenie.IndexOf("Canon", StringComparison.OrdinalIgnoreCase) >= 0) Then
                printerInfo.IsColorPrinter = False

                printerInfo.MarkaModel = urzadzenie

                Try
                    printerInfo.SerialNumber = objSNMP.Get(serial_CANON)
                Catch ex As Exception
                    printerInfo.SerialNumber = String.Empty
                    ' Logger.Log("Błąd przy pobieraniu serial_CANON: " & ex.Message)
                End Try
                Try
                    printerInfo.Hostname = objSNMP.Get(hostname_CANON)
                Catch ex As Exception
                    printerInfo.Hostname = String.Empty
                    'Logger.Log("Błąd przy pobieraniu hostname_CANON: " & ex.Message)
                End Try

                ' TONERY CANON
                Try
                    printerInfo.tonerLevelBk = objSNMP.Get(tonerBkLevel_CANON)
                Catch ex As Exception
                    ' Logger.Log("Błąd przy pobieraniu tonerBkLevel_CANON: " & ex.Message)
                End Try
                If printerInfo.tonerLevelBk >= 0 AndAlso objSNMP.Get(tonerBkMax_CANON) > 0 Then
                    printerInfo.tonerBkPercent = Math.Round(printerInfo.tonerLevelBk * 100 / objSNMP.Get(tonerBkMax_CANON))
                Else
                    printerInfo.tonerBkPercent = "?"
                End If

                ' LICZNIKI CANON
                Try
                    printerInfo.counterTotal = objSNMP.Get(counter_Total_CANON)
                    printerInfo.counterMonoPrt = printerInfo.counterTotal
                Catch ex As Exception
                    ' Logger.Log("Błąd przy pobieraniu counter_Total_CANON: " & ex.Message)
                End Try

            End If

            '############################## SAMSUNG MONO ###############################################################
            If Not String.IsNullOrEmpty(urzadzenie) AndAlso (urzadzenie.IndexOf("Samsung", StringComparison.OrdinalIgnoreCase) >= 0) Then
                printerInfo.IsColorPrinter = False

                printerInfo.MarkaModel = urzadzenie

                Try
                    printerInfo.SerialNumber = objSNMP.Get(serial_SAMSUNG)
                Catch ex As Exception
                    printerInfo.SerialNumber = String.Empty
                    'Logger.Log("Błąd przy pobieraniu serial_SAMSUNG: " & ex.Message)
                End Try
                Try
                    printerInfo.Hostname = objSNMP.Get(hostname_SAMSUNG)
                Catch ex As Exception
                    printerInfo.Hostname = String.Empty
                    ' Logger.Log("Błąd przy pobieraniu hostname_SAMSUNG: " & ex.Message)
                End Try

                ' TONERY SAMSUNG
                Try
                    printerInfo.tonerLevelBk = objSNMP.Get(tonerBkLevel_SAMSUNG)
                Catch ex As Exception

                    'Logger.Log("Błąd przy pobieraniu tonerBkLevel_SAMSUNG: " & ex.Message)
                End Try
                If printerInfo.tonerLevelBk >= 0 AndAlso objSNMP.Get(tonerBkMax_SAMSUNG) > 0 Then
                    printerInfo.tonerBkPercent = Math.Round(printerInfo.tonerLevelBk * 100 / objSNMP.Get(tonerBkMax_SAMSUNG))
                Else
                    printerInfo.tonerBkPercent = "?"
                End If

                ' LICZNIKI SAMSUNG
                Try
                    printerInfo.counterTotal = objSNMP.Get(counter_Total_SAMSUNG)
                    printerInfo.counterMonoPrt = printerInfo.counterTotal
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Total_SAMSUNG: " & ex.Message)
                End Try

            End If

            '############################## DEVELOP KOLOR ##############################################################
            If Not String.IsNullOrEmpty(urzadzenie_DEVELOP) AndAlso (urzadzenie_DEVELOP.Contains("Develop")) Then
                printerInfo.IsColorPrinter = True
                printerInfo.IsAdvancedPrinter = True

                printerInfo.MarkaModel = urzadzenie_DEVELOP

                Try
                    printerInfo.SerialNumber = objSNMP.Get(serial_DEVELOP)
                Catch ex As Exception
                    printerInfo.SerialNumber = String.Empty
                    'Logger.Log("Błąd przy pobieraniu serial_DEVELOP: " & ex.Message)
                End Try
                Try
                    printerInfo.Hostname = objSNMP.Get(hostname_DEVELOP)
                Catch ex As Exception
                    printerInfo.Hostname = String.Empty
                    'Logger.Log("Błąd przy pobieraniu hostname_DEVELOP: " & ex.Message)
                End Try

                ' TONERY DEVELOP
                Try
                    printerInfo.tonerLevelBk = objSNMP.Get(tonerBkLevel_DEVELOP)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu tonerBkLevel_DEVELOP: " & ex.Message)
                End Try
                Try
                    printerInfo.tonerLevelY = objSNMP.Get(tonerYLevel_DEVELOP)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu tonerYLevel_DEVELOP: " & ex.Message)
                End Try
                Try
                    printerInfo.tonerLevelM = objSNMP.Get(tonerMLevel_DEVELOP)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu tonerMLevel_DEVELOP: " & ex.Message)
                End Try
                Try
                    printerInfo.tonerLevelC = objSNMP.Get(tonerCLevel_DEVELOP)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu tonerCLevel_DEVELOP: " & ex.Message)
                End Try

                If printerInfo.tonerLevelBk >= 0 AndAlso objSNMP.Get(tonerBkMax_DEVELOP) > 0 Then
                    printerInfo.tonerBkPercent = Math.Round(printerInfo.tonerLevelBk * 100 / objSNMP.Get(tonerBkMax_DEVELOP))
                Else
                    printerInfo.tonerBkPercent = "?"
                End If
                If printerInfo.tonerLevelY >= 0 AndAlso objSNMP.Get(tonerYMax_DEVELOP) > 0 Then
                    printerInfo.tonerYPercent = Math.Round(printerInfo.tonerLevelY * 100 / objSNMP.Get(tonerYMax_DEVELOP))

                Else
                    printerInfo.tonerYPercent = "?"
                End If
                If printerInfo.tonerLevelM >= 0 AndAlso objSNMP.Get(tonerMMax_DEVELOP) > 0 Then
                    printerInfo.tonerMPercent = Math.Round(printerInfo.tonerLevelM * 100 / objSNMP.Get(tonerMMax_DEVELOP))
                Else
                    printerInfo.tonerMPercent = "?"
                End If
                If printerInfo.tonerLevelC >= 0 AndAlso objSNMP.Get(tonerCMax_DEVELOP) > 0 Then
                    printerInfo.tonerCPercent = Math.Round(printerInfo.tonerLevelC * 100 / objSNMP.Get(tonerCMax_DEVELOP))
                Else
                    printerInfo.tonerCPercent = "?"
                End If

                ' LICZNIKI DEVELOP KOLOR
                Try
                    printerInfo.counterTotal = objSNMP.Get(counter_Total_DEVELOP)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Total_DEVELOP: " & ex.Message)
                End Try
                Try
                    printerInfo.counterMonoPrt = objSNMP.Get(counter_Mono_Prt_DEVELOP)
                Catch ex As Exception
                    ' Logger.Log("Błąd przy pobieraniu counter_Mono_Prt_DEVELOP: " & ex.Message)
                End Try
                Try
                    printerInfo.counterKolorPrt = objSNMP.Get(counter_Kolor_Prt_DEVELOP)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Kolor_Prt_DEVELOP: " & ex.Message)
                End Try
                Try
                    printerInfo.counterTwoKolorPrt = objSNMP.Get(counter_Two_Kolor_Prt_DEVELOP)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Two_Kolor_Prt_DEVELOP: " & ex.Message)
                End Try
                Try
                    printerInfo.counterMonoCopy = objSNMP.Get(counter_Mono_Copy_DEVELOP)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Mono_Copy_DEVELOP: " & ex.Message)
                End Try
                Try
                    printerInfo.counterKolorCopy = objSNMP.Get(counter_Kolor_Copy_DEVELOP)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Kolor_Copy_DEVELOP: " & ex.Message)
                End Try
                Try
                    printerInfo.counterTwoKolorCopy = objSNMP.Get(counter_Two_Kolor_Copy_DEVELOP)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Two_Kolor_Copy_DEVELOP: " & ex.Message)
                End Try
                Try
                    printerInfo.counterSingleKolorCopy = objSNMP.Get(counter_Single_Kolor_Copy_DEVELOP)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Single_Kolor_Copy_DEVELOP: " & ex.Message)
                End Try
                Try
                    printerInfo.counterMonoPrtScan = objSNMP.Get(counter_Mono_Prt_Scan_DEVELOP)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Mono_Prt_Scan_DEVELOP: " & ex.Message)
                End Try
                Try
                    printerInfo.counterKolorPrtScan = objSNMP.Get(counter_Kolor_Prt_Scan_DEVELOP)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Kolor_Prt_Scan_DEVELOP: " & ex.Message)
                End Try
                Try
                    printerInfo.counterTotalScan = objSNMP.Get(counter_Scan_DEVELOP)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Scan_DEVELOP: " & ex.Message)
                End Try

            End If

            '############################## XEROX MONO #################################################################
            If Not String.IsNullOrEmpty(urzadzenie_XEROX) AndAlso (urzadzenie_XEROX.Contains("Xerox")) Then
                printerInfo.IsColorPrinter = False

                printerInfo.MarkaModel = urzadzenie_XEROX

                Try
                    printerInfo.SerialNumber = objSNMP.Get(serial_XEROX)
                Catch ex As Exception
                    printerInfo.SerialNumber = String.Empty
                    'Logger.Log("Błąd przy pobieraniu serial_XEROX: " & ex.Message)
                End Try
                Try
                    Dim hostname_XEROX_substr = objSNMP.Get(hostname_XEROX)
                    printerInfo.Hostname = GetSubstring_2(hostname_XEROX_substr)
                Catch ex As Exception
                    printerInfo.Hostname = String.Empty
                    'Logger.Log("Błąd przy pobieraniu hostname_XEROX: " & ex.Message)
                End Try

                ' TONERY XEROX MONO
                Try
                    printerInfo.tonerLevelBk = objSNMP.Get(tonerBkLevel_XEROX)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu tonerBkLevel_XEROX: " & ex.Message)
                End Try
                If printerInfo.tonerLevelBk >= 0 AndAlso objSNMP.Get(tonerBkMax_XEROX) > 0 Then
                    printerInfo.tonerBkPercent = Math.Round(printerInfo.tonerLevelBk * 100 / objSNMP.Get(tonerBkMax_XEROX))
                Else
                    printerInfo.tonerBkPercent = "?"
                End If

                ' LICZNIKI XEROX MONO
                Try
                    printerInfo.counterTotal = objSNMP.Get(counter_Total_XEROX)
                    printerInfo.counterMonoPrt = printerInfo.counterTotal
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Total_XEROX: " & ex.Message)
                End Try
            End If

            '############################## KYOCERA MONO ###############################################################
            If Not String.IsNullOrEmpty(urzadzenie_KYOCERA) AndAlso (urzadzenie_KYOCERA.Contains("Kyocera")) Then
                printerInfo.IsColorPrinter = False

                printerInfo.MarkaModel = urzadzenie_KYOCERA

                Try
                    printerInfo.SerialNumber = objSNMP.Get(serial_KYOCERA)
                Catch ex As Exception
                    printerInfo.SerialNumber = String.Empty
                    'Logger.Log("Błąd przy pobieraniu serial_KYOCERA: " & ex.Message)
                End Try
                Try
                    printerInfo.Hostname = objSNMP.Get(hostname_KYOCERA)
                Catch ex As Exception
                    printerInfo.Hostname = String.Empty
                    'Logger.Log("Błąd przy pobieraniu hostname_KYOCERA: " & ex.Message)
                End Try

                ' TONERY KYOCERA
                Try
                    printerInfo.tonerLevelBk = objSNMP.Get(tonerBkLevel_KYOCERA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu tonerBkLevel_KYOCERA: " & ex.Message)
                End Try

                If printerInfo.tonerLevelBk >= 0 AndAlso objSNMP.Get(tonerBkMax_KYOCERA) > 0 Then
                    printerInfo.tonerBkPercent = Math.Round(printerInfo.tonerLevelBk * 100 / objSNMP.Get(tonerBkMax_KYOCERA))
                Else
                    printerInfo.tonerBkPercent = "?"
                End If

                ' LICZNIKI KYOCERA
                Try
                    printerInfo.counterTotal = objSNMP.Get(counter_Total_KYOCERA)
                    printerInfo.counterMonoPrt = printerInfo.counterTotal
                Catch ex As Exception
                    Logger.Log("Błąd przy pobieraniu counter_Total_KYOCERA: " & ex.Message)
                End Try
            End If

            '############################## BROTHER KOLOR ############################################################## 
            If Not String.IsNullOrEmpty(urzadzenie) AndAlso (urzadzenie.IndexOf("Brother", StringComparison.OrdinalIgnoreCase) >= 0) AndAlso (manufakture_BROTHER.IndexOf("Color", StringComparison.OrdinalIgnoreCase) >= 0) Then
                printerInfo.IsColorPrinter = True
                printerInfo.Manufacture = "BROTHER"

                printerInfo.MarkaModel = urzadzenie

                Try
                    printerInfo.SerialNumber = objSNMP.Get(serial_BROTHER)
                Catch ex As Exception
                    printerInfo.SerialNumber = String.Empty
                    Logger.Log("Błąd przy pobieraniu serial_BROTHER: " & ex.Message)
                End Try
                Try
                    printerInfo.Hostname = objSNMP.Get(hostname_BROTHER)
                Catch ex As Exception
                    printerInfo.Hostname = String.Empty
                    'Logger.Log("Błąd przy pobieraniu hostname_BROTHER: " & ex.Message)
                End Try

                ' TONERY BROTHER KOLOR
                Try
                    printerInfo.tonerLevelBk = objSNMP.Get(tonerBkLevel_BROTHER)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu tonerBkLevel_BROTHER: " & ex.Message)
                End Try
                Try
                    printerInfo.tonerLevelY = objSNMP.Get(tonerYLevel_BROTHER)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu tonerYLevel_BROTHER: " & ex.Message)
                End Try
                Try
                    printerInfo.tonerLevelM = objSNMP.Get(tonerMLevel_BROTHER)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu tonerMLevel_BROTHER: " & ex.Message)
                End Try
                Try
                    printerInfo.tonerLevelC = objSNMP.Get(tonerCLevel_BROTHER)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu tonerCLevel_BROTHER: " & ex.Message)
                End Try

                If printerInfo.tonerLevelBk >= 0 AndAlso objSNMP.Get(tonerBkMax_BROTHER) > 0 Then
                    printerInfo.tonerBkPercent = Math.Round(printerInfo.tonerLevelBk * 100 / objSNMP.Get(tonerBkMax_BROTHER))
                Else
                    printerInfo.tonerBkPercent = "?"
                End If
                If printerInfo.tonerLevelY >= 0 AndAlso objSNMP.Get(tonerYMax_BROTHER) > 0 Then
                    printerInfo.tonerYPercent = Math.Round(printerInfo.tonerLevelY * 100 / objSNMP.Get(tonerYMax_BROTHER))
                Else
                    printerInfo.tonerYPercent = "?"
                End If
                If printerInfo.tonerLevelM >= 0 AndAlso objSNMP.Get(tonerMMax_BROTHER) > 0 Then
                    printerInfo.tonerMPercent = Math.Round(printerInfo.tonerLevelM * 100 / objSNMP.Get(tonerMMax_BROTHER))
                Else
                    printerInfo.tonerMPercent = "?"
                End If
                If printerInfo.tonerLevelC >= 0 AndAlso objSNMP.Get(tonerCMax_BROTHER) > 0 Then
                    printerInfo.tonerCPercent = Math.Round(printerInfo.tonerLevelC * 100 / objSNMP.Get(tonerCMax_BROTHER))
                Else
                    printerInfo.tonerCPercent = "?"
                End If

                ' LICZNIKI BROTHER KOLOR
                Try
                    printerInfo.counterMonoPrt = objSNMP.Get(counter_Mono_Prt_BROTHER)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Mono_Prt_BROTHER: " & ex.Message)
                End Try
                Try
                    printerInfo.counterKolorPrt = objSNMP.Get(counter_Kolor_Prt_BROTHER)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Kolor_Prt_BROTHER: " & ex.Message)
                End Try
                Try
                    printerInfo.counterMonoCopy = objSNMP.Get(counter_Mono_Copy_BROTHER)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Mono_Copy_BROTHER: " & ex.Message)
                End Try
                Try
                    printerInfo.counterKolorCopy = objSNMP.Get(counter_Kolor_Copy_BROTHER)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Kolor_Copy_BROTHER: " & ex.Message)
                End Try
                Try
                    printerInfo.counterMonoPrtFax = objSNMP.Get(counter_Mono_Fax_BROTHER)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Mono_Fax_BROTHER: " & ex.Message)
                End Try
                Try
                    printerInfo.counterKolorPrtFax = objSNMP.Get(counter_Kolor_Fax_BROTHER)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Kolor_Fax_BROTHER: " & ex.Message)
                End Try
                Try
                    printerInfo.counterAdf1SidesScan = objSNMP.Get(counter_Scan_Adf_1_Sides_BROTHER)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Scan_Adf_1_Sides_BROTHE: " & ex.Message)
                End Try
                Try
                    printerInfo.counterAdf2SidesScan = objSNMP.Get(counter_Scan_Adf_2_Sides_BROTHER)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Scan_Adf_2_Sides_BROTHE: " & ex.Message)
                End Try
                Try
                    printerInfo.counterGlassScan = objSNMP.Get(counter_Scan_Glass_BROTHER)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Scan_Glass_BROTHER: " & ex.Message)
                End Try
                '############################ BROTHER MONO ##################################################
            ElseIf Not String.IsNullOrEmpty(urzadzenie) AndAlso (urzadzenie.Contains("Brother")) Then
                printerInfo.IsColorPrinter = False

                printerInfo.MarkaModel = urzadzenie

                Try
                    printerInfo.SerialNumber = objSNMP.Get(serial_BROTHER)
                Catch ex As Exception
                    printerInfo.SerialNumber = String.Empty
                    'Logger.Log("Błąd przy pobieraniu serial_BROTHER: " & ex.Message)
                End Try
                Try
                    printerInfo.Hostname = objSNMP.Get(hostname_BROTHER)
                Catch ex As Exception
                    printerInfo.Hostname = String.Empty
                    'Logger.Log("Błąd przy pobieraniu hostname_BROTHER: " & ex.Message)
                End Try

                ' TONERY BROTHER
                Try
                    printerInfo.tonerLevelBk = objSNMP.Get(tonerBkLevel_BROTHER)
                Catch ex As Exception

                    'Logger.Log("Błąd przy pobieraniu tonerBkLevel_BROTHER: " & ex.Message)
                End Try
                If printerInfo.tonerLevelBk >= 0 AndAlso objSNMP.Get(tonerBkMax_BROTHER) > 0 Then
                    printerInfo.tonerBkPercent = Math.Round(printerInfo.tonerLevelBk * 100 / objSNMP.Get(tonerBkMax_BROTHER))
                Else
                    printerInfo.tonerBkPercent = "?"
                End If

                ' LICZNIKI BROTHER
                Try
                    printerInfo.counterTotal = objSNMP.Get(counter_Total_BROTHER)
                    printerInfo.counterMonoPrt = printerInfo.counterTotal
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Total_BROTHER: " & ex.Message)
                End Try
            End If

            '############################## LEXMARK MONO MS MX ###############################################################
            If Not String.IsNullOrEmpty(manufakture_LEX) AndAlso (manufakture_LEX.IndexOf("Lexmark", StringComparison.OrdinalIgnoreCase) >= 0 OrElse manufakture_LEX.IndexOf("Lexmark MS", StringComparison.OrdinalIgnoreCase) >= 0 OrElse manufakture_LEX.IndexOf("Lexmark MX", StringComparison.OrdinalIgnoreCase) >= 0) Then
                printerInfo.IsColorPrinter = False

                Try
                    printerInfo.MarkaModel = objSNMP.Get(urzadzenie_LEX)
                Catch ex As Exception
                    printerInfo.MarkaModel = String.Empty
                    'Logger.Log("Błąd przy pobieraniu urzadzenie_LEX: " & ex.Message)
                End Try
                Try
                    printerInfo.SerialNumber = objSNMP.Get(serial_LEX)
                Catch ex As Exception
                    printerInfo.SerialNumber = String.Empty
                    'Logger.Log("Błąd przy pobieraniu serial_LEX: " & ex.Message)
                End Try
                Try
                    printerInfo.Hostname = objSNMP.Get(hostname_LEX)
                Catch ex As Exception
                    printerInfo.Hostname = String.Empty
                    'Logger.Log("Błąd przy pobieraniu hostname_LEX: " & ex.Message)
                End Try

                ' TONERY LEXMARK MONO
                Try
                    printerInfo.tonerLevelBk = objSNMP.Get(tonerBkLevel_LEX_MS_MX)
                Catch ex As Exception

                    'Logger.Log("Błąd przy pobieraniu tonerBkLevel_LEX_MS_MX: " & ex.Message)
                End Try

                If printerInfo.tonerLevelBk >= 0 AndAlso objSNMP.Get(tonerBkMax_LEX_MS_MX) > 0 Then
                    printerInfo.tonerBkPercent = Math.Round(printerInfo.tonerLevelBk * 100 / objSNMP.Get(tonerBkMax_LEX_MS_MX))
                Else
                    printerInfo.tonerBkPercent = "?"
                End If

                ' LICZNIKI LEX MONO
                Try
                    printerInfo.counterTotal = objSNMP.Get(counter_Total_LEX_MS_MX)
                    printerInfo.counterMonoPrt = printerInfo.counterTotal
                Catch ex As Exception
                    ' Logger.Log("Błąd przy pobieraniu counter_Total_LEX_MS_MX: " & ex.Message)
                End Try

                '############################## LEXMARK MONO ###############################################################
            ElseIf Not String.IsNullOrEmpty(manufakture_LEX) AndAlso (manufakture_LEX.IndexOf("Lexmark", StringComparison.OrdinalIgnoreCase) >= 0) Then
                printerInfo.IsColorPrinter = False

                Try
                    printerInfo.MarkaModel = objSNMP.Get(urzadzenie_LEX)
                Catch ex As Exception
                    printerInfo.MarkaModel = String.Empty
                    'Logger.Log("Błąd przy pobieraniu urzadzenie_LEX: " & ex.Message)
                End Try
                Try
                    printerInfo.SerialNumber = objSNMP.Get(serial_LEX)
                Catch ex As Exception
                    printerInfo.SerialNumber = String.Empty
                    'Logger.Log("Błąd przy pobieraniu serial_LEX: " & ex.Message)
                End Try
                Try
                    printerInfo.Hostname = objSNMP.Get(hostname_LEX)
                Catch ex As Exception
                    printerInfo.Hostname = String.Empty
                    'Logger.Log("Błąd przy pobieraniu hostname_LEX: " & ex.Message)
                End Try

                ' TONERY LEXMARK MONO
                Try
                    printerInfo.tonerLevelBk = objSNMP.Get(tonerBkLevel_LEX)
                Catch ex As Exception

                    'Logger.Log("Błąd przy pobieraniu tonerBkLevel_LEX: " & ex.Message)
                End Try

                If printerInfo.tonerLevelBk >= 0 AndAlso objSNMP.Get(tonerBkMax_LEX) > 0 Then
                    printerInfo.tonerBkPercent = Math.Round(printerInfo.tonerLevelBk * 100 / objSNMP.Get(tonerBkMax_LEX))
                Else
                    printerInfo.tonerBkPercent = "?"
                End If

                ' LICZNIKI LEX MONO
                Try
                    printerInfo.counterTotal = objSNMP.Get(counter_Total_LEX)
                    printerInfo.counterMonoPrt = printerInfo.counterTotal
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Total_LEX: " & ex.Message)
                End Try
            End If

            '############################## OKI MONO ###################################################################
            If Not String.IsNullOrEmpty(manufakture_OKI) AndAlso (manufakture_OKI.IndexOf("OKI", StringComparison.OrdinalIgnoreCase) >= 0) Then
                printerInfo.IsColorPrinter = False
                Try
                    printerInfo.SerialNumber = objSNMP.Get(serial_OKI)
                Catch ex As Exception
                    printerInfo.SerialNumber = String.Empty
                    'Logger.Log("Błąd przy pobieraniu serial_OKI: " & ex.Message)
                End Try
                Try
                    printerInfo.Hostname = objSNMP.Get(hostname_OKI)
                Catch ex As Exception
                    printerInfo.Hostname = String.Empty
                    'Logger.Log("Błąd przy pobieraniu hostname_OKI: " & ex.Message)
                End Try

                printerInfo.MarkaModel = "OKI " & urzadzenie

                ' TONERY OKI MONO
                Try
                    printerInfo.tonerLevelBk = objSNMP.Get(tonerBkLevel_OKI)
                Catch ex As Exception

                    'Logger.Log("Błąd przy pobieraniu tonerBkLevel_OKI: " & ex.Message)
                End Try
                If printerInfo.tonerLevelBk >= 0 AndAlso objSNMP.Get(tonerBkMax_OKI) > 0 Then
                    printerInfo.tonerBkPercent = Math.Round(printerInfo.tonerLevelBk * 100 / objSNMP.Get(tonerBkMax_OKI))
                Else
                    printerInfo.tonerBkPercent = "?"
                End If

                ' LICZNIKI OKI MONO
                Try
                    printerInfo.counterTotal = objSNMP.Get(counter_Total_OKI)
                    printerInfo.counterMonoPrt = printerInfo.counterTotal
                Catch ex As Exception
                    ' Logger.Log("Błąd przy pobieraniu counter_Total_OKI: " & ex.Message)
                End Try
            End If

            '############################## HP MONO ####################################################################
            If Not String.IsNullOrEmpty(manufakture_HP) AndAlso (manufakture_HP.IndexOf("Hewlett-Packard", StringComparison.OrdinalIgnoreCase) >= 0 OrElse manufakture_HP.IndexOf("HP", StringComparison.OrdinalIgnoreCase) >= 0) AndAlso (urzadzenie.IndexOf("HP LaserJet ", StringComparison.OrdinalIgnoreCase) >= 0) Then
                printerInfo.IsColorPrinter = False
                Try
                    printerInfo.Hostname = objSNMP.Get(hostname_HP)
                Catch ex As Exception
                    printerInfo.Hostname = String.Empty
                    'Logger.Log("Błąd przy pobieraniu hostname_HP: " & ex.Message)
                End Try

                printerInfo.MarkaModel = urzadzenie

                ' TONERY HP
                Try
                    printerInfo.tonerLevelBk = objSNMP.Get(tonerBkLevel_HP)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu tonerBkLevel_HP: " & ex.Message)
                End Try

                If printerInfo.tonerLevelBk >= 0 AndAlso objSNMP.Get(tonerBkMax_HP) > 0 Then
                    printerInfo.tonerBkPercent = Math.Round(printerInfo.tonerLevelBk * 100 / objSNMP.Get(tonerBkMax_HP))

                Else
                    printerInfo.tonerBkPercent = "?"
                End If

                ' LICZNIKI HP
                Try
                    printerInfo.counterTotal = objSNMP.Get(counter_Total_HP)
                    printerInfo.counterMonoPrt = printerInfo.counterTotal
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Total_HP: " & ex.Message)
                End Try
                Try
                    printerInfo.counterAdfScan = objSNMP.Get(counter_Scan_Adf_HP)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Scan_Adf_HP: " & ex.Message)
                End Try
                Try
                    printerInfo.counterGlassScan = objSNMP.Get(counter_Scan_Glass_HP)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Scan_Glass_HP: " & ex.Message)
                End Try

                ' ##################### HP KOLOR ##################################################
            ElseIf Not String.IsNullOrEmpty(urzadzenie) AndAlso (urzadzenie.Contains("HP Color ")) Then
                printerInfo.IsColorPrinter = True
                Try
                    printerInfo.Hostname = objSNMP.Get(hostname_HP)
                Catch ex As Exception
                    printerInfo.Hostname = String.Empty
                    'Logger.Log("Błąd przy pobieraniu hostname_HP: " & ex.Message)
                End Try

                printerInfo.MarkaModel = urzadzenie

                'TONERY HP KOLOR
                Try
                    printerInfo.tonerLevelBk = objSNMP.Get(tonerBkLevel_HP)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu tonerBkLevel_HP: " & ex.Message)
                End Try
                Try
                    printerInfo.tonerLevelY = objSNMP.Get(tonerYLevel_HP)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu tonerYLevel_HP: " & ex.Message)
                End Try
                Try
                    printerInfo.tonerLevelM = objSNMP.Get(tonerMLevel_HP)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu tonerMLevel_HP: " & ex.Message)
                End Try
                Try
                    printerInfo.tonerLevelC = objSNMP.Get(tonerCLevel_HP)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu tonerCLevel_HP: " & ex.Message)
                End Try

                If printerInfo.tonerLevelBk >= 0 AndAlso objSNMP.Get(tonerBkMax_HP) > 0 Then
                    printerInfo.tonerBkPercent = Math.Round(printerInfo.tonerLevelBk * 100 / objSNMP.Get(tonerBkMax_HP))
                Else
                    printerInfo.tonerBkPercent = "?"
                End If
                If printerInfo.tonerLevelY >= 0 AndAlso objSNMP.Get(tonerYMax_HP) > 0 Then
                    printerInfo.tonerYPercent = Math.Round(printerInfo.tonerLevelY * 100 / objSNMP.Get(tonerYMax_HP))
                Else
                    printerInfo.tonerYPercent = "?"
                End If
                If printerInfo.tonerLevelM >= 0 AndAlso objSNMP.Get(tonerMMax_HP) > 0 Then
                    printerInfo.tonerMPercent = Math.Round(printerInfo.tonerLevelM * 100 / objSNMP.Get(tonerMMax_HP))
                Else
                    printerInfo.tonerMPercent = "?"
                End If
                If printerInfo.tonerLevelC >= 0 AndAlso objSNMP.Get(tonerCMax_HP) > 0 Then
                    printerInfo.tonerCPercent = Math.Round(printerInfo.tonerLevelC * 100 / objSNMP.Get(tonerCMax_HP))
                Else
                    printerInfo.tonerCPercent = "?"
                End If
                ' LICZNIKI HP KOLOR
                Try
                    printerInfo.counterTotal = objSNMP.Get(counter_Total_HP)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Total_HP: " & ex.Message)
                End Try
                Try
                    printerInfo.counterMonoPrt = objSNMP.Get(counter_Mono_Prt_HP)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Mono_Prt_HP: " & ex.Message)
                End Try
                Try
                    printerInfo.counterKolorPrt = objSNMP.Get(counter_Kolor_Prt_HP)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Kolor_Prt_HP: " & ex.Message)
                End Try
            End If

            ' ############################# KONICA MINOLTA KOLOR C220 ##################################################
            If Not String.IsNullOrEmpty(urzadzenie) AndAlso urzadzenie.Contains("KONICA MINOLTA bizhub C220") Then
                printerInfo.IsColorPrinter = True
                printerInfo.IsAdvancedPrinter = True

                printerInfo.MarkaModel = urzadzenie

                Try
                    printerInfo.Hostname = objSNMP.Get(hostname_KONICA_C220)
                Catch ex As Exception
                    printerInfo.Hostname = String.Empty
                    'Logger.Log("Błąd przy pobieraniu hostname_KONICA_C220: " & ex.Message)
                End Try

                ' TONERY KONICA MINOLTA KOLOR
                Try
                    printerInfo.tonerLevelBk = objSNMP.Get(tonerBkLevel_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu tonerBkLevel_KONICA: " & ex.Message)
                End Try

                Try
                    printerInfo.tonerLevelY = objSNMP.Get(tonerYLevel_KONICA)
                Catch ex As Exception
                    ' Logger.Log("Błąd przy pobieraniu tonerYLevel_KONICA: " & ex.Message)
                End Try

                Try
                    printerInfo.tonerLevelM = objSNMP.Get(tonerMLevel_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu tonerMLevel_KONICA: " & ex.Message)
                End Try

                Try
                    printerInfo.tonerLevelC = objSNMP.Get(tonerCLevel_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu tonerCLevel_KONICA: " & ex.Message)
                End Try

                If printerInfo.tonerLevelBk >= 0 AndAlso objSNMP.Get(tonerBkMax_KONICA) > 0 Then
                    printerInfo.tonerBkPercent = Math.Round(printerInfo.tonerLevelBk * 100 / objSNMP.Get(tonerBkMax_KONICA))
                Else
                    printerInfo.tonerBkPercent = "?"
                End If

                If printerInfo.tonerLevelY >= 0 AndAlso objSNMP.Get(tonerYMax_KONICA) > 0 Then
                    printerInfo.tonerYPercent = Math.Round(printerInfo.tonerLevelY * 100 / objSNMP.Get(tonerYMax_KONICA))
                Else
                    printerInfo.tonerYPercent = "?"
                End If

                If printerInfo.tonerLevelM >= 0 AndAlso objSNMP.Get(tonerMMax_KONICA) > 0 Then
                    printerInfo.tonerMPercent = Math.Round(printerInfo.tonerLevelM * 100 / objSNMP.Get(tonerMMax_KONICA))
                Else
                    printerInfo.tonerMPercent = "?"
                End If

                If printerInfo.tonerLevelC >= 0 AndAlso objSNMP.Get(tonerCMax_KONICA) > 0 Then
                    printerInfo.tonerCPercent = Math.Round(printerInfo.tonerLevelC * 100 / objSNMP.Get(tonerCMax_KONICA))
                Else
                    printerInfo.tonerCPercent = "?"
                End If

                ' LICZNIKI KONICA MINOLTA KOLOR
                Try
                    printerInfo.counterTotal = objSNMP.Get(counter_Total_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Total_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterMonoPrt = objSNMP.Get(counter_Mono_Prt_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Mono_Prt_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterKolorPrt = objSNMP.Get(counter_Kolor_Prt_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Kolor_Prt_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterTwoKolorPrt = objSNMP.Get(counter_Two_Kolor_Prt_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Two_Kolor_Prt_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterMonoCopy = objSNMP.Get(counter_Mono_Copy_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Mono_Copy_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterKolorCopy = objSNMP.Get(counter_Kolor_Copy_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Kolor_Copy_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterTwoKolorCopy = objSNMP.Get(counter_Two_Kolor_Copy_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Two_Kolor_Copy_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterSingleKolorCopy = objSNMP.Get(counter_Single_Kolor_Copy_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Single_Kolor_Copy_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterMonoPrtScan = objSNMP.Get(counter_Mono_Prt_Scan_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Mono_Prt_Scan_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterKolorPrtScan = objSNMP.Get(counter_Kolor_Prt_Scan_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Kolor_Prt_Scan_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterTotalScan = objSNMP.Get(counter_Scan_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Scan_KONICA: " & ex.Message)
                End Try


                ' ############################# KONICA MINOLTA KOLOR C258 C3351 ##################################################
            ElseIf Not String.IsNullOrEmpty(urzadzenie) AndAlso (urzadzenie.Contains("KONICA MINOLTA bizhub C258") OrElse urzadzenie.Contains("KONICA MINOLTA bizhub C3351")) Then
                printerInfo.IsColorPrinter = True
                printerInfo.IsAdvancedPrinter = True

                printerInfo.MarkaModel = urzadzenie

                Try
                    Dim hostname_KONICA_C258_C3351_substr = objSNMP.Get(hostname_KONICA_C258_C3351)
                    printerInfo.Hostname = GetSubstring(hostname_KONICA_C258_C3351_substr)
                Catch ex As Exception
                    printerInfo.Hostname = String.Empty
                    'Logger.Log("Błąd przy pobieraniu hostname_KONICA_C258_C3351: " & ex.Message)
                End Try

                ' TONERY KONICA MINOLTA KOLOR
                Try
                    printerInfo.tonerLevelBk = objSNMP.Get(tonerBkLevel_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu tonerBkLevel_KONICA: " & ex.Message)
                End Try

                Try
                    printerInfo.tonerLevelY = objSNMP.Get(tonerYLevel_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu tonerYLevel_KONICA: " & ex.Message)
                End Try

                Try
                    printerInfo.tonerLevelM = objSNMP.Get(tonerMLevel_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu tonerMLevel_KONICA: " & ex.Message)
                End Try

                Try
                    printerInfo.tonerLevelC = objSNMP.Get(tonerCLevel_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu tonerCLevel_KONICA: " & ex.Message)
                End Try

                If printerInfo.tonerLevelBk >= 0 AndAlso objSNMP.Get(tonerBkMax_KONICA) > 0 Then
                    printerInfo.tonerBkPercent = Math.Round(printerInfo.tonerLevelBk * 100 / objSNMP.Get(tonerBkMax_KONICA))
                Else
                    printerInfo.tonerBkPercent = "?"
                End If

                If printerInfo.tonerLevelY >= 0 AndAlso objSNMP.Get(tonerYMax_KONICA) > 0 Then
                    printerInfo.tonerYPercent = Math.Round(printerInfo.tonerLevelY * 100 / objSNMP.Get(tonerYMax_KONICA))
                Else
                    printerInfo.tonerYPercent = "?"
                End If

                If printerInfo.tonerLevelM >= 0 AndAlso objSNMP.Get(tonerMMax_KONICA) > 0 Then
                    printerInfo.tonerMPercent = Math.Round(printerInfo.tonerLevelM * 100 / objSNMP.Get(tonerMMax_KONICA))
                Else
                    printerInfo.tonerMPercent = "?"
                End If

                If printerInfo.tonerLevelC >= 0 AndAlso objSNMP.Get(tonerCMax_KONICA) > 0 Then
                    printerInfo.tonerCPercent = Math.Round(printerInfo.tonerLevelC * 100 / objSNMP.Get(tonerCMax_KONICA))
                Else
                    printerInfo.tonerCPercent = "?"
                End If

                ' LICZNIKI KONICA MINOLTA KOLOR
                Try
                    printerInfo.counterTotal = objSNMP.Get(counter_Total_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Total_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterMonoPrt = objSNMP.Get(counter_Mono_Prt_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Mono_Prt_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterKolorPrt = objSNMP.Get(counter_Kolor_Prt_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Kolor_Prt_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterTwoKolorPrt = objSNMP.Get(counter_Two_Kolor_Prt_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Two_Kolor_Prt_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterMonoCopy = objSNMP.Get(counter_Mono_Copy_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Mono_Copy_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterKolorCopy = objSNMP.Get(counter_Kolor_Copy_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Kolor_Copy_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterTwoKolorCopy = objSNMP.Get(counter_Two_Kolor_Copy_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Two_Kolor_Copy_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterSingleKolorCopy = objSNMP.Get(counter_Single_Kolor_Copy_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Single_Kolor_Copy_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterMonoPrtScan = objSNMP.Get(counter_Mono_Prt_Scan_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Mono_Prt_Scan_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterKolorPrtScan = objSNMP.Get(counter_Kolor_Prt_Scan_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Kolor_Prt_Scan_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterTotalScan = objSNMP.Get(counter_Scan_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Scan_KONICA: " & ex.Message)
                End Try

                ' ############################# KONICA MINOLTA KOLOR A4 ##################################################
            ElseIf Not String.IsNullOrEmpty(urzadzenie) AndAlso (urzadzenie.Contains("KONICA MINOLTA bizhub C25") OrElse urzadzenie.Contains("KONICA MINOLTA bizhub C35") OrElse urzadzenie.Contains("KONICA MINOLTA bizhub C3350")) Then
                printerInfo.IsAdvancedPrinter = False
                printerInfo.IsColorPrinter = True
                printerInfo.Manufacture = "KONICA MINOLTA"

                printerInfo.MarkaModel = urzadzenie

                Try
                    printerInfo.Hostname = objSNMP.Get(hostname_KONICA)
                Catch ex As Exception
                    printerInfo.Hostname = String.Empty
                    'Logger.Log("Błąd przy pobieraniu hostname_KONICA: " & ex.Message)
                End Try

                ' TONERY KONICA MINOLTA KOLOR
                Try
                    printerInfo.tonerLevelBk = objSNMP.Get(tonerBkLevel_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu tonerBkLevel_KONICA: " & ex.Message)
                End Try

                Try
                    printerInfo.tonerLevelY = objSNMP.Get(tonerYLevel_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu tonerYLevel_KONICA: " & ex.Message)
                End Try

                Try
                    printerInfo.tonerLevelM = objSNMP.Get(tonerMLevel_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu tonerMLevel_KONICA: " & ex.Message)
                End Try

                Try
                    printerInfo.tonerLevelC = objSNMP.Get(tonerCLevel_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu tonerCLevel_KONICA: " & ex.Message)
                End Try

                If printerInfo.tonerLevelBk >= 0 AndAlso objSNMP.Get(tonerBkMax_KONICA) > 0 Then
                    printerInfo.tonerBkPercent = Math.Round(printerInfo.tonerLevelBk * 100 / objSNMP.Get(tonerBkMax_KONICA))
                Else
                    printerInfo.tonerBkPercent = "?"
                End If

                If printerInfo.tonerLevelY >= 0 AndAlso objSNMP.Get(tonerYMax_KONICA) > 0 Then
                    printerInfo.tonerYPercent = Math.Round(printerInfo.tonerLevelY * 100 / objSNMP.Get(tonerYMax_KONICA))
                Else
                    printerInfo.tonerYPercent = "?"
                End If

                If printerInfo.tonerLevelM >= 0 AndAlso objSNMP.Get(tonerMMax_KONICA) > 0 Then
                    printerInfo.tonerMPercent = Math.Round(printerInfo.tonerLevelM * 100 / objSNMP.Get(tonerMMax_KONICA))
                Else
                    printerInfo.tonerMPercent = "?"
                End If

                If printerInfo.tonerLevelC >= 0 AndAlso objSNMP.Get(tonerCMax_KONICA) > 0 Then
                    printerInfo.tonerCPercent = Math.Round(printerInfo.tonerLevelC * 100 / objSNMP.Get(tonerCMax_KONICA))
                Else
                    printerInfo.tonerCPercent = "?"
                End If

                ' LICZNIKI KONICA MINOLTA KOLOR
                Try
                    printerInfo.counterTotal = objSNMP.Get(counter_Total_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Total_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterMonoPrt = objSNMP.Get(counter_Mono_Prt_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Mono_Prt_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterKolorPrt = objSNMP.Get(counter_Kolor_Prt_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Kolor_Prt_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterMonoCopy = objSNMP.Get(counter_Mono_Copy_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Mono_Copy_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterKolorCopy = objSNMP.Get(counter_Kolor_Copy_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Kolor_Copy_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterMonoPrtFax = objSNMP.Get(counter_Mono_Prt_Fax_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Mono_Prt_Fax_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterTotalScan = objSNMP.Get(counter_Scan_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Scan_KONICA: " & ex.Message)
                End Try

                ' ############################# KONICA MINOLTA KOLOR ##################################################
            ElseIf Not String.IsNullOrEmpty(urzadzenie) AndAlso urzadzenie.Contains("KONICA MINOLTA bizhub C") Then
                printerInfo.IsColorPrinter = True
                printerInfo.IsAdvancedPrinter = True

                printerInfo.MarkaModel = urzadzenie

                Try
                    printerInfo.Hostname = objSNMP.Get(hostname_KONICA)
                Catch ex As Exception
                    printerInfo.Hostname = String.Empty
                    'Logger.Log("Błąd przy pobieraniu hostname_KONICA: " & ex.Message)
                End Try

                ' TONERY KONICA MINOLTA KOLOR
                Try
                    printerInfo.tonerLevelBk = objSNMP.Get(tonerBkLevel_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu tonerBkLevel_KONICA: " & ex.Message)
                End Try

                Try
                    printerInfo.tonerLevelY = objSNMP.Get(tonerYLevel_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu tonerYLevel_KONICA: " & ex.Message)
                End Try

                Try
                    printerInfo.tonerLevelM = objSNMP.Get(tonerMLevel_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu tonerMLevel_KONICA: " & ex.Message)
                End Try

                Try
                    printerInfo.tonerLevelC = objSNMP.Get(tonerCLevel_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu tonerCLevel_KONICA: " & ex.Message)
                End Try

                If printerInfo.tonerLevelBk >= 0 AndAlso objSNMP.Get(tonerBkMax_KONICA) > 0 Then
                    printerInfo.tonerBkPercent = Math.Round(printerInfo.tonerLevelBk * 100 / objSNMP.Get(tonerBkMax_KONICA))
                Else
                    printerInfo.tonerBkPercent = "?"
                End If

                If printerInfo.tonerLevelY >= 0 AndAlso objSNMP.Get(tonerYMax_KONICA) > 0 Then
                    printerInfo.tonerYPercent = Math.Round(printerInfo.tonerLevelY * 100 / objSNMP.Get(tonerYMax_KONICA))
                Else
                    printerInfo.tonerYPercent = "?"
                End If

                If printerInfo.tonerLevelM >= 0 AndAlso objSNMP.Get(tonerMMax_KONICA) > 0 Then
                    printerInfo.tonerMPercent = Math.Round(printerInfo.tonerLevelM * 100 / objSNMP.Get(tonerMMax_KONICA))
                Else
                    printerInfo.tonerMPercent = "?"
                End If

                If printerInfo.tonerLevelC >= 0 AndAlso objSNMP.Get(tonerCMax_KONICA) > 0 Then
                    printerInfo.tonerCPercent = Math.Round(printerInfo.tonerLevelC * 100 / objSNMP.Get(tonerCMax_KONICA))
                Else
                    printerInfo.tonerCPercent = "?"
                End If

                ' LICZNIKI KONICA MINOLTA KOLOR
                Try
                    printerInfo.counterTotal = objSNMP.Get(counter_Total_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Total_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterMonoPrt = objSNMP.Get(counter_Mono_Prt_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Mono_Prt_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterKolorPrt = objSNMP.Get(counter_Kolor_Prt_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Kolor_Prt_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterTwoKolorPrt = objSNMP.Get(counter_Two_Kolor_Prt_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Two_Kolor_Prt_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterMonoCopy = objSNMP.Get(counter_Mono_Copy_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Mono_Copy_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterKolorCopy = objSNMP.Get(counter_Kolor_Copy_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Kolor_Copy_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterTwoKolorCopy = objSNMP.Get(counter_Two_Kolor_Copy_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Two_Kolor_Copy_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterSingleKolorCopy = objSNMP.Get(counter_Single_Kolor_Copy_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Single_Kolor_Copy_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterMonoPrtScan = objSNMP.Get(counter_Mono_Prt_Scan_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Mono_Prt_Scan_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterKolorPrtScan = objSNMP.Get(counter_Kolor_Prt_Scan_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Kolor_Prt_Scan_KONICA: " & ex.Message)
                End Try
                Try
                    printerInfo.counterTotalScan = objSNMP.Get(counter_Scan_KONICA)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Scan_KONICA: " & ex.Message)
                End Try


                ' ########################################## KONICA MINOLTA MONO ##################################
            ElseIf Not String.IsNullOrEmpty(urzadzenie) AndAlso urzadzenie.Contains("KONICA MINOLTA bizhub ") Then

                printerInfo.IsColorPrinter = False

                Try
                    printerInfo.Hostname = objSNMP.Get(hostname_KONICA_mono)
                Catch ex As Exception
                    printerInfo.Hostname = String.Empty
                    'Logger.Log("Błąd przy pobieraniu hostname_KONICA: " & ex.Message)
                End Try

                printerInfo.MarkaModel = urzadzenie

                ' TONERY KONICA MINOLTA MONO
                Try
                    printerInfo.tonerLevelBk = objSNMP.Get(tonerBkLevel_KONICA_mono)
                Catch ex As Exception

                    'Logger.Log("Błąd przy pobieraniu tonerBkLevel_KONICA_mono: " & ex.Message)
                End Try
                If printerInfo.tonerLevelBk >= 0 AndAlso objSNMP.Get(tonerBkMax_KONICA_mono) > 0 Then
                    printerInfo.tonerBkPercent = Math.Round(printerInfo.tonerLevelBk * 100 / objSNMP.Get(tonerBkMax_KONICA_mono))
                Else
                    printerInfo.tonerBkPercent = "?"
                End If

                ' LICZNIKI KONICA MINOLTA MONO
                Try
                    printerInfo.counterTotal = objSNMP.Get(counter_Total_KONICA_mono_2)
                    printerInfo.counterMonoPrt = printerInfo.counterTotal
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Total_KONICA_mono: " & ex.Message)
                End Try
                Try
                    printerInfo.counterTotalScan = objSNMP.Get(counter_Scan_KONICA_mono)
                Catch ex As Exception
                    'Logger.Log("Błąd przy pobieraniu counter_Scan_KONICA_mono: " & ex.Message)
                End Try
            End If


            ' IP adress na podstawie DNS
            If Not String.IsNullOrEmpty(printerInfo.Hostname) Then
                Try
                    Dim addresses As System.Net.IPAddress() = Dns.GetHostEntry(printerInfo.Hostname).AddressList
                    For Each addr As System.Net.IPAddress In addresses
                        If addr.AddressFamily = Sockets.AddressFamily.InterNetwork Then
                            printerInfo.IPAddressDns = addr.ToString()
                            Exit For
                        End If
                    Next
                Catch ex As Exception
                    printerInfo.IPAddressDns = String.Empty
                    'Logger.Log("Błąd przy pobieraniu adresów DNS: " & ex.Message)
                End Try
            End If

            Try
                Dim rawValue As Byte() = objSNMP.Get(r)
                printerInfo.MAC = ByteArrayToMacAddress(rawValue)
            Catch ex As Exception

            End Try


            Dim currentDateTime As String = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")
            ' Logger.Log("====== Printer Info (" & currentDateTime & ") ========================================================")
            ' Logger.Log("Manufacture: " & printerInfo.Manufacture)
            ' Logger.Log("Hostname: " & printerInfo.Hostname)
            ' Logger.Log("MarkaModel: " & printerInfo.MarkaModel)
            ' Logger.Log("SerialNumber: " & printerInfo.SerialNumber)
            ' Logger.Log("MAC: " & printerInfo.MAC)
            ' Logger.Log("IPAddress: " & printerInfo.IPAddress)
            ' Logger.Log("IPAddressDns: " & printerInfo.IPAddressDns)
            ' Logger.Log("tonerLevelBk: " & printerInfo.tonerLevelBk)
            ' Logger.Log("tonerLevelY: " & printerInfo.tonerLevelY)
            ' Logger.Log("tonerLevelM: " & printerInfo.tonerLevelM)
            ' Logger.Log("tonerLevelC: " & printerInfo.tonerLevelC)
            ' Logger.Log("tonerBkPercent: " & printerInfo.tonerBkPercent)
            ' Logger.Log("tonerYPercent: " & printerInfo.tonerYPercent)
            ' Logger.Log("tonerMPercent: " & printerInfo.tonerMPercent)
            ' Logger.Log("tonerCPercent: " & printerInfo.tonerCPercent)
            ' Logger.Log("counterTotal: " & printerInfo.counterTotal)
            ' Logger.Log("counterMonoPrt: " & printerInfo.counterMonoPrt)
            ' Logger.Log("counterKolorPrt: " & printerInfo.counterKolorPrt)
            ' Logger.Log("counterTwoKolorPrt: " & printerInfo.counterTwoKolorPrt)
            ' Logger.Log("counterMonoCopy: " & printerInfo.counterMonoCopy)
            ' Logger.Log("counterKolorCopy: " & printerInfo.counterKolorCopy)
            ' Logger.Log("counterTwoKolorCopy: " & printerInfo.counterTwoKolorCopy)
            ' Logger.Log("counterSingleKolorCopy: " & printerInfo.counterSingleKolorCopy)
            ' Logger.Log("counterMonoPrtScan: " & printerInfo.counterMonoPrtScan)
            ' Logger.Log("counterKolorPrtScan: " & printerInfo.counterKolorPrtScan)
            ' Logger.Log("counterMonoPrtFax: " & printerInfo.counterMonoPrtFax)
            ' Logger.Log("counterKolorPrtFax: " & printerInfo.counterKolorPrtFax)
            ' Logger.Log("counterTotalScan: " & printerInfo.counterTotalScan)
            ' Logger.Log("counterAdfScan: " & printerInfo.counterAdfScan)
            ' Logger.Log("counterAdf1SidesScan: " & printerInfo.counterAdf1SidesScan)
            ' Logger.Log("counterAdf2SidesScan: " & printerInfo.counterAdf2SidesScan)
            ' Logger.Log("counterGlassScan: " & printerInfo.counterGlassScan)
            ' Logger.Log("IsColorPrinter: " & printerInfo.IsColorPrinter)
            ' Logger.Log("IsAdvancedPrinter: " & printerInfo.IsAdvancedPrinter)
            ' Logger.Log("=====================================================================================================")
            Return printerInfo
        Catch ex As Exception
            'Logowanie błędu(opcjonalnie)
            Logger.Log("Błąd w GetPrinterInfo: " & printerIP & ex.Message & vbCrLf & ex.StackTrace)
            Return Nothing
        Finally
            ' Zamknij sesję SNMP, aby upewnić się, że zasoby są zwolnione
            If objSNMP IsNot Nothing Then
                Try
                    objSNMP.Close()
                Catch exClose As Exception
                    Logger.Log("Błąd podczas zamykania sesji SNMP: " & exClose.Message)
                End Try
            End If
        End Try


    End Function

    '  METODA AKTUALIZUJĄCA DANE W TABELI DLA JEDNEGO URZĄDZENIA
    Private Async Function UpdateDataSinglePrinter(adresIp As String, Optional serial As String = "", Optional hostname As String = "", Optional miejscePostoju As String = "", Optional dodatkoweInfo As String = "") As Task

        disaableBottomInfo = True

        Dim row As DataRow = dataTable.AsEnumerable().FirstOrDefault(Function(rowp) rowp.Field(Of String)("Nr seryjny") = serial)
        Dim tasks As New List(Of Task)()

        tasks.Add(Task.Run(Async Function()
                               If (row IsNot Nothing AndAlso row.RowState <> DataRowState.Deleted AndAlso row.RowState <> DataRowState.Detached) Then

                                   Dim printerInfoIP As PrinterInfo = Await GetPrinterInfoAsync(adresIp)
                                   Dim printerInfoHostname As PrinterInfo = Await GetPrinterInfoAsync(hostname)
                                   If printerInfoIP IsNot Nothing OrElse printerInfoHostname IsNot Nothing Then

                                       ' Priorytetyzujemy dane z printerInfoIP, ale jeśli printerInfoIP jest Nothing, korzystamy z printerInfoHostname
                                       Dim selectedPrinterInfo As PrinterInfo = If(printerInfoIP IsNot Nothing, printerInfoIP, printerInfoHostname)
                                       Dim adresCzyDns As Boolean = If(printerInfoIP IsNot Nothing, True, False)
                                       Dim jestSerial As Boolean = False

                                       If File.Exists(filePath) Then

                                           Dim jsonString As String = File.ReadAllText(filePath)
                                           Dim readJsonWartosc As List(Of Dane) = JsonConvert.DeserializeObject(Of List(Of Dane))(jsonString)
                                           Dim existingSerial As Dane = readJsonWartosc.FirstOrDefault(Function(d) d.SerialNumber = serial)

                                           ' Sprawdzamy, czy numer seryjny się zgadza
                                           If existingSerial IsNot Nothing Then
                                               If selectedPrinterInfo.SerialNumber = existingSerial.SerialNumber Then
                                                   jestSerial = True
                                               End If
                                           End If

                                       Else
                                           jestSerial = False
                                       End If

                                       If jestSerial = True Then
                                           Try
                                               row("Status") = zielonaKropka

                                               'ODCZYT USTAWIEŃ PROGRMU
                                               If settings.sposobOdczytuAuto Then
                                                   If adresCzyDns = True Then
                                                       row("adres") = selectedPrinterInfo.IPAddress
                                                   Else
                                                       row("adres") = selectedPrinterInfo.IPAddressDns
                                                   End If
                                                   row("Nazwa hosta") = selectedPrinterInfo.Hostname
                                                   row("Nr seryjny") = selectedPrinterInfo.SerialNumber
                                               ElseIf settings.sposobOdczytuManual Then
                                                   row("adres") = adresIp
                                                   row("Nazwa hosta") = hostname
                                                   row("Nr seryjny") = serial
                                               End If

                                               row("Urządzenie") = selectedPrinterInfo.MarkaModel
                                               row("MAC") = selectedPrinterInfo.MAC
                                               row("Miejsce Postoju") = miejscePostoju
                                               row("Dodatkowe informacje") = dodatkoweInfo

                                               If Not selectedPrinterInfo.IsColorPrinter Then
                                                   row("Toner Y") = ""
                                                   row("Toner M") = ""
                                                   row("Toner C") = ""
                                               End If

                                               ' Wątki dla aktualizacji tonerów i liczników
                                               'Dim tonerTask = Task.Run(Sub() UpdateTonerLevels(row, selectedPrinterInfo))
                                               ' Dim counterTask = Task.Run(Sub() UpdatePrinterCounters(row, selectedPrinterInfo))

                                               'Await Task.WhenAll(tonerTask, counterTask)

                                           Catch ex As Exception
                                               Logger.Log("Błąd podczas przetwarzania informacji o drukarce: " & selectedPrinterInfo.SerialNumber & " " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
                                           End Try
                                       Else

                                           row("Status") = czerwonaKropka
                                           row("Nazwa hosta") = hostname
                                           row("Miejsce Postoju") = miejscePostoju
                                           row("Dodatkowe informacje") = dodatkoweInfo
                                           row("Licznik M") = ""
                                           row("Licznik K") = ""
                                           row("Toner BK") = ""
                                           row("Toner Y") = ""
                                           row("Toner M") = ""
                                           row("Toner C") = ""
                                       End If
                                   Else
                                       row("Status") = czerwonaKropka
                                       row("adres") = adresIp
                                       row("Nazwa hosta") = hostname
                                       row("Miejsce Postoju") = miejscePostoju
                                       row("Dodatkowe informacje") = dodatkoweInfo
                                       row("Licznik M") = ""
                                       row("Licznik K") = ""
                                       row("Toner BK") = ""
                                       row("Toner Y") = ""
                                       row("Toner M") = ""
                                       row("Toner C") = ""
                                   End If

                               End If
                           End Function))
        UpdatePanels()


        ' Przypisanie danych do DataGridView
        DataGridView1.DataSource = dataTable

        FormatTableHeaders()

        ' Pokazanie nagłówków kolumn bo w Form są ukrywane jeśli tabela nie posiada wpisów
        DataGridView1.ColumnHeadersVisible = True

        ' UKRYTE KOLUMNY
        If settings.kolumnaNazwaHostaON Then
            DataGridView1.Columns("Nazwa hosta").Visible = True
        Else
            DataGridView1.Columns("Nazwa hosta").Visible = False
        End If

        If settings.kolumnaDodatkoweInfoON Then
            DataGridView1.Columns("Dodatkowe informacje").Visible = True
        Else
            DataGridView1.Columns("Dodatkowe informacje").Visible = False
        End If

        If settings.kolumnaMacON Then
            DataGridView1.Columns("MAC").Visible = True
        Else
            DataGridView1.Columns("MAC").Visible = False
        End If

        If settings.kolumnaLicznikMonoON Then
            DataGridView1.Columns("Licznik M").Visible = True
        Else
            DataGridView1.Columns("Licznik M").Visible = False
        End If

        If settings.kolumnaLicznikKolorON Then
            DataGridView1.Columns("Licznik K").Visible = True
        Else
            DataGridView1.Columns("Licznik K").Visible = False
        End If

        If settings.kolumnaTonerBkON Then
            DataGridView1.Columns("Toner BK").Visible = True
        Else
            DataGridView1.Columns("Toner BK").Visible = False
        End If

        If settings.kolumnaTonerYON Then
            DataGridView1.Columns("Toner Y").Visible = True
        Else
            DataGridView1.Columns("Toner Y").Visible = False
        End If

        If settings.kolumnaTonerMON Then
            DataGridView1.Columns("Toner M").Visible = True
        Else
            DataGridView1.Columns("Toner M").Visible = False
        End If

        If settings.kolumnaTonerCON Then
            DataGridView1.Columns("Toner C").Visible = True
        Else
            DataGridView1.Columns("Toner C").Visible = False
        End If

        ' Wyłączenie sortowania dla kolumn
        DataGridView1.Columns("MAC").SortMode = DataGridViewColumnSortMode.NotSortable
        DataGridView1.Columns("Licznik M").SortMode = DataGridViewColumnSortMode.NotSortable
        DataGridView1.Columns("Licznik K").SortMode = DataGridViewColumnSortMode.NotSortable
        DataGridView1.Columns("Toner BK").SortMode = DataGridViewColumnSortMode.NotSortable
        DataGridView1.Columns("Toner Y").SortMode = DataGridViewColumnSortMode.NotSortable
        DataGridView1.Columns("Toner M").SortMode = DataGridViewColumnSortMode.NotSortable
        DataGridView1.Columns("Toner C").SortMode = DataGridViewColumnSortMode.NotSortable

        ' SORTOWANIE PO WYSZUKIWANIU
        originalDataSource = CType(DataGridView1.DataSource, DataTable)
        filteredData = originalDataSource.Clone()
        Me.btnRefresh.Enabled = True
        Me.btnTransfer.Enabled = True
        Me.btnDodaj.Enabled = True
        Me.btnSzukaj.Enabled = True
        Me.btnUstawienia.Enabled = True
        Me.btnTools.Enabled = True
        Me.btnHelp.Enabled = True
        Me.TextBoxSzukajUrzadzenia.Enabled = True
        Me.DataGridView1.Enabled = True
        ProgressBar1.Value = ProgressBar1.Maximum
        Await Task.Delay(3000)
        ProgressBar1.Visible = False
        progressLabel.Visible = False
    End Function


    ' Funkcja asynchronicznego odczytu pliku deviceList.json
    Private Async Function LoadDeviceList() As Task(Of List(Of Dane))
        Dim deviceListJson As String

        ' Synchronizacja dostępu do pliku tylko do momentu zakończenia odczytu
        SyncLock fileLock
            If File.Exists(filePath) Then
                deviceListJson = File.ReadAllText(filePath)
            Else
                Logger.Log("Plik deviceList.json nie został znaleziony.")
                Return Nothing
            End If
        End SyncLock

        ' Deserializacja JSON poza blokiem SyncLock
        Return JsonConvert.DeserializeObject(Of List(Of Dane))(deviceListJson)
    End Function


    ' Funkcja asynchronicznego zapisu do deviceList.json
    Private Async Function SaveDeviceList(deviceList As List(Of Dane)) As Task
        Dim json As String = JsonConvert.SerializeObject(deviceList, Formatting.Indented)

        ' Synchronizacja dostępu do pliku
        SyncLock fileLock
            File.WriteAllText(filePath, json)
        End SyncLock
    End Function

    ' Funkcja asynchronicznego odczytu pliku exportData.json
    Private Async Function LoadExportData() As Task(Of List(Of DaneToDatabase))
        Dim deviceListJson As String

        ' Synchronizacja dostępu do pliku tylko do momentu zakończenia odczytu
        SyncLock fileLock
            If File.Exists(filePathExportData) Then
                deviceListJson = File.ReadAllText(filePathExportData)
            Else
                Logger.Log("Plik exportData.json nie został znaleziony.")
                Return Nothing
            End If
        End SyncLock

        ' Deserializacja JSON poza blokiem SyncLock
        Return JsonConvert.DeserializeObject(Of List(Of DaneToDatabase))(deviceListJson)
    End Function


    ' Funkcja asynchronicznego zapisu do exportData.json
    Private Async Function SaveExportData(deviceList As List(Of DaneToDatabase)) As Task
        Dim json As String = JsonConvert.SerializeObject(deviceList, Formatting.Indented)

        ' Synchronizacja dostępu do pliku
        SyncLock fileLock
            File.WriteAllText(filePathExportData, json)
        End SyncLock
    End Function


    ' FUNKCJA AKTUALIZUJĄCA DANE W TABELI DLA WSZYSTKICH URZĄDZEŃ

    Private Sub DataGridView1_DataError(sender As Object, e As DataGridViewDataErrorEventArgs) Handles DataGridView1.DataError
        ' Obsłuż błąd, aby uniknąć domyślnego okna dialogowego
        Logger.Log($"Błąd w DataGridView: {e.Exception.Message}")
        e.ThrowException = False
    End Sub


    Private Async Function UpdateDataInTable() As Task
        Try
            Logger.Log("Odczyt danych urządzeń - Funkcja UpdateDataInTable START")
            disaableBottomInfo = False

            ' Wyłączenie elementów interfejsu i ustawienia początkowe
            DisableUI()
            ProgressBar1.Visible = True
            progressLabel.Visible = True

            ' 1. Załadowanie początkowych danych z deviceList.json do tabeli
            Await LoadDataIntoTable()

            ' 2. Rozpoczęcie aktualizacji plików urządzeń
            Dim deviceList As List(Of Dane) = Await LoadDeviceList()
            If deviceList Is Nothing Then
                Logger.Log("Brak urządzeń do przetworzenia.")
                Return
            End If

            Dim exportDataList As List(Of DaneToDatabase) = Await LoadExportData()
            Dim tasksExportData As New List(Of Task)
            Dim tasksDeviceList As New List(Of Task)
            Dim successfulExportUpdates As Integer = 0
            Dim successfulDeviceListUpdates As Integer = 0
            Dim processed As Integer = 0
            Dim taskCount As Integer = deviceList.Count * 2 ' Dwa zadania dla każdego urządzenia


            ' Przetwarzanie urządzeń i aktualizacja obu list w pamięci
            For Each device As Dane In deviceList
                ' Dodanie zadania dla aktualizacji exportDataList
                tasksExportData.Add(Task.Run(Async Function()
                                                 Await GetDaneFromPrinterInfoToExportData(device, exportDataList)
                                                 Interlocked.Increment(processed)
                                                 UpdateProgress(processed, taskCount)
                                             End Function))

                ' Dodanie zadania dla aktualizacji deviceList
                tasksDeviceList.Add(Task.Run(Async Function()
                                                 Await GetDaneFromPrinterInfoToDeviceList(device, deviceList)
                                                 Interlocked.Increment(processed)
                                                 UpdateProgress(processed, taskCount)
                                             End Function))
            Next

            ' Oczekiwanie na zakończenie wszystkich zadań
            Await Task.WhenAll(tasksExportData)
            Await Task.WhenAll(tasksDeviceList)

            ' 3. Zapis zaktualizowanej listy exportData do pliku exportData.json
            Await SaveExportData(exportDataList)

            ' 4. Zapis zaktualizowanej listy deviceList do pliku deviceList.json
            Await SaveDeviceList(deviceList)

            Await UpdateTableWithNewData()

            ' Włączenie elementów interfejsu po zakończeniu aktualizacji
            EnableUI()

            SaveOrUpdateJsonDataToPostgreSQL(filePath)

            Logger.Log("Odczyt danych urządzeń - Funkcja UpdateDataInTable STOP")
        Catch ex As Exception
            Logger.Log("Błąd w UpdateDataInTable: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try
    End Function

    Private Async Function LoadDataIntoTable() As Task
        If File.Exists(filePath) Then
            Dim json As String = File.ReadAllText(filePath)
            Dim jArray As JArray = JArray.Parse(json)

            dataTable = New DataTable()
            Dim columnNumbers As Integer() = {0, 1, 2, 3, 4, 5, 6} ' Numer kolumny, które chcesz pobrać
            Dim columnNames As String() = {"Adres", "Nazwa hosta", "Urządzenie", "Nr seryjny", "MAC", "Miejsce postoju", "Dodatkowe informacje"} ' Nowe nazwy kolumn

            ' Dodawanie kolumn do tabeli na podstawie nowych nazw
            For Each columnName As String In columnNames
                dataTable.Columns.Add(columnName)
            Next

            dataTable.Columns.Add("Status", GetType(String))
            dataTable.Columns.Add("Licznik M", GetType(String))
            dataTable.Columns.Add("Licznik K", GetType(String))
            dataTable.Columns.Add("Toner BK", GetType(String))
            dataTable.Columns.Add("Toner Y", GetType(String))
            dataTable.Columns.Add("Toner M", GetType(String))
            dataTable.Columns.Add("Toner C", GetType(String))


            For Each jObject As JObject In jArray
                Dim row As DataRow = dataTable.NewRow()

                For i As Integer = 0 To columnNumbers.Length - 1
                    Dim columnNumber As Integer = columnNumbers(i)
                    ' Sprawdzanie, czy numer kolumny jest prawidłowy
                    If columnNumber >= 0 AndAlso columnNumber < jObject.Properties().Count() Then
                        Dim item As JProperty = jObject.Properties().ElementAt(columnNumber)
                        row(columnNames(i)) = item.Value
                    End If
                Next

                dataTable.Rows.Add(row)
            Next

            ' Przypisanie danych do DataGridView
            DataGridView1.DataSource = dataTable

            ' Sprawdzenie, czy DataGridView jest pusty i ustawienie widoczności nagłówków
            DataGridView1.ColumnHeadersVisible = DataGridView1.Rows.Count > 0

            ' Styl nagłówków tabeli
            FormatTableHeaders()

            If settings.kolumnaNazwaHostaON Then
                DataGridView1.Columns("Nazwa hosta").Visible = True
            Else
                DataGridView1.Columns("Nazwa hosta").Visible = False
            End If

            If settings.kolumnaDodatkoweInfoON Then
                DataGridView1.Columns("Dodatkowe informacje").Visible = True
            Else
                DataGridView1.Columns("Dodatkowe informacje").Visible = False
            End If

            If settings.kolumnaMacON Then
                DataGridView1.Columns("MAC").Visible = True
            Else
                DataGridView1.Columns("MAC").Visible = False
            End If

            If settings.kolumnaLicznikMonoON Then
                DataGridView1.Columns("Licznik M").Visible = True
            Else
                DataGridView1.Columns("Licznik M").Visible = False
            End If

            If settings.kolumnaLicznikKolorON Then
                DataGridView1.Columns("Licznik K").Visible = True
            Else
                DataGridView1.Columns("Licznik K").Visible = False
            End If

            If settings.kolumnaTonerBkON Then
                DataGridView1.Columns("Toner BK").Visible = True
            Else
                DataGridView1.Columns("Toner BK").Visible = False
            End If

            If settings.kolumnaTonerYON Then
                DataGridView1.Columns("Toner Y").Visible = True
            Else
                DataGridView1.Columns("Toner Y").Visible = False
            End If

            If settings.kolumnaTonerMON Then
                DataGridView1.Columns("Toner M").Visible = True
            Else
                DataGridView1.Columns("Toner M").Visible = False
            End If

            If settings.kolumnaTonerCON Then
                DataGridView1.Columns("Toner C").Visible = True
            Else
                DataGridView1.Columns("Toner C").Visible = False
            End If


            ' Wyłączenie sortowania dla kolumn
            Dim nonSortableColumns As String() = {"MAC", "Licznik M", "Licznik K", "Toner BK", "Toner Y", "Toner M", "Toner C"}
            For Each colName In nonSortableColumns
                If DataGridView1.Columns.Contains(colName) Then
                    DataGridView1.Columns(colName).SortMode = DataGridViewColumnSortMode.NotSortable
                End If
            Next

            originalDataSource = CType(DataGridView1.DataSource, DataTable)
            filteredData = originalDataSource.Clone()

            ' Ustalenie kierunku sortowania na podstawie ustawień
            Dim columnNameSort As String = ""
            Dim sortDirection As System.ComponentModel.ListSortDirection = System.ComponentModel.ListSortDirection.Ascending

            If settings.kolumnaSortAdresAscON Then
                columnNameSort = "Adres"
                sortDirection = System.ComponentModel.ListSortDirection.Ascending
            ElseIf settings.kolumnaSortAdresDescON Then
                columnNameSort = "Adres"
                sortDirection = System.ComponentModel.ListSortDirection.Descending
            ElseIf settings.kolumnaSortNazwaHostaAscON Then
                columnNameSort = "Nazwa hosta"
                sortDirection = System.ComponentModel.ListSortDirection.Ascending
            ElseIf settings.kolumnaSortNazwaHostaDescON Then
                columnNameSort = "Nazwa hosta"
                sortDirection = System.ComponentModel.ListSortDirection.Descending
            ElseIf settings.kolumnaSortUrzadzenieAscON Then
                columnNameSort = "Urządzenie"
                sortDirection = System.ComponentModel.ListSortDirection.Ascending
            ElseIf settings.kolumnaSortUrzadzenieDescON Then
                columnNameSort = "Urządzenie"
                sortDirection = System.ComponentModel.ListSortDirection.Descending
            ElseIf settings.kolumnaSortSerialAscON Then
                columnNameSort = "Nr seryjny"
                sortDirection = System.ComponentModel.ListSortDirection.Ascending
            ElseIf settings.kolumnaSortSerialDescON Then
                columnNameSort = "Nr seryjny"
                sortDirection = System.ComponentModel.ListSortDirection.Descending
            ElseIf settings.kolumnaSortMiejscePostojuAscON Then
                columnNameSort = "Miejsce postoju"
                sortDirection = System.ComponentModel.ListSortDirection.Ascending
            ElseIf settings.kolumnaSortMiejscePostojuDescON Then
                columnNameSort = "Miejsce postoju"
                sortDirection = System.ComponentModel.ListSortDirection.Descending
            ElseIf settings.kolumnaSortDodatkoweInfoAscON Then
                columnNameSort = "Dodatkowe informacje"
                sortDirection = System.ComponentModel.ListSortDirection.Ascending
            ElseIf settings.kolumnaSortDodatkoweInfoDescON Then
                columnNameSort = "Dodatkowe informacje"
                sortDirection = System.ComponentModel.ListSortDirection.Descending
            End If

            ' Wykonanie sortowania po załadowaniu danych
            If DataGridView1.Columns.Contains(columnNameSort) Then
                DataGridView1.Sort(DataGridView1.Columns(columnNameSort), sortDirection)
            End If

            ' Jeśli jest pusta tabela
            If DataGridView1.Rows.Count = 0 Then
                ' CZCIONKI DLA NAGŁÓWKÓW KOLUMN
                DataGridView1.ColumnHeadersHeight = 30
                DataGridView1.ColumnHeadersDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter
                DataGridView1.ColumnHeadersDefaultCellStyle.Font = New System.Drawing.Font("Calibri", 12, System.Drawing.FontStyle.Bold)
            End If

        End If
    End Function

    'FUNKCJA AKTUALIZUJĄCA WPISY W TABELI PO WSZYSTKICH ZAPISACH DO PLIKÓW
    Private Async Function UpdateTableWithNewData() As Task
        Try
            Logger.Log("Rozpoczęcie aktualizacji tabeli z urządzeniami.")

            ' Wczytaj dane z pliku JSON w sposób synchroniczny
            Dim jsonString As String = File.ReadAllText(filePath)
            Dim jArray As JArray = JArray.Parse(jsonString)

            ' Wczytaj listę urządzeń z deviceList.json
            Dim deviceList As List(Of Dane) = Await LoadDeviceList()

            ' Wczytaj listę urządzeń z exportData.json
            Dim odczytList As List(Of DaneToDatabase) = Await LoadExportData()

            LabelOnline.Visible = True
            LabelOffline.Visible = True
            LabelOnlineNapis.Visible = True
            LabelOfflineNapis.Visible = True
            LabelOnlineText.Visible = True
            LabelOfflineText.Visible = True

            statusCountOnline = 0
            statusCountOffline = 0

            ' Resetowanie tabeli
            dataTable.Clear()

            ' Przypisz dane z pliku do tabeli
            For Each jObject As JObject In jArray
                Dim serialNumber As String = jObject("SerialNumber")?.ToString()

                ' Sprawdzenie, czy istnieje urządzenie w deviceList
                Dim existingDevice As Dane = deviceList.FirstOrDefault(Function(d) d.SerialNumber = serialNumber)
                Dim existingOdczyt As DaneToDatabase = odczytList.FirstOrDefault(Function(d) d.SerialNumber = serialNumber)

                If existingDevice IsNot Nothing Then
                    ' Zaktualizuj wartości w DataTable na podstawie danych z pliku
                    Dim row As DataRow = dataTable.NewRow()
                    row("Adres") = existingDevice.AdresIp
                    row("Nazwa hosta") = existingDevice.Hostname
                    row("Urządzenie") = existingDevice.Urzadzenie
                    row("Nr seryjny") = existingDevice.SerialNumber
                    row("MAC") = existingDevice.Mac
                    row("Miejsce postoju") = existingDevice.MiejscePostoju
                    row("Dodatkowe informacje") = existingDevice.DodatkoweInfo

                    If existingOdczyt IsNot Nothing Then
                        If existingOdczyt.Status = True Then
                            row("Status") = zielonaKropka
                            row("Licznik M") = existingOdczyt.LicznikM
                            row("Licznik K") = existingOdczyt.LicznikK
                            row("Toner BK") = existingOdczyt.PercentTonerBk
                            row("Toner Y") = existingOdczyt.PercentTonerY
                            row("Toner M") = existingOdczyt.PercentTonerM
                            row("Toner C") = existingOdczyt.PercentTonerC

                            statusCountOnline += 1
                        Else
                            row("Status") = czerwonaKropka
                            row("Licznik M") = ""
                            row("Licznik K") = ""
                            row("Toner BK") = ""
                            row("Toner Y") = ""
                            row("Toner M") = ""
                            row("Toner C") = ""

                            statusCountOffline += 1
                        End If
                    End If
                    ' Dodaj wiersz do DataTable
                    dataTable.Rows.Add(row)
                Else
                    Logger.Log($"Nie znaleziono urządzenia z nr seryjnym: {serialNumber}")
                End If
            Next

            LabelOnlineText.Text = statusCountOnline.ToString()
            LabelOfflineText.Text = statusCountOffline.ToString()

            ' Przypisz DataTable do DataGridView
            DataGridView1.DataSource = dataTable
            DataGridView1.Refresh()

            Logger.Log("Aktualizacja tabeli z urządzeniami zakończona.")
        Catch ex As Exception
            Logger.Log("Błąd podczas aktualizacji tabeli z urządzeniami: " & ex.Message)
        End Try
    End Function

    Private Sub UpdateProgress(ByVal processed As Integer, ByVal taskCount As Integer)
        Dim progressValue As Integer = CInt((processed / taskCount) * 100)
        ProgressBar1.Invoke(Sub()
                                ProgressBar1.Value = progressValue
                                progressLabel.Text = $"{progressValue}%"
                            End Sub)
    End Sub

    Private Sub EnableUI()
        Me.btnRefresh.Enabled = True
        Me.btnTransfer.Enabled = True
        Me.btnDodaj.Enabled = True
        Me.btnSzukaj.Enabled = True
        Me.btnUstawienia.Enabled = True
        Me.btnTools.Enabled = True
        Me.btnHelp.Enabled = True
        Me.TextBoxSzukajUrzadzenia.Enabled = True
        Me.DataGridView1.Enabled = True
        ProgressBar1.Visible = False
        progressLabel.Visible = False
        ProgressBar1.Value = 0
    End Sub

    Private Sub DisableUI()
        Me.btnRefresh.Enabled = False
        Me.btnTransfer.Enabled = False
        Me.btnDodaj.Enabled = False
        Me.btnSzukaj.Enabled = False
        Me.btnUstawienia.Enabled = False
        Me.btnTools.Enabled = False
        Me.btnHelp.Enabled = False
        Me.TextBoxSzukajUrzadzenia.Enabled = False
        Me.DataGridView1.Enabled = False
        Me.TextBoxSzukajUrzadzenia.Text = ""
    End Sub

    'FUNKCJA AKTUALIZUJĄCA WPISY W PLIKU Z DANYMI URZĄDZEŃ
    Private Async Function GetDaneFromPrinterInfoToDeviceList(device As Dane, deviceList As List(Of Dane)) As Task
        Try
            Dim updated As Boolean = False

            ' Pobierz informacje o drukarce dla zadanego urządzenia
            Dim printerInfoIP As PrinterInfo = Await GetPrinterInfoAsync(device.AdresIp)
            Dim printerInfoHostname As PrinterInfo = Await GetPrinterInfoAsync(device.Hostname)

            If printerInfoIP IsNot Nothing OrElse printerInfoHostname IsNot Nothing Then
                ' Wybór odpowiedniego PrinterInfo
                Dim selectedPrinterInfo As PrinterInfo = If(printerInfoIP IsNot Nothing, printerInfoIP, printerInfoHostname)
                Dim adresCzyDns As Boolean? = If(printerInfoIP IsNot Nothing, True, If(printerInfoHostname IsNot Nothing, False, Nothing))

                ' Znajdź istniejący wpis dla urządzenia w deviceList
                Dim existingRecord As Dane = deviceList.FirstOrDefault(Function(d) d.SerialNumber = device.SerialNumber)

                If existingRecord IsNot Nothing Then
                    ' Aktualizacja IP i Hostname, jeśli odczyt auto jest włączony
                    If settings.sposobOdczytuAuto AndAlso selectedPrinterInfo IsNot Nothing Then
                        If adresCzyDns.HasValue AndAlso adresCzyDns.Value Then
                            existingRecord.AdresIp = selectedPrinterInfo.IPAddress
                        Else
                            existingRecord.AdresIp = selectedPrinterInfo.IPAddressDns
                        End If
                        existingRecord.Hostname = selectedPrinterInfo.Hostname
                        updated = True ' Oznacz aktualizację
                    End If
                Else
                    Logger.Log($"Nie znaleziono wpisu dla urządzenia: {device.SerialNumber}")
                End If
            Else
                Logger.Log($"Brak danych do zapisu w deviceList dla urządzenia: {device.SerialNumber}")
            End If

            ' Wskaż, że nastąpiła aktualizacja na poziomie rekordu, aby została uwzględniona w pamięci
            If updated Then
                Logger.Log($"Zaktualizowano dane dla urządzenia: {device.SerialNumber}")
            End If

        Catch ex As IOException
            Logger.Log("Błąd w dostępie do pliku deviceList: " & ex.Message)
        Catch ex As Exception
            Logger.Log("Nieoczekiwany błąd w GetDaneFromPrinterInfoToDeviceList: " & ex.Message)
        End Try
    End Function

    'FUNKCJA AKTUALIZUJĄCA WPISY W PLIKU Z ODCZYTAMI
    Private Async Function GetDaneFromPrinterInfoToExportData(device As Dane, exportDataList As List(Of DaneToDatabase)) As Task
        Try
            Logger.Log($"Przetwarzanie urządzenia: {device.SerialNumber} (IP: {device.AdresIp}, Hostname: {device.Hostname})")

            Dim printerInfoIP As PrinterInfo = Await GetPrinterInfoAsync(device.AdresIp)
            Dim printerInfoHostname As PrinterInfo = Await GetPrinterInfoAsync(device.Hostname)
            Dim existingRecord As DaneToDatabase = exportDataList.FirstOrDefault(Function(d) d.SerialNumber = device.SerialNumber)

            If printerInfoIP IsNot Nothing OrElse printerInfoHostname IsNot Nothing Then
                Dim selectedPrinterInfo As PrinterInfo = If(printerInfoIP IsNot Nothing, printerInfoIP, printerInfoHostname)
                Logger.Log($"Dane dla urządzenia {device.SerialNumber} zostały pobrane z {(If(printerInfoIP IsNot Nothing, "AdresIp", "Hostname"))}")

                If existingRecord Is Nothing Then
                    existingRecord = New DaneToDatabase() With {
                    .SerialNumber = device.SerialNumber
                }
                    'exportDataList.Add(existingRecord)
                End If

                ' Aktualizacje liczników i poziomów tonerów
                UpdatePrinterCounters(existingRecord, selectedPrinterInfo)
                UpdateTonerLevels(existingRecord, selectedPrinterInfo)

                existingRecord.CzyKolor = selectedPrinterInfo.IsColorPrinter
                existingRecord.Status = True
                existingRecord.DataOdczytu = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")
            Else
                If existingRecord IsNot Nothing Then
                    existingRecord.Status = False
                    existingRecord.DataOdczytu = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")
                    Logger.Log($"Brak danych z drukarki dla urządzenia: {device.SerialNumber}")
                End If
            End If
        Catch ex As IOException
            Logger.Log("Błąd w dostępie do pliku exportData: " & ex.Message)
        Catch ex As Exception
            Logger.Log("Nieoczekiwany błąd w GetDaneFromPrinterInfoToExportData: " & ex.Message)
        End Try
    End Function


    ' METODA AKTUALIZUJĄCA POZIOM TONERÓW
    Private Sub UpdateTonerLevels(existingRecord As DaneToDatabase, selectedPrinterInfo As PrinterInfo)
        Try
            ' Sprawdzanie poziomu Toner BK
            Try
                If selectedPrinterInfo.tonerBkPercent = "?" Then
                    existingRecord.PercentTonerBk = "Błąd odczytu!"
                Else
                    Dim tonerBkValue As Integer = selectedPrinterInfo.tonerBkPercent
                    existingRecord.PercentTonerBk = FormatTonerLevel(tonerBkValue)

                    ' Sprawdzenie, czy poziom BK jest poniżej 10%
                    If tonerBkValue < 10 Then
                        lowTonerBk = True
                    Else
                        lowTonerBk = False
                    End If
                End If
            Catch ex As Exception
                Logger.Log("Błąd podczas przetwarzania Toner BK dla " & selectedPrinterInfo.SerialNumber & ": " & ex.Message)
            End Try

            ' Jeśli drukarka jest kolorowa, sprawdzenie pozostałych tonerów (Y, M, C)
            If selectedPrinterInfo.IsColorPrinter Then
                ' Sprawdzanie poziomu Toner Y
                Try
                    If selectedPrinterInfo.tonerYPercent = "?" Then
                        existingRecord.PercentTonerY = "Błąd odczytu!"
                    Else
                        Dim tonerYValue As Integer = selectedPrinterInfo.tonerYPercent
                        existingRecord.PercentTonerY = FormatTonerLevel(tonerYValue)

                        ' Sprawdzenie, czy poziom Y jest poniżej 10%
                        If tonerYValue < 10 Then
                            lowTonerY = True
                        Else
                            lowTonerY = False
                        End If
                    End If
                Catch ex As Exception
                    Logger.Log("Błąd podczas przetwarzania Toner Y: " & ex.Message)
                End Try

                ' Sprawdzanie poziomu Toner M
                Try
                    If selectedPrinterInfo.tonerMPercent = "?" Then
                        existingRecord.PercentTonerM = "Błąd odczytu!"
                    Else
                        Dim tonerMValue As Integer = selectedPrinterInfo.tonerMPercent
                        existingRecord.PercentTonerM = FormatTonerLevel(tonerMValue)

                        ' Sprawdzenie, czy poziom M jest poniżej 10%
                        If tonerMValue < 10 Then
                            lowTonerM = True
                        Else
                            lowTonerM = False
                        End If
                    End If
                Catch ex As Exception
                    Logger.Log("Błąd podczas przetwarzania Toner M: " & ex.Message)
                End Try

                ' Sprawdzanie poziomu Toner C
                Try
                    If selectedPrinterInfo.tonerCPercent = "?" Then
                        existingRecord.PercentTonerC = "Błąd odczytu!"
                    Else
                        Dim tonerCValue As Integer = selectedPrinterInfo.tonerCPercent
                        existingRecord.PercentTonerC = FormatTonerLevel(tonerCValue)

                        ' Sprawdzenie, czy poziom C jest poniżej 10%
                        If tonerCValue < 10 Then
                            lowTonerC = True
                        Else
                            lowTonerC = False
                        End If
                    End If
                Catch ex As Exception
                    Logger.Log("Błąd podczas przetwarzania Toner C: " & ex.Message)
                End Try

            Else
                existingRecord.PercentTonerY = ""
                existingRecord.PercentTonerM = ""
                existingRecord.PercentTonerC = ""
            End If

        Catch ex As Exception
            Logger.Log("Błąd podczas przetwarzania tonerów: " & ex.Message)
        End Try
    End Sub

    ' Funkcja formatująca poziom toneru
    Public Function FormatTonerLevel(tonerPercent As Integer) As String
        If tonerPercent < 0 Or tonerPercent > 100 Then
            Return "?"
        Else
            Return tonerPercent & " %"
        End If
    End Function


    ' METODA AKTUALIZUJĄCA LICZNIKI
    Private Sub UpdatePrinterCounters(printerData As DaneToDatabase, selectedPrinterInfo As PrinterInfo)
        Try
            Dim counterMonoPrt, counterMonoCopy, counterKolorPrt, counterKolorCopy As Integer
            Dim counterTwoKolorPrt, counterTwoKolorCopy, counterSingleKolorCopy, counterMonoPrtScan, counterKolorPrtScan As Integer
            Dim counterMonoPrtFax, counterKolorPrtFax As Integer

            ' Zaawansowane drukarki kolorowe
            If selectedPrinterInfo.IsAdvancedPrinter AndAlso selectedPrinterInfo.IsColorPrinter Then
                If Integer.TryParse(selectedPrinterInfo.counterMonoPrt, counterMonoPrt) AndAlso
               Integer.TryParse(selectedPrinterInfo.counterMonoCopy, counterMonoCopy) AndAlso
               Integer.TryParse(selectedPrinterInfo.counterMonoPrtScan, counterMonoPrtScan) Then
                    printerData.LicznikM = counterMonoPrt + counterMonoCopy + counterMonoPrtScan
                Else
                    printerData.LicznikM = Nothing
                End If
                If Integer.TryParse(selectedPrinterInfo.counterKolorPrt, counterKolorPrt) AndAlso
               Integer.TryParse(selectedPrinterInfo.counterKolorCopy, counterKolorCopy) AndAlso
               Integer.TryParse(selectedPrinterInfo.counterTwoKolorPrt, counterTwoKolorPrt) AndAlso
               Integer.TryParse(selectedPrinterInfo.counterTwoKolorCopy, counterTwoKolorCopy) AndAlso
               Integer.TryParse(selectedPrinterInfo.counterSingleKolorCopy, counterSingleKolorCopy) AndAlso
               Integer.TryParse(selectedPrinterInfo.counterKolorPrtScan, counterKolorPrtScan) Then
                    printerData.LicznikK = counterKolorPrt + counterKolorCopy + counterTwoKolorPrt + counterTwoKolorCopy + counterSingleKolorCopy + counterKolorPrtScan
                Else
                    printerData.LicznikK = Nothing
                End If

                ' Kolorowe drukarki podstawowe (KONICA MINOLTA)
            ElseIf selectedPrinterInfo.IsColorPrinter AndAlso Not selectedPrinterInfo.IsAdvancedPrinter AndAlso selectedPrinterInfo.Manufacture = "KONICA MINOLTA" Then
                If Integer.TryParse(selectedPrinterInfo.counterMonoPrt, counterMonoPrt) AndAlso
               Integer.TryParse(selectedPrinterInfo.counterMonoCopy, counterMonoCopy) AndAlso
               Integer.TryParse(selectedPrinterInfo.counterMonoPrtFax, counterMonoPrtFax) Then
                    printerData.LicznikM = counterMonoPrt + counterMonoCopy + counterMonoPrtFax
                Else
                    printerData.LicznikM = Nothing
                End If
                If Integer.TryParse(selectedPrinterInfo.counterKolorPrt, counterKolorPrt) AndAlso
               Integer.TryParse(selectedPrinterInfo.counterKolorCopy, counterKolorCopy) Then
                    printerData.LicznikK = counterKolorPrt + counterKolorCopy
                Else
                    printerData.LicznikK = Nothing
                End If

                ' Kolorowe drukarki podstawowe (BROTHER)
            ElseIf selectedPrinterInfo.IsColorPrinter AndAlso Not selectedPrinterInfo.IsAdvancedPrinter AndAlso selectedPrinterInfo.Manufacture = "BROTHER" Then
                If Integer.TryParse(selectedPrinterInfo.counterMonoPrt, counterMonoPrt) AndAlso
               Integer.TryParse(selectedPrinterInfo.counterMonoCopy, counterMonoCopy) AndAlso
               Integer.TryParse(selectedPrinterInfo.counterMonoPrtFax, counterMonoPrtFax) Then
                    printerData.LicznikM = counterMonoPrt + counterMonoCopy + counterMonoPrtFax
                Else
                    printerData.LicznikM = Nothing
                End If
                If Integer.TryParse(selectedPrinterInfo.counterKolorPrt, counterKolorPrt) AndAlso
               Integer.TryParse(selectedPrinterInfo.counterKolorCopy, counterKolorCopy) AndAlso
               Integer.TryParse(selectedPrinterInfo.counterKolorPrtFax, counterKolorPrtFax) Then
                    printerData.LicznikK = counterKolorPrt + counterKolorCopy + counterKolorPrtFax
                Else
                    printerData.LicznikK = Nothing
                End If

                ' Inne drukarki kolorowe
            ElseIf selectedPrinterInfo.IsColorPrinter Then
                printerData.LicznikM = If(Integer.TryParse(selectedPrinterInfo.counterMonoPrt, counterMonoPrt), counterMonoPrt, Nothing)
                printerData.LicznikK = If(Integer.TryParse(selectedPrinterInfo.counterKolorPrt, counterKolorPrt), counterKolorPrt, Nothing)

                ' Drukarki czarno-białe
            ElseIf Not selectedPrinterInfo.IsAdvancedPrinter AndAlso Not selectedPrinterInfo.IsColorPrinter Then
                printerData.LicznikM = If(Integer.TryParse(selectedPrinterInfo.counterMonoPrt, counterMonoPrt), counterMonoPrt, Nothing)
                printerData.LicznikK = Nothing
            End If

        Catch ex As Exception
            Logger.Log("Błąd podczas przetwarzania liczników: " & ex.Message)
        End Try
    End Sub


    ' METODA AKTUALIZUJĄCA PLIK exportData.json
    Private Sub UpdateExportDataFile(selectedPrinterInfo As PrinterInfo, Printer_SN As String, row As DataRow)
        Try
            SyncLock lockObjectExportData
                Dim readJsonWartoscExportData As List(Of DaneToDatabase) = New List(Of DaneToDatabase)()

                ' Sprawdzenie, czy plik JSON istnieje i jego odczyt
                If File.Exists(filePathExportData) Then
                    Dim jsonStringExportData As String = File.ReadAllText(filePathExportData)
                    readJsonWartoscExportData = JsonConvert.DeserializeObject(Of List(Of DaneToDatabase))(jsonStringExportData)
                End If

                ' Znajdź istniejący wpis dla numeru seryjnego
                Dim existingSerialExportData As DaneToDatabase = readJsonWartoscExportData.FirstOrDefault(Function(d) d.SerialNumber = Printer_SN)

                ' Walidacja i przypisanie wartości tonerów
                Dim tonerBk As String = If(selectedPrinterInfo?.tonerBkPercent?.ToString(), "")
                Dim tonerY As String = If(selectedPrinterInfo?.tonerYPercent?.ToString(), "")
                Dim tonerM As String = If(selectedPrinterInfo?.tonerMPercent?.ToString(), "")
                Dim tonerC As String = If(selectedPrinterInfo?.tonerCPercent?.ToString(), "")

                ' Aktualizuj dane lub dodaj nowy wpis
                If existingSerialExportData IsNot Nothing Then
                    existingSerialExportData.CzyKolor = If(selectedPrinterInfo IsNot Nothing, selectedPrinterInfo.IsColorPrinter, False)
                    existingSerialExportData.LicznikM = ValidateCounterLevel(row("Licznik M"))
                    existingSerialExportData.LicznikK = ValidateCounterLevel(row("Licznik K"))
                    existingSerialExportData.PercentTonerBk = tonerBk
                    existingSerialExportData.PercentTonerY = tonerY
                    existingSerialExportData.PercentTonerM = tonerM
                    existingSerialExportData.PercentTonerC = tonerC
                    existingSerialExportData.Status = (row("Status").ToString() = ChrW(&H25CF).ToString())
                    existingSerialExportData.DataOdczytu = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")
                End If

                ' Zapisanie zaktualizowanej listy do pliku JSON
                Dim updatedJson As String = JsonConvert.SerializeObject(readJsonWartoscExportData, Formatting.Indented)
                File.WriteAllText(filePathExportData, updatedJson)

            End SyncLock

        Catch ex As Exception
            Logger.Log("Błąd podczas aktualizacji danych eksportowych: " & Printer_SN & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try
    End Sub



    ' FUNKCJA WALIDUJĄCA WARTOŚCI LICZNIKÓW ZAPISYWANE DO PLIKU EKSPORTU
    Private Function ValidateCounterLevel(counterLevel As Object) As Integer?
        ' Sprawdza counterLevel, jeśli jest DBNull lub "" lub nie jest liczbą, zwraca Nothing (NULL)
        If counterLevel Is DBNull.Value OrElse counterLevel.ToString() = "" OrElse Not IsNumeric(counterLevel) Then
            Return Nothing
        End If

        ' Jeśli counterLevel jest liczbą, zwraca jego wartość jako Integer
        Return Convert.ToInt32(counterLevel)
    End Function


    ' NA RAZIE TO ZOSTAWIAM
    Private Async Function UpdateDataInTablexxx() As Task
        disaableBottomInfo = False

        Me.btnRefresh.Enabled = False
        Me.btnTransfer.Enabled = False
        Me.btnDodaj.Enabled = False
        Me.btnSzukaj.Enabled = False
        Me.btnUstawienia.Enabled = False
        Me.btnTools.Enabled = False
        Me.btnHelp.Enabled = False
        Me.TextBoxSzukajUrzadzenia.Enabled = False
        Me.DataGridView1.Enabled = False

        ProgressBar1.Visible = True
        ProgressBar1.Maximum = dataTable.Rows.Count
        progressLabel.Visible = True

        TextBoxSzukajUrzadzenia.Text = ""

        Dim jsonString As String = File.ReadAllText(filePath)

        Dim jArray As JArray = JArray.Parse(jsonString)
        dataTable = New DataTable()
        Dim columnNumbers As Integer() = {0, 1, 2, 3, 4, 5, 6}
        Dim columnNames As String() = {"Adres", "Nazwa hosta", "Urządzenie", "Nr seryjny", "MAC", "Miejsce postoju", "Dodatkowe informacje"}

        Dim readJsonWartosc As List(Of Dane) = JsonConvert.DeserializeObject(Of List(Of Dane))(jsonString)

        For Each columnName As String In columnNames
            dataTable.Columns.Add(columnName)
        Next

        dataTable.Columns.Add("Status", GetType(String))
        dataTable.Columns.Add("Licznik M", GetType(String))
        dataTable.Columns.Add("Licznik K", GetType(String))
        dataTable.Columns.Add("Toner BK", GetType(String))
        dataTable.Columns.Add("Toner Y", GetType(String))
        dataTable.Columns.Add("Toner M", GetType(String))
        dataTable.Columns.Add("Toner C", GetType(String))


        For Each jObject As JObject In jArray
            Dim row As DataRow = dataTable.NewRow()
            For i As Integer = 0 To columnNumbers.Length - 1
                Dim columnNumber As Integer = columnNumbers(i)
                If columnNumber >= 0 AndAlso columnNumber < jObject.Properties().Count() Then
                    Dim item As JProperty = jObject.Properties().ElementAt(columnNumber)
                    row(columnNames(i)) = item.Value
                End If
            Next
            dataTable.Rows.Add(row)
        Next

        statusCountOnline = 0
        statusCountOffline = 0

        Dim tasks As New List(Of Task)()
        Dim lockObject As New Object()

        Dim taskCount As Integer = dataTable.Rows.Count
        ProgressBar1.Maximum = taskCount
        ProgressBar1.Value = 0

        For Each row As DataRow In dataTable.Rows
            If row.RowState <> DataRowState.Deleted AndAlso row.RowState <> DataRowState.Detached Then
                Dim Printer_IP As String = row("Adres").ToString()
                Dim Printer_SN As String = row("Nr seryjny").ToString()
                Dim Printer_HOSTNAME As String = row("Nazwa hosta").ToString()

                tasks.Add(Task.Run(Async Function()

                                       Dim printerInfoIP As PrinterInfo = Await GetPrinterInfoAsync(Printer_IP)
                                       Dim printerInfoHostname As PrinterInfo = Await GetPrinterInfoAsync(Printer_HOSTNAME)

                                       If printerInfoIP IsNot Nothing OrElse printerInfoHostname IsNot Nothing Then

                                           Dim existingSerial As Dane = readJsonWartosc.FirstOrDefault(Function(d) d.SerialNumber = Printer_SN)
                                           Dim jestSerial As Boolean = False

                                           ' Priorytetyzujemy dane z printerInfoIP, ale jeśli printerInfoIP jest Nothing, korzystamy z printerInfoHostname
                                           Dim selectedPrinterInfo As PrinterInfo = If(printerInfoIP IsNot Nothing, printerInfoIP, printerInfoHostname)
                                           Dim adresCzyDns As Boolean = If(printerInfoIP IsNot Nothing, True, False)

                                           If selectedPrinterInfo.SerialNumber = existingSerial.SerialNumber Then
                                               jestSerial = True
                                           End If

                                           ' Aktualizuję tonery i liczniki tylko wtedy gdy serial wywołany przez GetPrinterInfo z przypisanym adresem zgadza się z plikiem
                                           ' Jeśli GetPrinterInfo znajdzie w sieci takie IP ale będzie to inny serial to status urządzenia będzie OFFLINE
                                           If jestSerial = True Then
                                               Try
                                                   'ODCZYT USTAWIEŃ PROGRMU
                                                   If settings.sposobOdczytuAuto Then

                                                       If adresCzyDns = True Then
                                                           row("adres") = selectedPrinterInfo.IPAddress
                                                           existingSerial.AdresIp = selectedPrinterInfo.IPAddress
                                                       Else
                                                           row("adres") = selectedPrinterInfo.IPAddressDns
                                                           existingSerial.AdresIp = selectedPrinterInfo.IPAddressDns
                                                       End If
                                                       row("Nazwa hosta") = selectedPrinterInfo.Hostname
                                                       row("Nr seryjny") = selectedPrinterInfo.SerialNumber
                                                       row("MAC") = selectedPrinterInfo.MAC

                                                       existingSerial.Hostname = selectedPrinterInfo.Hostname
                                                       existingSerial.SerialNumber = selectedPrinterInfo.SerialNumber
                                                       existingSerial.Mac = selectedPrinterInfo.MAC

                                                       Dim updatedJson As String = JsonConvert.SerializeObject(readJsonWartosc, Formatting.Indented)
                                                       File.WriteAllText(filePath, updatedJson)

                                                   ElseIf settings.sposobOdczytuManual Then
                                                       row("adres") = existingSerial.AdresIp
                                                       row("Nazwa hosta") = existingSerial.Hostname
                                                       row("Nr seryjny") = existingSerial.SerialNumber
                                                       row("Urządzenie") = existingSerial.Urzadzenie
                                                       row("Nr seryjny") = existingSerial.SerialNumber
                                                       row("MAC") = existingSerial.Mac
                                                   End If

                                                   row("Miejsce postoju") = existingSerial.MiejscePostoju
                                                   row("Dodatkowe informacje") = existingSerial.DodatkoweInfo

                                                   Dim kropkaZielona As String = ChrW(&H25CF)
                                                   row("Status") = kropkaZielona

                                                   If Not selectedPrinterInfo.IsColorPrinter Then
                                                       row("Toner Y") = ""
                                                       row("Toner M") = ""
                                                       row("Toner C") = ""
                                                       row("%Y") = ""
                                                       row("%M") = ""
                                                       row("%C") = ""
                                                   End If

                                                   Try
                                                       If selectedPrinterInfo.tonerBkPercent = "?" Then
                                                           row("%BK") = "?"
                                                       Else
                                                           ' UpdateTonerLevel(row, "Toner BK", selectedPrinterInfo.tonerBkPercent)
                                                       End If
                                                   Catch ex As Exception
                                                       Logger.Log("Błąd podczas przetwarzania Toner BK: " & ex.Message)
                                                   End Try

                                                   If selectedPrinterInfo.IsColorPrinter Then
                                                       Try
                                                           Debug.WriteLine("Przetwarzanie Toner Y")
                                                           If selectedPrinterInfo.tonerYPercent = "?" Then
                                                               row("%Y") = "?"
                                                           Else
                                                               ' UpdateTonerLevel(row, "Toner Y", selectedPrinterInfo.tonerYPercent)
                                                           End If
                                                       Catch ex As Exception
                                                           Logger.Log("Błąd podczas przetwarzania Toner Y: " & ex.Message)
                                                       End Try

                                                       Try
                                                           Debug.WriteLine("Przetwarzanie Toner M")
                                                           If selectedPrinterInfo.tonerMPercent = "?" Then
                                                               row("%M") = "?"
                                                           Else
                                                               'UpdateTonerLevel(row, "Toner M", selectedPrinterInfo.tonerMPercent)
                                                           End If
                                                       Catch ex As Exception
                                                           Logger.Log("Błąd podczas przetwarzania Toner M: " & ex.Message)
                                                       End Try

                                                       Try
                                                           Debug.WriteLine("Przetwarzanie Toner C")
                                                           If selectedPrinterInfo.tonerCPercent = "?" Then
                                                               row("%C") = "?"
                                                           Else
                                                               'UpdateTonerLevel(row, "Toner C", selectedPrinterInfo.tonerCPercent)
                                                           End If
                                                       Catch ex As Exception
                                                           Logger.Log("Błąd podczas przetwarzania Toner C: " & ex.Message)
                                                       End Try
                                                   End If
                                               Catch ex As Exception
                                                   Logger.Log("Błąd podczas przetwarzania informacji o drukarce: " & ex.Message)
                                               End Try

                                               Try
                                                   Dim counterMonoPrt As Integer
                                                   Dim counterMonoCopy As Integer
                                                   Dim counterKolorPrt As Integer
                                                   Dim counterKolorCopy As Integer
                                                   Dim counterTwoKolorPrt As Integer
                                                   Dim counterTwoKolorCopy As Integer
                                                   Dim counterSingleKolorCopy As Integer
                                                   Dim counterMonoPrtScan As Integer
                                                   Dim counterKolorPrtScan As Integer
                                                   Dim counterMonoPrtFax As Integer
                                                   Dim counterKolorPrtFax As Integer

                                                   If selectedPrinterInfo.IsAdvancedPrinter AndAlso selectedPrinterInfo.IsColorPrinter Then
                                                       If Integer.TryParse(selectedPrinterInfo.counterMonoPrt, counterMonoPrt) AndAlso
                           Integer.TryParse(selectedPrinterInfo.counterMonoCopy, counterMonoCopy) AndAlso
                           Integer.TryParse(selectedPrinterInfo.counterMonoPrtScan, counterMonoPrtScan) Then
                                                           row("Licznik M") = counterMonoPrt + counterMonoCopy + counterMonoPrtScan
                                                       End If
                                                       If Integer.TryParse(selectedPrinterInfo.counterKolorPrt, counterKolorPrt) AndAlso
                           Integer.TryParse(selectedPrinterInfo.counterKolorCopy, counterKolorCopy) AndAlso
                           Integer.TryParse(selectedPrinterInfo.counterTwoKolorPrt, counterTwoKolorPrt) AndAlso
                           Integer.TryParse(selectedPrinterInfo.counterTwoKolorCopy, counterTwoKolorCopy) AndAlso
                           Integer.TryParse(selectedPrinterInfo.counterSingleKolorCopy, counterSingleKolorCopy) AndAlso
                           Integer.TryParse(selectedPrinterInfo.counterKolorPrtScan, counterKolorPrtScan) Then
                                                           row("Licznik K") = counterKolorPrt + counterKolorCopy + counterTwoKolorPrt + counterTwoKolorCopy + counterSingleKolorCopy + counterKolorPrtScan
                                                       End If
                                                   ElseIf selectedPrinterInfo.IsColorPrinter AndAlso Not selectedPrinterInfo.IsAdvancedPrinter AndAlso selectedPrinterInfo.Manufacture = "KONICA MINOLTA" Then
                                                       If Integer.TryParse(selectedPrinterInfo.counterMonoPrt, counterMonoPrt) AndAlso
                           Integer.TryParse(selectedPrinterInfo.counterMonoCopy, counterMonoCopy) AndAlso
                           Integer.TryParse(selectedPrinterInfo.counterMonoPrtFax, counterMonoPrtFax) Then
                                                           row("Licznik M") = selectedPrinterInfo.counterMonoPrt + counterMonoCopy + counterMonoPrtFax
                                                       End If
                                                       If Integer.TryParse(selectedPrinterInfo.counterKolorPrt, counterKolorPrt) AndAlso
                           Integer.TryParse(selectedPrinterInfo.counterKolorCopy, counterKolorCopy) Then
                                                           row("Licznik K") = selectedPrinterInfo.counterKolorPrt + counterKolorCopy
                                                       End If
                                                   ElseIf selectedPrinterInfo.IsColorPrinter AndAlso Not selectedPrinterInfo.IsAdvancedPrinter AndAlso selectedPrinterInfo.Manufacture = "BROTHER" Then
                                                       If Integer.TryParse(selectedPrinterInfo.counterMonoPrt, counterMonoPrt) AndAlso
                           Integer.TryParse(selectedPrinterInfo.counterMonoCopy, counterMonoCopy) AndAlso
                           Integer.TryParse(selectedPrinterInfo.counterMonoPrtFax, counterMonoPrtFax) Then
                                                           row("Licznik M") = selectedPrinterInfo.counterMonoPrt + counterMonoCopy + counterMonoPrtFax
                                                       End If
                                                       If Integer.TryParse(selectedPrinterInfo.counterKolorPrt, counterKolorPrt) AndAlso
                           Integer.TryParse(selectedPrinterInfo.counterKolorCopy, counterKolorCopy) AndAlso
                           Integer.TryParse(selectedPrinterInfo.counterKolorPrtFax, counterKolorPrtFax) Then
                                                           row("Licznik K") = selectedPrinterInfo.counterKolorPrt + counterKolorCopy + counterKolorPrtFax
                                                       End If
                                                   ElseIf selectedPrinterInfo.IsColorPrinter Then
                                                       row("Licznik M") = selectedPrinterInfo.counterMonoPrt
                                                       row("Licznik K") = selectedPrinterInfo.counterKolorPrt
                                                   ElseIf Not selectedPrinterInfo.IsAdvancedPrinter AndAlso Not selectedPrinterInfo.IsColorPrinter Then
                                                       row("Licznik M") = selectedPrinterInfo.counterMonoPrt
                                                       row("Licznik K") = ""
                                                   End If
                                               Catch ex As Exception
                                                   Logger.Log("Błąd podczas przetwarzania liczników: " & ex.Message)
                                               End Try

                                               SyncLock lockObject
                                                   statusCountOnline += 1
                                               End SyncLock

                                           Else
                                               Dim kropkaCzerwona As String = ChrW(&H2B24)
                                               row("Status") = kropkaCzerwona

                                               SyncLock lockObject
                                                   statusCountOffline += 1
                                               End SyncLock
                                           End If
                                       Else
                                           Dim kropkaCzerwona As String = ChrW(&H2B24)
                                           row("Status") = kropkaCzerwona

                                           SyncLock lockObject
                                               statusCountOffline += 1
                                           End SyncLock
                                       End If

                                       Me.Invoke(Sub()
                                                     ProgressBar1.Value += 1
                                                     progressLabel.Text = $"{(ProgressBar1.Value / ProgressBar1.Maximum * 100):F0}%"
                                                 End Sub)

                                   End Function))
            End If

            ' ProgressBar1.Value += 1
            ' progressLabel.Text = $"{(ProgressBar1.Value / ProgressBar1.Maximum * 100):F0}%"
            Await Task.Yield()
            Application.DoEvents()
        Next

        UpdatePanels()

        Await Task.WhenAll(tasks)
        DataGridView1.DataSource = dataTable



        DataGridView1.Columns("MAC").Visible = False
        DataGridView1.Columns("Dodatkowe informacje").Visible = False
        DataGridView1.Columns("Nazwa hosta").Visible = False
        DataGridView1.Columns("MAC").SortMode = DataGridViewColumnSortMode.NotSortable
        DataGridView1.Columns("Licznik M").SortMode = DataGridViewColumnSortMode.NotSortable
        DataGridView1.Columns("Licznik K").SortMode = DataGridViewColumnSortMode.NotSortable
        DataGridView1.Columns("Toner BK").SortMode = DataGridViewColumnSortMode.NotSortable
        DataGridView1.Columns("%BK").SortMode = DataGridViewColumnSortMode.NotSortable
        DataGridView1.Columns("Toner Y").SortMode = DataGridViewColumnSortMode.NotSortable
        DataGridView1.Columns("%Y").SortMode = DataGridViewColumnSortMode.NotSortable
        DataGridView1.Columns("Toner M").SortMode = DataGridViewColumnSortMode.NotSortable
        DataGridView1.Columns("%M").SortMode = DataGridViewColumnSortMode.NotSortable
        DataGridView1.Columns("Toner C").SortMode = DataGridViewColumnSortMode.NotSortable
        DataGridView1.Columns("%C").SortMode = DataGridViewColumnSortMode.NotSortable

        originalDataSource = CType(DataGridView1.DataSource, DataTable)
        filteredData = originalDataSource.Clone()
        Me.btnRefresh.Enabled = True
        Me.btnTransfer.Enabled = True
        Me.btnDodaj.Enabled = True
        Me.btnSzukaj.Enabled = True
        Me.btnUstawienia.Enabled = True
        Me.btnTools.Enabled = True
        Me.btnHelp.Enabled = True
        Me.TextBoxSzukajUrzadzenia.Enabled = True
        Me.DataGridView1.Enabled = True
        ProgressBar1.Value = ProgressBar1.Maximum
        Await Task.Delay(3000)
        ProgressBar1.Visible = False
        progressLabel.Visible = False
    End Function

    ' FUNKCJA SYNCHRONIZUJĄCA DANE URZĄDZEŃ
    Private Async Function SynchronizacjaDanychUrzadzen(LabelStatus As Label, progressBar As ProgressBar, iloscSynchro As Label) As Task
        ' Pobierz wszystkie aktywne interfejsy sieciowe
        Dim interfaces As NetworkInterface() = NetworkInterface.GetAllNetworkInterfaces()

        ' Lista wszystkich adresów unicast
        Dim allUnicastAddresses As New List(Of UnicastIPAddressInformation)()

        ' Pobieranie aktywnych interfejsów sieciowych
        For Each networkInterface In interfaces
            If networkInterface.OperationalStatus = OperationalStatus.Up AndAlso
           networkInterface.NetworkInterfaceType <> NetworkInterfaceType.Loopback AndAlso
           networkInterface.NetworkInterfaceType <> NetworkInterfaceType.Tunnel Then

                Dim ipProperties As IPInterfaceProperties = networkInterface.GetIPProperties()
                Dim unicastAddresses As UnicastIPAddressInformationCollection = ipProperties.UnicastAddresses

                ' Dodanie adresów unicast do listy
                For Each address As UnicastIPAddressInformation In unicastAddresses
                    If address.Address.AddressFamily = AddressFamily.InterNetwork Then
                        allUnicastAddresses.Add(address)
                    End If
                Next
            End If
        Next

        ' Pobieranie adresów z konfiguracji alternatywnej
        For Each entry In settings.siecAlternatywnaPodsiec
            Dim manualIp As String = entry.AddressIP
            Dim manualSubnetMask As String = "255.255.255.0" ' Zakładamy maskę 255.255.255.0

            ' Walidacja adresu IP i maski
            If Not String.IsNullOrEmpty(manualIp) AndAlso Not String.IsNullOrEmpty(manualSubnetMask) Then
                Try
                    Dim manualIpAddress As System.Net.IPAddress = System.Net.IPAddress.Parse(manualIp)
                    Dim manualSubnetMaskAddress As System.Net.IPAddress = System.Net.IPAddress.Parse(manualSubnetMask)

                    ' Dodanie ręcznie wpisanego adresu
                    Dim manualUnicastAddress As New CustomUnicastIPAddressInformation(manualIpAddress, manualSubnetMaskAddress)
                    allUnicastAddresses.Add(manualUnicastAddress)
                Catch ex As FormatException
                    ' Obsługa błędów walidacji
                End Try
            End If
        Next

        ' Sprawdzanie, czy znaleziono jakieś aktywne adresy
        If allUnicastAddresses.Count = 0 Then
            LabelStatus.Text = "Nie znaleziono aktywnych sieci."
            Return
        End If

        Dim ileSynchro As Integer = 0

        ' Iterowanie po każdej sieci
        For Each address In allUnicastAddresses
            Dim ipAddress As System.Net.IPAddress = address.Address
            Dim subnetMask As System.Net.IPAddress = address.IPv4Mask

            Dim ipBytes As Byte() = ipAddress.GetAddressBytes()
            Dim maskBytes As Byte() = subnetMask.GetAddressBytes()

            ' Obliczanie adresu sieci (adres minimalny)
            Dim networkIpBytes As Byte() = New Byte(ipBytes.Length - 1) {}
            For i As Integer = 0 To ipBytes.Length - 1
                networkIpBytes(i) = CByte(ipBytes(i) And maskBytes(i))
            Next

            ' Konwersja adresu sieci na format tekstowy
            Dim networkIp As New System.Net.IPAddress(networkIpBytes)

            LabelStatus.Invoke(Sub() LabelStatus.Text = $"Synchronizacja: {networkIp.ToString()}")

            Dim totalAddresses As Integer = 254 ' Zakres adresów od 1 do 254
            Dim tasks As New List(Of Task)()
            Dim completedCount As Integer = 0


            For d As Integer = 1 To totalAddresses
                Dim dCopy As Integer = d ' Zapisz lokalną kopię zmiennej
                tasks.Add(Task.Run(Async Function()
                                       ' Ustawianie ostatniego oktetu
                                       networkIpBytes(3) = CByte(dCopy)
                                       Dim targetIp As New System.Net.IPAddress(networkIpBytes)
                                       Dim Printer_IP = targetIp.ToString()

                                       Try
                                           Dim printerInfo As PrinterInfo = Await Task.Run(Function() GetPrinterInfo(Printer_IP))
                                           Dim existingDevices As List(Of Dane)
                                           Dim readJson As String = Await Task.Run(Function() File.ReadAllText(filePath))
                                           existingDevices = JsonConvert.DeserializeObject(Of List(Of Dane))(readJson)

                                           If printerInfo IsNot Nothing Then
                                               Dim jestSerial As Boolean = False
                                               Dim nieMaAdres As Boolean = False
                                               Dim nieMaHostname As Boolean = False


                                               For Each dane In existingDevices
                                                   If dane.SerialNumber = printerInfo.SerialNumber Then
                                                       jestSerial = True
                                                       If dane.AdresIp <> Printer_IP OrElse dane.Hostname <> printerInfo.Hostname Then
                                                           ileSynchro += 1
                                                           nieMaAdres = True
                                                           nieMaHostname = True
                                                           dane.AdresIp = Printer_IP
                                                           dane.Hostname = printerInfo.Hostname
                                                       End If
                                                   End If
                                               Next

                                               If jestSerial AndAlso (nieMaAdres OrElse nieMaHostname) Then
                                                   ' Zapis zaktualizowanych danych do pliku JSON
                                                   Dim updatedJson As String = JsonConvert.SerializeObject(existingDevices, Formatting.Indented)
                                                   Await Task.Run(Sub() File.WriteAllText(filePath, updatedJson))
                                               End If
                                           End If
                                       Catch ex As Exception
                                           ' Obsługa błędów
                                       End Try

                                       ' Aktualizacja paska postępu i etykiety statusu
                                       SyncLock progressBar
                                           completedCount += 1
                                           Dim progressPercent As Integer = CInt((completedCount / totalAddresses) * 100)
                                           LabelStatus.Invoke(Sub() LabelStatus.Text = $"Synchronizacja: {networkIp.ToString()} - {progressPercent}%")
                                           progressBar.Invoke(Sub() progressBar.Value = progressPercent)
                                       End SyncLock
                                   End Function))
            Next

            ' Poczekaj na zakończenie wszystkich zadań
            Await Task.WhenAll(tasks)
            Await Task.Delay(3000)
        Next
        Await Task.Delay(3000)
        LabelStatus.Invoke(Sub() LabelStatus.Text = "Status: Aktualizacja listy urządzeń")

        ' Uruchomienie metody aktualizującej tabelę
        Await UpdateDataInTable()
        Await Task.Delay(3000)

        LabelStatus.Invoke(Sub()
                               LabelStatus.Text = "Status: Aktualizacja listy urządzeń zakończona"
                           End Sub)
        Await Task.Delay(3000)

        LabelStatus.Invoke(Sub()
                               LabelStatus.Text = "Status: Synchronizacja urządzeń przebiegła pomyślnie"
                           End Sub)

        iloscSynchro.Visible = True
        iloscSynchro.Text = iloscSynchro.Text & ileSynchro

    End Function

    ' GŁÓWNY FORMULARZ APLIKACJI
    ' Po kliknięciu w "Otwórz", formularz zostanie pokazany
    Private Sub trayItem1_Click(sender As Object, e As EventArgs) Handles trayItem1.Click
        ' Sprawdzenie, czy formularz jest zminimalizowany lub ukryty
        If Me.WindowState = FormWindowState.Minimized OrElse Not Me.Visible Then
            Me.Show()
            Me.WindowState = FormWindowState.Maximized
            Me.BringToFront() ' Przywrócenie formularza na przód
        End If
        Me.MinimumSize = New System.Drawing.Size(800, 600)
        Me.ShowInTaskbar = True
    End Sub


    ' Zdarzenie dla opcji "Zamknij"
    Private Sub trayItem2_Click(sender As Object, e As EventArgs) Handles trayItem2.Click
        NotifyIcon1.Visible = False ' Ukrycie ikony z tray
        Me.Dispose() ' Zamykanie i czyszczenie zasobów
        Application.Exit() ' Zamyka aplikację
    End Sub

    ' Zdarzenie podwójnego kliknięcia na ikonę w tray
    Private Sub NotifyIcon1_DoubleClick(sender As Object, e As EventArgs) Handles NotifyIcon1.DoubleClick
        ' Przywrócenie okna
        Me.Show()
        Me.WindowState = FormWindowState.Maximized
        Me.MinimumSize = New System.Drawing.Size(800, 600)
        ' Przywrócenie aplikacji na pasek zadań
        Me.ShowInTaskbar = True
        Me.BringToFront() ' Upewnienie się, że okno jest na wierzchu
    End Sub


    Public Async Sub Form1_Load(sender As Object, e As EventArgs) Handles Me.Load

        ' Ukrycie formularza na starcie
        Me.Hide()

        ' Ustawienie ikony w zasobniku systemowym
        NotifyIcon1.Visible = True
        NotifyIcon1.Icon = My.Resources.ico_16x16
        NotifyIcon1.Text = "PrinterMonitor - agent"
        NotifyIcon1.ContextMenuStrip = contextMenuStrip2

        ' Ukrycie z paska zadań (nie chcemy, aby aplikacja była widoczna na pasku)
        Me.ShowInTaskbar = False

        btnSciema.Visible = False
        btnRefresh.Visible = False
        btnTransfer.Visible = False
        btnDodaj.Visible = False
        btnSzukaj.Visible = False
        btnTools.Visible = False
        btnUstawienia.Visible = False
        btnHelp.Visible = False
        separator_Ust_Help.Visible = False
        separator_Odczyt_Transfer.Visible = False
        separator_Transfer_Dodaj.Visible = False
        separator_Dodaj_Szukaj.Visible = False
        separator_Szukaj_Tools.Visible = False
        separator_Tools_Ust.Visible = False
        LabelOnline.Visible = False
        LabelOnlineText.Visible = False
        LabelOnlineNapis.Visible = False
        LabelOfflineText.Visible = False
        LabelOfflineNapis.Visible = False
        LabelOffline.Visible = False
        LabelOstatniOdczytText.Visible = False
        LabelOstatniOdczyt.Visible = False
        LabelOstatniTransfer.Visible = False
        LabelOstatniTransferText.Visible = False

        'Wczytaj ustawienia programu
        settings = LoadSettings()
        connect = LoadConnectData()

        UpdatePanels()
        AddHandler Me.Resize, AddressOf Form1_ReSize
        CenterTextBox()

        'Me.WindowState = FormWindowState.Maximized
        'Me.MinimumSize = New System.Drawing.Size(800, 600)

        '   ' Konfiguracja menu kontekstowego
        AddHandler copyMenuItem.Click, AddressOf CopyMenuItem_Click


        contextMenuStrip1.Items.Add(copyMenuItem1)
        contextMenuStrip1.Items.Add(copyMenuItem5)
        contextMenuStrip1.Items.Add(copyMenuItem3)
        contextMenuStrip1.Items.Add(copyMenuItem4)
        contextMenuStrip1.Items.Add(copyMenuItem)
        contextMenuStrip1.Items.Add(copyMenuItem2)

        contextMenuStrip2.Items.Add(trayItem1)
        contextMenuStrip2.Items.Add(trayItem2)

        ' Przypisanie menu kontekstowego do DataGridView
        DataGridView1.ContextMenuStrip = contextMenuStrip1
        LabelOnline.Visible = False
        LabelOnlineNapis.Visible = False
        LabelOnlineText.Visible = False
        LabelOffline.Visible = False
        LabelOfflineNapis.Visible = False
        LabelOfflineText.Visible = False
        LabelUrzadzenie.Visible = False
        LabelNieZnaleziono.Visible = False
        LabelSnmpUrzadzenie.Visible = False
        LabelBrakIp.Visible = False
        LabelSnmpSerialNumber.Visible = False
        LabelSerialNumber.Visible = False
        LabelZnaleziono.Visible = False
        LabelDodanoUrzadzenie.Visible = False
        TextBoxMiejscePostoju.Visible = False
        LabelMiejscePostoju.Visible = False
        btnDodajZapisz.Visible = False
        DataGridView1.RowHeadersVisible = False

        ' Tworzenie folderów, jeśli nie istnieją
        If Not Directory.Exists(folderDataPath) Then
            Directory.CreateDirectory(folderDataPath)
        End If
        If Not Directory.Exists(folderConfigPath) Then
            Directory.CreateDirectory(folderConfigPath)
        End If

        If File.Exists(filePath) Then
            Dim json As String = File.ReadAllText(filePath)
            Dim jArray As JArray = JArray.Parse(json)

            dataTable = New DataTable()
            Dim columnNumbers As Integer() = {0, 1, 2, 3, 4, 5, 6} ' Numer kolumny, które chcesz pobrać
            Dim columnNames As String() = {"Adres", "Nazwa hosta", "Urządzenie", "Nr seryjny", "MAC", "Miejsce postoju", "Dodatkowe informacje"} ' Nowe nazwy kolumn

            ' Dodawanie kolumn do tabeli na podstawie nowych nazw
            For Each columnName As String In columnNames
                dataTable.Columns.Add(columnName)
            Next

            dataTable.Columns.Add("Status", GetType(String))
            dataTable.Columns.Add("Licznik M", GetType(String))
            dataTable.Columns.Add("Licznik K", GetType(String))
            dataTable.Columns.Add("Toner BK", GetType(String))
            dataTable.Columns.Add("Toner Y", GetType(String))
            dataTable.Columns.Add("Toner M", GetType(String))
            dataTable.Columns.Add("Toner C", GetType(String))


            For Each jObject As JObject In jArray
                Dim row As DataRow = dataTable.NewRow()

                For i As Integer = 0 To columnNumbers.Length - 1
                    Dim columnNumber As Integer = columnNumbers(i)
                    ' Sprawdzanie, czy numer kolumny jest prawidłowy
                    If columnNumber >= 0 AndAlso columnNumber < jObject.Properties().Count() Then
                        Dim item As JProperty = jObject.Properties().ElementAt(columnNumber)
                        row(columnNames(i)) = item.Value
                    End If
                Next

                dataTable.Rows.Add(row)
            Next

            ' Przypisanie danych do DataGridView
            DataGridView1.DataSource = dataTable

            ' Sprawdzenie, czy DataGridView jest pusty i ustawienie widoczności nagłówków
            DataGridView1.ColumnHeadersVisible = DataGridView1.Rows.Count > 0

            ' Styl nagłówków tabeli
            FormatTableHeaders()

            If settings.kolumnaNazwaHostaON Then
                DataGridView1.Columns("Nazwa hosta").Visible = True
            Else
                DataGridView1.Columns("Nazwa hosta").Visible = False
            End If

            If settings.kolumnaDodatkoweInfoON Then
                DataGridView1.Columns("Dodatkowe informacje").Visible = True
            Else
                DataGridView1.Columns("Dodatkowe informacje").Visible = False
            End If

            If settings.kolumnaMacON Then
                DataGridView1.Columns("MAC").Visible = True
            Else
                DataGridView1.Columns("MAC").Visible = False
            End If

            If settings.kolumnaLicznikMonoON Then
                DataGridView1.Columns("Licznik M").Visible = True
            Else
                DataGridView1.Columns("Licznik M").Visible = False
            End If

            If settings.kolumnaLicznikKolorON Then
                DataGridView1.Columns("Licznik K").Visible = True
            Else
                DataGridView1.Columns("Licznik K").Visible = False
            End If

            If settings.kolumnaTonerBkON Then
                DataGridView1.Columns("Toner BK").Visible = True
            Else
                DataGridView1.Columns("Toner BK").Visible = False
            End If

            If settings.kolumnaTonerYON Then
                DataGridView1.Columns("Toner Y").Visible = True
            Else
                DataGridView1.Columns("Toner Y").Visible = False
            End If

            If settings.kolumnaTonerMON Then
                DataGridView1.Columns("Toner M").Visible = True
            Else
                DataGridView1.Columns("Toner M").Visible = False
            End If

            If settings.kolumnaTonerCON Then
                DataGridView1.Columns("Toner C").Visible = True
            Else
                DataGridView1.Columns("Toner C").Visible = False
            End If

            ' Wyłączenie sortowania dla kolumn
            Dim nonSortableColumns As String() = {"MAC", "Licznik M", "Licznik K", "Toner BK", "Toner Y", "Toner M", "Toner C"}
            For Each colName In nonSortableColumns
                If DataGridView1.Columns.Contains(colName) Then
                    DataGridView1.Columns(colName).SortMode = DataGridViewColumnSortMode.NotSortable
                End If
            Next

            originalDataSource = CType(DataGridView1.DataSource, DataTable)
            filteredData = originalDataSource.Clone()

            ' Ustalenie kierunku sortowania na podstawie ustawień
            Dim columnNameSort As String = ""
            Dim sortDirection As System.ComponentModel.ListSortDirection = System.ComponentModel.ListSortDirection.Ascending

            If settings.kolumnaSortAdresAscON Then
                columnNameSort = "Adres"
                sortDirection = System.ComponentModel.ListSortDirection.Ascending
            ElseIf settings.kolumnaSortAdresDescON Then
                columnNameSort = "Adres"
                sortDirection = System.ComponentModel.ListSortDirection.Descending
            ElseIf settings.kolumnaSortNazwaHostaAscON Then
                columnNameSort = "Nazwa hosta"
                sortDirection = System.ComponentModel.ListSortDirection.Ascending
            ElseIf settings.kolumnaSortNazwaHostaDescON Then
                columnNameSort = "Nazwa hosta"
                sortDirection = System.ComponentModel.ListSortDirection.Descending
            ElseIf settings.kolumnaSortUrzadzenieAscON Then
                columnNameSort = "Urządzenie"
                sortDirection = System.ComponentModel.ListSortDirection.Ascending
            ElseIf settings.kolumnaSortUrzadzenieDescON Then
                columnNameSort = "Urządzenie"
                sortDirection = System.ComponentModel.ListSortDirection.Descending
            ElseIf settings.kolumnaSortSerialAscON Then
                columnNameSort = "Nr seryjny"
                sortDirection = System.ComponentModel.ListSortDirection.Ascending
            ElseIf settings.kolumnaSortSerialDescON Then
                columnNameSort = "Nr seryjny"
                sortDirection = System.ComponentModel.ListSortDirection.Descending
            ElseIf settings.kolumnaSortMiejscePostojuAscON Then
                columnNameSort = "Miejsce postoju"
                sortDirection = System.ComponentModel.ListSortDirection.Ascending
            ElseIf settings.kolumnaSortMiejscePostojuDescON Then
                columnNameSort = "Miejsce postoju"
                sortDirection = System.ComponentModel.ListSortDirection.Descending
            ElseIf settings.kolumnaSortDodatkoweInfoAscON Then
                columnNameSort = "Dodatkowe informacje"
                sortDirection = System.ComponentModel.ListSortDirection.Ascending
            ElseIf settings.kolumnaSortDodatkoweInfoDescON Then
                columnNameSort = "Dodatkowe informacje"
                sortDirection = System.ComponentModel.ListSortDirection.Descending
            End If

            ' Wykonanie sortowania po załadowaniu danych
            If DataGridView1.Columns.Contains(columnNameSort) Then
                DataGridView1.Sort(DataGridView1.Columns(columnNameSort), sortDirection)
            End If


            ' Jeśli jest pusta tabela
            If DataGridView1.Rows.Count = 0 Then
                ' CZCIONKI DLA NAGŁÓWKÓW KOLUMN
                DataGridView1.ColumnHeadersHeight = 30
                DataGridView1.ColumnHeadersDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter
                DataGridView1.ColumnHeadersDefaultCellStyle.Font = New System.Drawing.Font("Calibri", 12, System.Drawing.FontStyle.Bold)
            End If

        End If

        LabelOstatniOdczyt.Visible = True
        LabelOstatniTransfer.Visible = True
        LabelOstatniTransferText.Visible = True
        separator_Ust_Help.Visible = True
        separator_Odczyt_Transfer.Visible = True
        separator_Transfer_Dodaj.Visible = True
        separator_Dodaj_Szukaj.Visible = True
        separator_Szukaj_Tools.Visible = True
        separator_Tools_Ust.Visible = True
        btnSciema.Visible = True
        btnRefresh.Visible = True
        btnTransfer.Visible = True
        btnDodaj.Visible = True
        btnSzukaj.Visible = True
        btnTools.Visible = True
        btnUstawienia.Visible = True
        btnHelp.Visible = True

        Dim totalSerialNumbers As Integer = GetSerialNumberCount()
        Me.labelPanelBottomLiczbaAllText.Text = totalSerialNumbers
        StartScheduler()
    End Sub

    ' DODAJ NOWĄ DRUKARKĘ
    Private Sub btnDodaj_Click(sender As Object, e As EventArgs) Handles btnDodaj.Click

        btnDodaj.BackColor = Color.White

        ' Wczytaj ustawienia programu
        settings = LoadSettings()

        ' Tworzenie nowego formularza "Narzędzia"
        Dim detailsForm As New Form()
        detailsForm.Text = "Dodawanie urządzenia"
        detailsForm.StartPosition = FormStartPosition.CenterParent
        detailsForm.AutoSize = False
        detailsForm.Width = 900
        detailsForm.Height = 700
        detailsForm.MaximizeBox = False
        detailsForm.FormBorderStyle = FormBorderStyle.FixedDialog
        detailsForm.BackColor = kolorOkna
        detailsForm.Owner = Me

        ' Tworzenie panelu dla zawartości zakładek
        Dim contentPanel As New Panel()
        contentPanel.BackColor = Color.White
        contentPanel.Location = New System.Drawing.Point(211, 20)
        contentPanel.Size = New System.Drawing.Size(detailsForm.Width - 245, detailsForm.Height - 130)
        detailsForm.Controls.Add(contentPanel)

        ' Tworzenie dolnego panelu dla przycisków "Zapisz" i "Zakończ"
        Dim panelBottom As New Panel()
        panelBottom.BackColor = kolorOkna
        panelBottom.Size = New System.Drawing.Size(detailsForm.Width, 60)
        panelBottom.Dock = DockStyle.Bottom
        detailsForm.Controls.Add(panelBottom)

        Dim buttonZapisz As New Button()
        buttonZapisz.Text = "Zapisz"
        buttonZapisz.Size = New System.Drawing.Size(90, 32)
        buttonZapisz.BackColor = Color.FromArgb(0, 68, 102)
        buttonZapisz.ForeColor = Color.FromArgb(242, 242, 242)
        buttonZapisz.Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
        buttonZapisz.FlatAppearance.BorderSize = 0
        buttonZapisz.FlatStyle = FlatStyle.Flat
        buttonZapisz.Anchor = AnchorStyles.None
        buttonZapisz.Enabled = False

        Dim buttonAnuluj As New Button()
        buttonAnuluj.Text = "Zakończ"
        buttonAnuluj.Size = New System.Drawing.Size(90, 32)
        buttonAnuluj.BackColor = Color.FromArgb(0, 68, 102)
        buttonAnuluj.ForeColor = Color.FromArgb(242, 242, 242)
        buttonAnuluj.Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
        buttonAnuluj.FlatAppearance.BorderSize = 0
        buttonAnuluj.FlatStyle = FlatStyle.Flat
        buttonAnuluj.Anchor = AnchorStyles.None

        panelBottom.Controls.Add(buttonZapisz)
        panelBottom.Controls.Add(buttonAnuluj)

        buttonZapisz.Location = New System.Drawing.Point((panelBottom.Width - buttonZapisz.Width - buttonAnuluj.Width - 10) * 0.7, 10)
        buttonAnuluj.Location = New System.Drawing.Point(buttonZapisz.Location.X + buttonZapisz.Width + 10, 10)

        AddHandler buttonAnuluj.Click, Sub(senderAnuluj As Object, eAnuluj As EventArgs)
                                           detailsForm.Close()
                                           settings = LoadSettings()
                                       End Sub
        Dim buttonZakoncz As New Button()
        With buttonZakoncz
            .Text = "Zakończ"
            .DialogResult = DialogResult.OK
            .Size = New System.Drawing.Size(90, 30)
            .BackColor = Color.FromArgb(0, 68, 102)
            .ForeColor = Color.FromArgb(242, 242, 242)
            .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
            .FlatAppearance.BorderSize = 0
            .FlatStyle = FlatStyle.Flat
            .Anchor = AnchorStyles.None
        End With


        AddHandler buttonZakoncz.Click, Sub()
                                            detailsForm.Close()
                                        End Sub

        AddHandler detailsForm.FormClosed, AddressOf OnDetailsFormClosed

        ' Wywołanie metody do tworzenia zakładek i przycisków na formularzu Narzędzia
        CreateTabs_DodajDrukarke(detailsForm, contentPanel, buttonZapisz, buttonZakoncz)

        ' Wyświetlenie formularza jako modalne okno dialogowe
        detailsForm.ShowDialog()
    End Sub

    ' Funkcja odpowiedzialna za tworzenie zakładek i dodawanie ich do formularza Narzędzia
    Private Sub CreateTabs_DodajDrukarke(detailsForm As Form, contentPanel As Panel, buttonZapisz As Button, buttonZakoncz As Button)
        ' Tworzenie czterech przykładowych przycisków (zakładek)
        Dim button1 As New Button()

        ' Ustawienia przycisków z dłuższymi etykietami
        SetupButton(button1, "Dodawanie nowego urządzenia", 10, 20)

        ' Dodanie obsługi zdarzeń MouseEnter, MouseLeave i Click do każdego przycisku
        AddHandler button1.MouseEnter, Sub(sender As Object, e As EventArgs) HandleButtonHover(sender, e)
        AddHandler button1.MouseLeave, Sub(sender As Object, e As EventArgs) HandleButtonLeave(sender, e)
        AddHandler button1.Click, Sub(sender As Object, e As EventArgs) HandleButtonClick_DodajDrukarke(sender, contentPanel, 1, buttonZapisz, buttonZakoncz)

        ' Dodanie przycisków do nowego formularza (detailsForm)
        detailsForm.Controls.Add(button1)

        ' Dodanie separatorów między przyciskami
        Dim separator1 As New Panel()
        separator1.BackColor = kolorBorder ' Separator między przyciskami
        separator1.Size = New System.Drawing.Size(200, 2)
        separator1.Location = New System.Drawing.Point(10, 50)

        ' Dodajemy separatory do formularza
        detailsForm.Controls.Add(separator1)

        ' Wywołujemy funkcję kliknięcia dla pierwszego przycisku, aby był domyślnie aktywny
        HandleButtonClick_DodajDrukarke(button1, contentPanel, 1, buttonZapisz, buttonZakoncz)

        ' Dodanie obsługi zdarzenia Paint do panelu bocznego w celu rysowania borderu
        AddHandler contentPanel.Paint, AddressOf DrawPanelBorder
    End Sub

    ' Obsługa kliknięcia przycisków zakładek dla formularza Narzędzia
    Private Sub HandleButtonClick_DodajDrukarke(sender As Object, contentPanel As Panel, tabIndex As Integer, buttonZapisz As Button, buttonZakoncz As Button)
        ' Ustawienie aktywnego przycisku
        Dim clickedButton As Button = DirectCast(sender, Button)
        If currentActiveButton IsNot Nothing Then
            ' Resetowanie poprzedniego aktywnego przycisku
            currentActiveButton.BackColor = kolorButtons
            currentActiveButton.Size = New System.Drawing.Size(200, 30)
            currentActiveButton.FlatAppearance.BorderSize = 1
            currentActiveButton.FlatAppearance.BorderColor = kolorBorder
        End If

        ' Ustawienie nowego aktywnego przycisku
        currentActiveButton = clickedButton
        currentActiveButton.BackColor = Color.White
        currentActiveButton.Size = New System.Drawing.Size(220, 30)
        currentActiveButton.FlatAppearance.BorderSize = 0

        ' Dodanie rysowania borderu wokół aktywnego przycisku
        AddHandler currentActiveButton.Paint, AddressOf DrawButtonBorder

        ' Wyczyść zawartość panelu i wyświetl odpowiednią zawartość dla zakładki
        contentPanel.Controls.Clear()

        Select Case tabIndex

            Case 1

                Dim ramkaDodajUrzadzenieWprowadz As New GroupBox()
                With ramkaDodajUrzadzenieWprowadz
                    .Text = "Szukanie urządzenia"
                    .Size = New System.Drawing.Size(contentPanel.Width - 20, 170)
                    .Location = New System.Drawing.Point(10, 10)
                    .Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Bold)
                End With


                Dim textDodajUrzadzenieWprowadz As New Label()
                With textDodajUrzadzenieWprowadz
                    .Text = "Wprowadź adres IP lub nazwę hosta urządzenia"
                    .AutoSize = True
                    .Font = New System.Drawing.Font("Calibri", 12, System.Drawing.FontStyle.Bold)
                    .ForeColor = Color.Black
                End With


                Dim AdresDane As New TextBox()
                With AdresDane
                    .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                    .Size = New System.Drawing.Size(240, 28)
                    .TextAlign = HorizontalAlignment.Center
                    .ForeColor = Color.Black
                End With


                Dim buttonSzukajPrt As New Button()
                With buttonSzukajPrt
                    .Text = "Szukaj"
                    .Size = New System.Drawing.Size(75, 28)
                    .BackColor = Color.FromArgb(0, 68, 102)
                    .ForeColor = Color.FromArgb(242, 242, 242)
                    .Font = New System.Drawing.Font("Calibri", 11.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                    .FlatAppearance.BorderSize = 0
                    .FlatStyle = FlatStyle.Flat
                    .Anchor = AnchorStyles.None
                End With


                Dim labelUzupelnijPole As New Label()
                With labelUzupelnijPole
                    .Text = "Uzupełnij pole!"
                    .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                    .AutoSize = True
                    .ForeColor = Color.FromArgb(255, 64, 0)
                    .Visible = False
                End With


                Dim labelZnaleziono As New Label()
                With labelZnaleziono
                    .Text = "Znaleziono urządzenie!"
                    .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                    .AutoSize = True
                    .ForeColor = Color.FromArgb(12, 111, 29)
                    .Visible = False
                End With


                Dim labelNieZnaleziono As New Label()
                With labelNieZnaleziono
                    .Text = "Nie znaleziono urządzenia!"
                    .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                    .AutoSize = True
                    .ForeColor = Color.FromArgb(255, 64, 0)
                    .Visible = False
                End With


                Dim LabelDodanoUrzadzenie As New Label()
                With LabelDodanoUrzadzenie
                    .Text = "Pomyślnie dodano urządzenie!"
                    .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                    .AutoSize = True
                    .ForeColor = Color.FromArgb(12, 111, 29)
                    .Visible = False
                End With


                ramkaDodajUrzadzenieWprowadz.Controls.Add(textDodajUrzadzenieWprowadz)
                ramkaDodajUrzadzenieWprowadz.Controls.Add(AdresDane)
                ramkaDodajUrzadzenieWprowadz.Controls.Add(buttonSzukajPrt)
                ramkaDodajUrzadzenieWprowadz.Controls.Add(labelUzupelnijPole)
                ramkaDodajUrzadzenieWprowadz.Controls.Add(labelZnaleziono)
                ramkaDodajUrzadzenieWprowadz.Controls.Add(labelNieZnaleziono)
                ramkaDodajUrzadzenieWprowadz.Controls.Add(LabelDodanoUrzadzenie)
                contentPanel.Controls.Add(ramkaDodajUrzadzenieWprowadz)

                textDodajUrzadzenieWprowadz.Location = New System.Drawing.Point((ramkaDodajUrzadzenieWprowadz.Width - textDodajUrzadzenieWprowadz.Width) / 2, 25)
                AdresDane.Location = New System.Drawing.Point((ramkaDodajUrzadzenieWprowadz.Width - AdresDane.Width) / 2, textDodajUrzadzenieWprowadz.Location.Y + textDodajUrzadzenieWprowadz.Height + 20)
                buttonSzukajPrt.Location = New System.Drawing.Point(AdresDane.Location.X + AdresDane.Width + 20, AdresDane.Location.Y)
                labelUzupelnijPole.Location = New System.Drawing.Point((ramkaDodajUrzadzenieWprowadz.Width - labelUzupelnijPole.Width) / 2, AdresDane.Location.Y + AdresDane.Height + 20)
                labelZnaleziono.Location = New System.Drawing.Point((ramkaDodajUrzadzenieWprowadz.Width - labelZnaleziono.Width) / 2, AdresDane.Location.Y + AdresDane.Height + 20)
                labelNieZnaleziono.Location = New System.Drawing.Point((ramkaDodajUrzadzenieWprowadz.Width - labelNieZnaleziono.Width) / 2, AdresDane.Location.Y + AdresDane.Height + 20)
                LabelDodanoUrzadzenie.Location = New System.Drawing.Point((ramkaDodajUrzadzenieWprowadz.Width - LabelDodanoUrzadzenie.Width) / 2, AdresDane.Location.Y + AdresDane.Height + 20)

                Dim ramkaDodajUrzadzenieZnaleziono As New GroupBox()
                With ramkaDodajUrzadzenieZnaleziono
                    .Text = "Dane urządzenia"
                    .Size = New System.Drawing.Size(contentPanel.Width - 20, 350)
                    .Location = New System.Drawing.Point(10, ramkaDodajUrzadzenieWprowadz.Height + 30)
                    .Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Bold)
                    .Visible = False
                End With


                Dim labelUrzadzenie As New Label()
                With labelUrzadzenie
                    .Text = "Urządzenie:"
                    .Location = New System.Drawing.Point(60, 50)
                    .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                    .AutoSize = False
                    .Width = 200
                    .TextAlign = ContentAlignment.MiddleRight
                    .ForeColor = Color.Black
                End With


                Dim labelUrzadzenieDane As New Label()
                With labelUrzadzenieDane
                    .Location = New System.Drawing.Point(260, 50)
                    .Font = New System.Drawing.Font("Calibri", 14.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                    .AutoSize = True
                    .ForeColor = Color.Black
                End With


                Dim labelIpaddres As New Label()
                With labelIpaddres
                    .Text = "Adres IP:"
                    .Location = New System.Drawing.Point(60, 80)
                    .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                    .AutoSize = False
                    .Width = 200
                    .TextAlign = ContentAlignment.MiddleRight
                    .ForeColor = Color.Black
                End With


                Dim labelIpaddresDane As New Label()
                With labelIpaddresDane
                    .Location = New System.Drawing.Point(260, 80)
                    .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                    .AutoSize = True
                    .ForeColor = Color.Black
                End With


                Dim labelHostname As New Label()
                With labelHostname
                    .Text = "Nazwa hosta:"
                    .Location = New System.Drawing.Point(60, 110)
                    .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                    .AutoSize = False
                    .Width = 200
                    .TextAlign = ContentAlignment.MiddleRight
                    .ForeColor = Color.Black
                End With


                Dim labelHostnameDane As New Label()
                With labelHostnameDane
                    .Location = New System.Drawing.Point(260, 110)
                    .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                    .AutoSize = True
                    .ForeColor = Color.Black
                End With


                Dim labelSerial As New Label()
                With labelSerial
                    .Text = "Nr seryjny:"
                    .Location = New System.Drawing.Point(60, 140)
                    .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                    .AutoSize = False
                    .Width = 200
                    .TextAlign = ContentAlignment.MiddleRight
                    .ForeColor = Color.Black
                End With


                Dim labelSerialDane As New Label()
                With labelSerialDane
                    .Location = New System.Drawing.Point(260, 140)
                    .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                    .AutoSize = True
                    .ForeColor = Color.Black
                End With


                Dim labelMac As New Label()
                With labelMac
                    .Text = "MAC: "
                    .Location = New System.Drawing.Point(60, 170)
                    .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                    .AutoSize = False
                    .Width = 200
                    .TextAlign = ContentAlignment.MiddleRight
                    .ForeColor = Color.Black
                End With


                Dim labelMacDane As New Label()
                With labelMacDane
                    .Location = New System.Drawing.Point(260, 170)
                    .Font = New System.Drawing.Font("Calibri", 14.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                    .AutoSize = True
                    .ForeColor = Color.Black
                End With


                Dim labelMiejsce As New Label()
                With labelMiejsce
                    .Text = "Miejsce postoju:"
                    .Location = New System.Drawing.Point(60, 200)
                    .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                    .AutoSize = False
                    .Width = 200
                    .TextAlign = ContentAlignment.MiddleRight
                    .ForeColor = Color.Black
                End With


                Dim MiejsceDaneTextBox As New TextBox()
                With MiejsceDaneTextBox
                    .Location = New System.Drawing.Point(260, 200)
                    .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                    .AutoSize = False
                    .Visible = False
                    .Width = 280
                    .Height = 26
                    .TextAlign = HorizontalAlignment.Center
                    .ForeColor = Color.Black
                End With


                Dim MiejsceDaneComboBox As New ComboBox()
                With MiejsceDaneComboBox
                    .Location = New System.Drawing.Point(260, 200)
                    .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                    .AutoSize = False
                    .Visible = False
                    .Width = 280
                    .Height = 26
                    .ForeColor = Color.Black
                    .DropDownStyle = ComboBoxStyle.DropDownList
                    .DropDownHeight = 150
                End With

                Dim sortedItemsMiejsce As New List(Of String)()

                For Each pozycja As slMiejPost In settings.slownikMiejscePostoju
                    If Not String.IsNullOrEmpty(pozycja.MiejscePostoju) Then
                        sortedItemsMiejsce.Add(pozycja.MiejscePostoju)
                    End If
                Next

                sortedItemsMiejsce.Sort()
                MiejsceDaneComboBox.Items.AddRange(sortedItemsMiejsce.ToArray())

                Dim miejsceDane As Control = If(settings.slownikMiejscePostojuON, CType(MiejsceDaneComboBox, Control), CType(MiejsceDaneTextBox, Control))
                miejsceDane.Visible = False

                Dim labelInfo As New Label()
                With labelInfo
                    .Text = "Dodatkowe informacje:"
                    .Location = New System.Drawing.Point(60, 230)
                    .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                    .AutoSize = False
                    .Width = 200
                    .TextAlign = ContentAlignment.MiddleRight
                    .ForeColor = Color.Black
                End With


                Dim InfoDaneTextBox As New TextBox()
                With InfoDaneTextBox
                    .Location = New System.Drawing.Point(260, 230)
                    .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                    .AutoSize = False
                    .Visible = False
                    .Width = 280
                    .Height = 26
                    .TextAlign = HorizontalAlignment.Center
                    .ForeColor = Color.Black
                End With


                Dim InfoDaneComboBox As New ComboBox()
                With InfoDaneComboBox
                    .Location = New System.Drawing.Point(260, 230)
                    .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                    .AutoSize = False
                    .Visible = False
                    .Width = 280
                    .Height = 26
                    .ForeColor = Color.Black
                    .DropDownStyle = ComboBoxStyle.DropDownList
                    .DropDownHeight = 130
                End With


                Dim sortedItemsInfo As New List(Of String)()

                For Each pozycja As slDodInfo In settings.slownikDodatkoweInformacje
                    If Not String.IsNullOrEmpty(pozycja.DodatkoweInfo) Then
                        sortedItemsInfo.Add(pozycja.DodatkoweInfo)
                    End If
                Next

                sortedItemsInfo.Sort()
                InfoDaneComboBox.Items.AddRange(sortedItemsInfo.ToArray())

                Dim InfoDane As Control = If(settings.slownikDodatkoweInfoON, CType(InfoDaneComboBox, Control), CType(InfoDaneTextBox, Control))
                InfoDane.Visible = False

                ramkaDodajUrzadzenieZnaleziono.Controls.Add(labelUrzadzenie)
                ramkaDodajUrzadzenieZnaleziono.Controls.Add(labelUrzadzenieDane)
                ramkaDodajUrzadzenieZnaleziono.Controls.Add(labelIpaddres)
                ramkaDodajUrzadzenieZnaleziono.Controls.Add(labelIpaddresDane)
                ramkaDodajUrzadzenieZnaleziono.Controls.Add(labelHostname)
                ramkaDodajUrzadzenieZnaleziono.Controls.Add(labelHostnameDane)
                ramkaDodajUrzadzenieZnaleziono.Controls.Add(labelSerial)
                ramkaDodajUrzadzenieZnaleziono.Controls.Add(labelSerialDane)
                ramkaDodajUrzadzenieZnaleziono.Controls.Add(labelMac)
                ramkaDodajUrzadzenieZnaleziono.Controls.Add(labelMacDane)
                ramkaDodajUrzadzenieZnaleziono.Controls.Add(labelMiejsce)
                ramkaDodajUrzadzenieZnaleziono.Controls.Add(labelInfo)
                ramkaDodajUrzadzenieZnaleziono.Controls.Add(MiejsceDaneTextBox)
                ramkaDodajUrzadzenieZnaleziono.Controls.Add(MiejsceDaneComboBox)
                ramkaDodajUrzadzenieZnaleziono.Controls.Add(InfoDaneTextBox)
                ramkaDodajUrzadzenieZnaleziono.Controls.Add(InfoDaneComboBox)
                contentPanel.Controls.Add(ramkaDodajUrzadzenieZnaleziono)

                AddHandler buttonSzukajPrt.Click, Sub() 'USUNĄŁEM ASYNC SUB I CHYBA JST LEPIEJ TRZEBA TESTOWAĆ

                                                      labelZnaleziono.Visible = False
                                                      labelNieZnaleziono.Visible = False
                                                      labelUzupelnijPole.Visible = False
                                                      ramkaDodajUrzadzenieZnaleziono.Visible = False
                                                      Application.DoEvents()

                                                      If String.IsNullOrEmpty(AdresDane.Text) Then
                                                          labelZnaleziono.Visible = False
                                                          labelNieZnaleziono.Visible = False
                                                          labelUzupelnijPole.Visible = True
                                                          buttonZapisz.Enabled = False
                                                          LabelDodanoUrzadzenie.Visible = False
                                                          ramkaDodajUrzadzenieZnaleziono.Visible = False
                                                      Else
                                                          miejsceDane.Text = String.Empty
                                                          InfoDane.Text = String.Empty

                                                          Try
                                                              Dim printerInfo As PrinterInfo = GetPrinterInfo(AdresDane.Text)

                                                              If printerInfo IsNot Nothing Then

                                                                  labelNieZnaleziono.Visible = False
                                                                  labelUzupelnijPole.Visible = False
                                                                  labelZnaleziono.Visible = True
                                                                  ramkaDodajUrzadzenieZnaleziono.Visible = True
                                                                  miejsceDane.Visible = True
                                                                  InfoDane.Visible = True

                                                                  labelUrzadzenieDane.Text = printerInfo.MarkaModel
                                                                  labelHostnameDane.Text = printerInfo.Hostname
                                                                  labelSerialDane.Text = printerInfo.SerialNumber
                                                                  labelMacDane.Text = printerInfo.MAC

                                                                  If printerInfo.IPAddressDns = String.Empty Then
                                                                      labelIpaddresDane.Text = AdresDane.Text
                                                                  Else
                                                                      labelIpaddresDane.Text = printerInfo.IPAddressDns
                                                                  End If

                                                                  buttonZapisz.Enabled = True
                                                                  LabelDodanoUrzadzenie.Visible = False

                                                              Else
                                                                  labelNieZnaleziono.Visible = True
                                                                  labelUzupelnijPole.Visible = False
                                                                  labelZnaleziono.Visible = False
                                                                  buttonZapisz.Enabled = False
                                                                  LabelDodanoUrzadzenie.Visible = False
                                                                  ramkaDodajUrzadzenieZnaleziono.Visible = False
                                                              End If
                                                          Catch ex As Exception
                                                              Logger.Log("Trace: " & ex.Message)
                                                          End Try

                                                      End If
                                                  End Sub
                ' End Function))

                AddHandler buttonZapisz.Click, Sub()

                                                   If Not File.Exists(filePathExportData) Then

                                                       Dim newDane As New List(Of DaneToDatabase)()
                                                       Dim dane As New DaneToDatabase()
                                                       dane.SerialNumber = labelSerialDane.Text
                                                       newDane.Add(dane)

                                                       Dim updatedJson As String = JsonConvert.SerializeObject(newDane, Formatting.Indented)
                                                       File.WriteAllText(filePathExportData, updatedJson)
                                                   End If


                                                   If Not File.Exists(filePath) Then
                                                       Dim newDane As New List(Of Dane)()
                                                       Dim dane As New Dane()
                                                       dane.AdresIp = labelIpaddresDane.Text
                                                       dane.Hostname = labelHostnameDane.Text
                                                       dane.Urzadzenie = labelUrzadzenieDane.Text
                                                       dane.SerialNumber = labelSerialDane.Text
                                                       dane.Mac = labelMacDane.Text
                                                       dane.MiejscePostoju = miejsceDane.Text
                                                       dane.DodatkoweInfo = InfoDane.Text
                                                       newDane.Add(dane)

                                                       ' Serializacja listy obiektów do formatu JSON
                                                       Dim updatedJson As String = JsonConvert.SerializeObject(newDane, Formatting.Indented)

                                                       ' Zapisanie zaktualizowanej zawartości do pliku
                                                       File.WriteAllText(filePath, updatedJson)
                                                       labelZnaleziono.Visible = False
                                                       LabelDodanoUrzadzenie.Visible = True

                                                       Dim json As String = File.ReadAllText(filePath)
                                                       Dim jArray As JArray = JArray.Parse(json)
                                                       dataTable = New DataTable()
                                                       Dim columnNumbers As Integer() = {0, 1, 2, 3, 4, 5, 6} ' Numer kolumny, które chcesz pobrać
                                                       Dim columnNames As String() = {"Adres", "Nazwa hosta", "Urządzenie", "Nr seryjny", "MAC", "Miejsce postoju", "Dodatkowe informacje"} ' Nowe nazwy kolumn

                                                       ' Dodawanie kolumn do tabeli na podstawie nowych nazw
                                                       For Each columnName As String In columnNames
                                                           dataTable.Columns.Add(columnName)
                                                       Next

                                                       dataTable.Columns.Add("Status", GetType(String))
                                                       dataTable.Columns.Add("Licznik M", GetType(String))
                                                       dataTable.Columns.Add("Licznik K", GetType(String))
                                                       dataTable.Columns.Add("Toner BK", GetType(String))
                                                       dataTable.Columns.Add("Toner Y", GetType(String))
                                                       dataTable.Columns.Add("Toner M", GetType(String))
                                                       dataTable.Columns.Add("Toner C", GetType(String))


                                                       ' Dodanie nowej drukarki do DataGridView
                                                       Dim newRow As DataRow = dataTable.NewRow()
                                                       newRow("Adres") = dane.AdresIp
                                                       newRow("Nazwa hosta") = dane.Hostname
                                                       newRow("Urządzenie") = dane.Urzadzenie
                                                       newRow("Nr seryjny") = dane.SerialNumber
                                                       newRow("MAC") = dane.Mac
                                                       newRow("Miejsce postoju") = dane.MiejscePostoju
                                                       newRow("Dodatkowe informacje") = dane.DodatkoweInfo
                                                       ' Dodanie nowego wiersza do DataTable
                                                       dataTable.Rows.Add(newRow)
                                                       DataGridView1.DataSource = dataTable

                                                       UpdateDataSinglePrinter(dane.AdresIp, serial:=dane.SerialNumber, hostname:=dane.Hostname, miejscePostoju:=dane.MiejscePostoju, dodatkoweInfo:=dane.DodatkoweInfo)
                                                   Else

                                                       Dim readJson As String = File.ReadAllText(filePath)
                                                       Dim readJsonWartosc As List(Of Dane) = JsonConvert.DeserializeObject(Of List(Of Dane))(readJson)
                                                       Dim existingDane As Dane = readJsonWartosc.FirstOrDefault(Function(d) d.SerialNumber = labelSerialDane.Text)

                                                       Dim readJsonExportData As String = File.ReadAllText(filePathExportData)
                                                       Dim readJsonWartoscExportData As List(Of DaneToDatabase) = JsonConvert.DeserializeObject(Of List(Of DaneToDatabase))(readJsonExportData)
                                                       Dim existingDaneExportData As DaneToDatabase = readJsonWartoscExportData.FirstOrDefault(Function(d) d.SerialNumber = labelSerialDane.Text)

                                                       Dim jestSerial As Boolean = False
                                                       Dim jestAdres As Boolean = False
                                                       Dim nieMaAdres As Boolean = False
                                                       Dim nieMaHostname As Boolean = False
                                                       Dim jestHostname As Boolean = False

                                                       For Each dane In readJsonWartosc
                                                           If dane.SerialNumber = labelSerialDane.Text Then
                                                               jestSerial = True
                                                               If dane.AdresIp = labelIpaddresDane.Text Then
                                                                   jestAdres = True
                                                               Else
                                                                   nieMaAdres = True
                                                               End If
                                                               If dane.Hostname = labelHostnameDane.Text Then
                                                                   jestHostname = True
                                                               Else
                                                                   nieMaHostname = True
                                                               End If
                                                           End If
                                                       Next


                                                       Dim detailsForm1 As New Form()
                                                       With detailsForm1
                                                           .Text = "Alert"
                                                           .StartPosition = FormStartPosition.CenterParent
                                                           .AutoSize = False
                                                           .Width = 600
                                                           .Height = 350
                                                           .MaximizeBox = False
                                                           .FormBorderStyle = FormBorderStyle.FixedDialog
                                                           .BackColor = Color.White
                                                           .StartPosition = FormStartPosition.CenterScreen
                                                       End With

                                                       Dim questionIcon As System.Drawing.Image = My.Resources.questionIcon
                                                       Dim okIcon As System.Drawing.Image = My.Resources.okIcon
                                                       Dim infoIcon As System.Drawing.Image = My.Resources.infoIcon
                                                       Dim warningIcon As System.Drawing.Image = My.Resources.warningIcon

                                                       Dim iconPictureBox As New PictureBox()
                                                       With iconPictureBox
                                                           .Size = New System.Drawing.Size(108, 156)
                                                           .Location = New System.Drawing.Point(10, 60)
                                                           .SizeMode = PictureBoxSizeMode.StretchImage
                                                           .Image = questionIcon
                                                       End With


                                                       Dim labelMessage1 = New Label()
                                                       With labelMessage1
                                                           .Width = 450
                                                           .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Bold)
                                                           .ForeColor = Color.FromArgb(255, 64, 0)
                                                           .Location = New System.Drawing.Point(90, 30)
                                                           .TextAlign = ContentAlignment.MiddleCenter
                                                       End With


                                                       Dim labelMessage1a = New Label()
                                                       With labelMessage1a
                                                           .Text = "Poprawnie zaktualizowano dane urządzenia !"
                                                           .Width = 450
                                                           .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Bold)
                                                           .ForeColor = Color.FromArgb(12, 111, 29)
                                                           .Location = New System.Drawing.Point(90, 30)
                                                           .TextAlign = ContentAlignment.MiddleCenter
                                                           .Visible = False
                                                       End With


                                                       Dim labelMessage2 = New Label()
                                                       With labelMessage2
                                                           .Text = "Urządzenie:"
                                                           .Width = 160
                                                           .Font = New System.Drawing.Font("Calibri", 11.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                                                           .ForeColor = Color.Black
                                                           .Location = New System.Drawing.Point(140, 65)
                                                           .TextAlign = ContentAlignment.MiddleRight
                                                       End With


                                                       Dim labelMessage3 = New Label()
                                                       With labelMessage3
                                                           .AutoSize = True
                                                           .Font = New System.Drawing.Font("Calibri", 11.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                                                           .ForeColor = Color.Black
                                                           .Location = New System.Drawing.Point(300, 67)
                                                       End With


                                                       Dim labelMessage4 = New Label()
                                                       With labelMessage4
                                                           .Text = "Nr seryjny:"
                                                           .Width = 160
                                                           .Font = New System.Drawing.Font("Calibri", 11.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                                                           .ForeColor = Color.Black
                                                           .Location = New System.Drawing.Point(140, 85)
                                                           .TextAlign = ContentAlignment.MiddleRight
                                                       End With


                                                       Dim labelMessage5 = New Label()
                                                       With labelMessage5
                                                           .AutoSize = True
                                                           .Font = New System.Drawing.Font("Calibri", 11.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                                                           .ForeColor = Color.Black
                                                           .Location = New System.Drawing.Point(300, 87)
                                                       End With


                                                       Dim labelMessage6 = New Label()
                                                       With labelMessage6
                                                           .Text = "Adres IP: "
                                                           .Width = 160
                                                           .Font = New System.Drawing.Font("Calibri", 11.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                                                           .ForeColor = Color.Black
                                                           .Location = New System.Drawing.Point(140, 105)
                                                           .TextAlign = ContentAlignment.MiddleRight
                                                       End With


                                                       Dim labelMessage7 = New Label()
                                                       With labelMessage7
                                                           .AutoSize = True
                                                           .Font = New System.Drawing.Font("Calibri", 11.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                                                           .ForeColor = Color.Black
                                                           .Location = New System.Drawing.Point(300, 107)
                                                       End With


                                                       Dim labelMessage15 = New Label()
                                                       With labelMessage15
                                                           .Text = "Nazwa hosta: "
                                                           .Width = 160
                                                           .Font = New System.Drawing.Font("Calibri", 11.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                                                           .ForeColor = Color.Black
                                                           .Location = New System.Drawing.Point(140, 125)
                                                           .TextAlign = ContentAlignment.MiddleRight
                                                       End With


                                                       Dim labelMessage16 = New Label()
                                                       With labelMessage16
                                                           .AutoSize = True
                                                           .Font = New System.Drawing.Font("Calibri", 11.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                                                           .ForeColor = Color.Black
                                                           .Location = New System.Drawing.Point(300, 127)
                                                       End With


                                                       Dim labelMessage8 = New Label()
                                                       With labelMessage8
                                                           .Text = "Miejsce postoju:"
                                                           .Width = 160
                                                           .Font = New System.Drawing.Font("Calibri", 11.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                                                           .ForeColor = Color.Black
                                                           .Location = New System.Drawing.Point(140, 145)
                                                           .TextAlign = ContentAlignment.MiddleRight
                                                       End With


                                                       Dim labelMessage9 = New Label()
                                                       With labelMessage9
                                                           .AutoSize = True
                                                           .Font = New System.Drawing.Font("Calibri", 11.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                                                           .ForeColor = Color.Black
                                                           .Location = New System.Drawing.Point(300, 147)
                                                       End With


                                                       Dim labelMessage10 = New Label()
                                                       With labelMessage10
                                                           .Text = "Dodatkowe informacje:"
                                                           .Width = 160
                                                           .Font = New System.Drawing.Font("Calibri", 11.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                                                           .ForeColor = Color.Black
                                                           .Location = New System.Drawing.Point(140, 165)
                                                           .TextAlign = ContentAlignment.MiddleRight
                                                       End With


                                                       Dim labelMessage11 = New Label()
                                                       With labelMessage11
                                                           .AutoSize = True
                                                           .Font = New System.Drawing.Font("Calibri", 11.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                                                           .ForeColor = Color.Black
                                                           .Location = New System.Drawing.Point(300, 167)
                                                       End With


                                                       Dim labelMessage12 = New Label()
                                                       With labelMessage12
                                                           .Width = 450
                                                           .ForeColor = Color.Black
                                                           .TextAlign = ContentAlignment.MiddleCenter
                                                       End With


                                                       Dim labelMessage13 = New Label()
                                                       With labelMessage13
                                                           .Width = 450
                                                           .Font = New System.Drawing.Font("Calibri", 9.0!, System.Drawing.FontStyle.Regular)
                                                           .ForeColor = Color.Black
                                                           .Location = New System.Drawing.Point(80, 210)
                                                           .TextAlign = ContentAlignment.MiddleCenter
                                                       End With

                                                       Dim panelBottom1 As New Panel()
                                                       With panelBottom1
                                                           .Dock = DockStyle.Bottom
                                                           .Height = 60
                                                           .BackColor = Color.FromArgb(235, 235, 224)
                                                       End With

                                                       With buttonZakoncz
                                                           .Visible = False
                                                           .Text = "Zakończ"
                                                           .DialogResult = DialogResult.OK
                                                           .Size = New System.Drawing.Size(90, 30)
                                                           .BackColor = Color.FromArgb(0, 68, 102)
                                                           .ForeColor = Color.FromArgb(242, 242, 242)
                                                           .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                                                           .FlatAppearance.BorderSize = 0
                                                           .FlatStyle = FlatStyle.Flat
                                                           .Anchor = AnchorStyles.None
                                                       End With

                                                       Dim buttonAnuluj = New Button()
                                                       With buttonAnuluj
                                                           .Visible = False
                                                           .Text = "Anuluj"
                                                           .DialogResult = DialogResult.OK
                                                           .Size = New System.Drawing.Size(90, 30)
                                                           .BackColor = Color.FromArgb(0, 68, 102)
                                                           .ForeColor = Color.FromArgb(242, 242, 242)
                                                           .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                                                           .FlatAppearance.BorderSize = 0
                                                           .FlatStyle = FlatStyle.Flat
                                                           .Anchor = AnchorStyles.None
                                                       End With

                                                       Dim buttonEdytujUrzadzenie = New Button()
                                                       With buttonEdytujUrzadzenie
                                                           .Text = "Aktualizuj"
                                                           .Size = New System.Drawing.Size(90, 30)
                                                           .BackColor = Color.FromArgb(0, 68, 102)
                                                           .ForeColor = Color.FromArgb(242, 242, 242)
                                                           .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                                                           .FlatAppearance.BorderSize = 0
                                                           .FlatStyle = FlatStyle.Flat
                                                           .Anchor = AnchorStyles.None
                                                       End With

                                                       detailsForm1.Controls.Add(iconPictureBox)
                                                       detailsForm1.Controls.Add(labelMessage1)
                                                       detailsForm1.Controls.Add(labelMessage1a)
                                                       detailsForm1.Controls.Add(labelMessage2)
                                                       detailsForm1.Controls.Add(labelMessage3)
                                                       detailsForm1.Controls.Add(labelMessage4)
                                                       detailsForm1.Controls.Add(labelMessage5)
                                                       detailsForm1.Controls.Add(labelMessage6)
                                                       detailsForm1.Controls.Add(labelMessage7)
                                                       detailsForm1.Controls.Add(labelMessage15)
                                                       detailsForm1.Controls.Add(labelMessage8)
                                                       detailsForm1.Controls.Add(labelMessage16)
                                                       detailsForm1.Controls.Add(labelMessage9)
                                                       detailsForm1.Controls.Add(labelMessage10)
                                                       detailsForm1.Controls.Add(labelMessage11)
                                                       detailsForm1.Controls.Add(labelMessage12)
                                                       detailsForm1.Controls.Add(labelMessage13)
                                                       detailsForm1.Controls.Add(panelBottom1)
                                                       panelBottom1.Controls.Add(buttonZakoncz)
                                                       panelBottom1.Controls.Add(buttonAnuluj)
                                                       panelBottom1.Controls.Add(buttonEdytujUrzadzenie)

                                                       If existingDane IsNot Nothing Then
                                                           labelMessage3.Text = readJsonWartosc.First(Function(d) d.SerialNumber = labelSerialDane.Text).Urzadzenie
                                                           labelMessage5.Text = readJsonWartosc.First(Function(d) d.SerialNumber = labelSerialDane.Text).SerialNumber
                                                           labelMessage7.Text = readJsonWartosc.First(Function(d) d.SerialNumber = labelSerialDane.Text).AdresIp
                                                           labelMessage16.Text = readJsonWartosc.First(Function(d) d.SerialNumber = labelSerialDane.Text).Hostname
                                                           labelMessage9.Text = readJsonWartosc.First(Function(d) d.SerialNumber = labelSerialDane.Text).MiejscePostoju
                                                           labelMessage11.Text = readJsonWartosc.First(Function(d) d.SerialNumber = labelSerialDane.Text).DodatkoweInfo
                                                       End If

                                                       If existingDaneExportData IsNot Nothing Then
                                                           labelMessage5.Text = readJsonWartoscExportData.First(Function(d) d.SerialNumber = labelSerialDane.Text).SerialNumber
                                                       End If

                                                       If settings.sposobOdczytuManual Then
                                                           labelMessage12.Text = "Czy chcesz zaktualizować dane w systemie ?"
                                                           labelMessage12.Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Bold)
                                                           labelMessage12.Location = New System.Drawing.Point(80, 190)
                                                           labelMessage13.Text = "(dane urządzenia zostaną nadpisane aktualnymi)"

                                                       ElseIf settings.sposobOdczytuAuto AndAlso jestSerial AndAlso jestHostname AndAlso jestAdres Then
                                                           labelMessage12.Text = "Czy chcesz zaktualizować dane w systemie ?"
                                                           labelMessage12.Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Bold)
                                                           labelMessage12.Location = New System.Drawing.Point(80, 190)
                                                           labelMessage13.Text = "(dane urządzenia zostaną nadpisane aktualnymi)"

                                                       ElseIf settings.sposobOdczytuAuto Then
                                                           labelMessage12.Text = "Ustawienia systemowe nie pozwalają na aktualizację danych"
                                                           labelMessage12.Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Bold)
                                                           labelMessage12.Location = New System.Drawing.Point(80, 190)
                                                           labelMessage13.Text = "(dane urządzenia zostaną zaktualizowene podczas najbliższego odczytu)"
                                                           iconPictureBox.Size = New System.Drawing.Size(118, 118)
                                                           iconPictureBox.Image = infoIcon
                                                           buttonEdytujUrzadzenie.Enabled = False
                                                           buttonAnuluj.Text = "Zakończ"
                                                       End If

                                                       buttonEdytujUrzadzenie.Location = New System.Drawing.Point((panelBottom1.Width - buttonEdytujUrzadzenie.Width - buttonZakoncz.Width - 10) \ 2, 15)
                                                       buttonZakoncz.Location = New System.Drawing.Point(buttonEdytujUrzadzenie.Location.X + buttonEdytujUrzadzenie.Width + 10, 15)
                                                       buttonAnuluj.Location = New System.Drawing.Point(buttonEdytujUrzadzenie.Location.X + buttonEdytujUrzadzenie.Width + 10, 15)

                                                       AddHandler buttonAnuluj.Click, Sub()
                                                                                          detailsForm1.Close()
                                                                                      End Sub

                                                       AddHandler buttonEdytujUrzadzenie.Click, Sub()
                                                                                                    iconPictureBox.Image = Nothing
                                                                                                    Application.DoEvents()
                                                                                                    iconPictureBox.Size = New System.Drawing.Size(134, 126)
                                                                                                    iconPictureBox.Image = okIcon

                                                                                                    '  If existingDaneExportData IsNot Nothing Then
                                                                                                    '      ' Aktualizacja istniejącego obiektu
                                                                                                    '      existingDaneExportData.AdresIp = AdresDane.Text
                                                                                                    '      existingDaneExportData.Urzadzenie = labelUrzadzenieDane.Text
                                                                                                    '      existingDaneExportData.Hostname = labelHostnameDane.Text
                                                                                                    '      existingDaneExportData.Mac = labelMacDane.Text
                                                                                                    '      existingDaneExportData.MiejscePostoju = miejsceDane.Text
                                                                                                    '      existingDaneExportData.DodatkoweInfo = InfoDane.Text
                                                                                                    '
                                                                                                    '      Dim updatedJson1 As String = JsonConvert.SerializeObject(readJsonWartoscExportData, Formatting.Indented)
                                                                                                    '      File.WriteAllText(filePathExportData, updatedJson1)
                                                                                                    '  End If


                                                                                                    If existingDane IsNot Nothing Then
                                                                                                        ' Aktualizacja istniejącego obiektu
                                                                                                        existingDane.AdresIp = AdresDane.Text
                                                                                                        existingDane.Urzadzenie = labelUrzadzenieDane.Text
                                                                                                        existingDane.Hostname = labelHostnameDane.Text
                                                                                                        existingDane.Mac = labelMacDane.Text
                                                                                                        existingDane.MiejscePostoju = miejsceDane.Text
                                                                                                        existingDane.DodatkoweInfo = InfoDane.Text

                                                                                                        Dim updatedJson As String = JsonConvert.SerializeObject(readJsonWartosc, Formatting.Indented)
                                                                                                        File.WriteAllText(filePath, updatedJson)
                                                                                                    End If


                                                                                                    labelMessage1.Visible = False
                                                                                                    labelMessage1a.Visible = True
                                                                                                    buttonEdytujUrzadzenie.Enabled = False
                                                                                                    labelMessage3.Text = existingDane.Urzadzenie
                                                                                                    labelMessage5.Text = existingDane.SerialNumber
                                                                                                    labelMessage7.Text = existingDane.AdresIp
                                                                                                    labelMessage16.Text = existingDane.Hostname
                                                                                                    labelMessage9.Text = existingDane.MiejscePostoju
                                                                                                    labelMessage11.Text = existingDane.DodatkoweInfo
                                                                                                    labelMessage12.Visible = False
                                                                                                    labelMessage13.Visible = False
                                                                                                    buttonZakoncz.Visible = True
                                                                                                    buttonAnuluj.Visible = False

                                                                                                    UpdateDataSinglePrinter(existingDane.AdresIp, serial:=existingDane.SerialNumber, hostname:=existingDane.Hostname, miejscePostoju:=existingDane.MiejscePostoju, dodatkoweInfo:=existingDane.DodatkoweInfo)

                                                                                                End Sub

                                                       If jestSerial AndAlso nieMaHostname AndAlso nieMaAdres Then

                                                           labelMessage1.Text = "Urządzenie istnieje w systemie z innym adresem i nazwą hosta !"
                                                           buttonAnuluj.Visible = True

                                                           detailsForm1.ShowDialog()

                                                       ElseIf jestSerial AndAlso jestHostname AndAlso nieMaAdres Then

                                                           labelMessage1.Text = "Urządzenie istnieje w systemie z innym adresem !"
                                                           buttonAnuluj.Visible = True

                                                           detailsForm1.ShowDialog()

                                                       ElseIf jestSerial AndAlso jestAdres AndAlso nieMaHostname Then

                                                           labelMessage1.Text = "Urządzenie istnieje w systemie z inną nazwą hosta !"
                                                           buttonAnuluj.Visible = True

                                                           detailsForm1.ShowDialog()

                                                       ElseIf jestSerial AndAlso jestHostname AndAlso jestAdres Then

                                                           labelMessage1.Text = "Urządzenie już istnieje w systemie !"
                                                           buttonAnuluj.Visible = True

                                                           detailsForm1.ShowDialog()

                                                       Else

                                                           Dim jsonExportData As String = File.ReadAllText(filePathExportData)
                                                           Dim wartoscExportData As List(Of DaneToDatabase) = JsonConvert.DeserializeObject(Of List(Of DaneToDatabase))(jsonExportData)

                                                           Dim daneExportData As New DaneToDatabase()
                                                           daneExportData.SerialNumber = labelSerialDane.Text
                                                           daneExportData.CzyKolor = False
                                                           daneExportData.LicznikM = Nothing
                                                           daneExportData.LicznikK = Nothing
                                                           daneExportData.PercentTonerBk = ""
                                                           daneExportData.PercentTonerY = ""
                                                           daneExportData.PercentTonerM = ""
                                                           daneExportData.PercentTonerC = ""
                                                           daneExportData.Status = True
                                                           wartoscExportData.Add(daneExportData)

                                                           Dim updatedJson1 As String = JsonConvert.SerializeObject(wartoscExportData, Formatting.Indented)
                                                           File.WriteAllText(filePathExportData, updatedJson1)


                                                           Dim json As String = File.ReadAllText(filePath)
                                                           Dim wartosc As List(Of Dane) = JsonConvert.DeserializeObject(Of List(Of Dane))(json)

                                                           Dim dane As New Dane()
                                                           dane.AdresIp = labelIpaddresDane.Text
                                                           dane.Hostname = labelHostnameDane.Text
                                                           dane.Urzadzenie = labelUrzadzenieDane.Text
                                                           dane.SerialNumber = labelSerialDane.Text
                                                           dane.Mac = labelMacDane.Text
                                                           dane.MiejscePostoju = miejsceDane.Text
                                                           dane.DodatkoweInfo = InfoDane.Text

                                                           wartosc.Add(dane)

                                                           Dim updatedJson As String = JsonConvert.SerializeObject(wartosc, Formatting.Indented)

                                                           File.WriteAllText(filePath, updatedJson)
                                                           labelZnaleziono.Visible = False
                                                           LabelDodanoUrzadzenie.Visible = True
                                                           buttonZapisz.Enabled = False

                                                           ' Dodanie nowej drukarki do DataGridView
                                                           Dim newRow As DataRow = dataTable.NewRow()
                                                           newRow("Adres") = dane.AdresIp
                                                           newRow("Nazwa hosta") = dane.Hostname
                                                           newRow("Urządzenie") = dane.Urzadzenie
                                                           newRow("Nr seryjny") = dane.SerialNumber
                                                           newRow("MAC") = dane.Mac
                                                           newRow("Miejsce postoju") = dane.MiejscePostoju
                                                           newRow("Dodatkowe informacje") = dane.DodatkoweInfo
                                                           ' Dodanie nowego wiersza do DataTable
                                                           dataTable.Rows.Add(newRow)
                                                           DataGridView1.DataSource = dataTable

                                                           UpdateDataSinglePrinter(dane.AdresIp, serial:=dane.SerialNumber, hostname:=dane.Hostname, miejscePostoju:=dane.MiejscePostoju, dodatkoweInfo:=dane.DodatkoweInfo)
                                                       End If
                                                   End If

                                               End Sub
                ' detailsForm.ShowDialog()

        End Select
    End Sub

    ' EDYTUJ URZĄDZENIE
    Private Sub EdytujUrzadzenie(sender As Object, e As EventArgs)

        ' Wczytaj ustawienia programu
        settings = LoadSettings()

        ' Tworzenie nowego formularza "Narzędzia"
        Dim detailsForm As New Form()
        detailsForm.Text = "Edycja urządzenia"
        detailsForm.StartPosition = FormStartPosition.CenterParent
        detailsForm.AutoSize = False
        detailsForm.Width = 900
        detailsForm.Height = 700
        detailsForm.MaximizeBox = False
        detailsForm.FormBorderStyle = FormBorderStyle.FixedDialog
        detailsForm.BackColor = kolorOkna
        detailsForm.Owner = Me

        ' Tworzenie panelu dla zawartości zakładek
        Dim contentPanel As New Panel()
        contentPanel.BackColor = Color.White
        contentPanel.Location = New System.Drawing.Point(211, 20)
        contentPanel.Size = New System.Drawing.Size(detailsForm.Width - 245, detailsForm.Height - 130)
        detailsForm.Controls.Add(contentPanel)

        ' Tworzenie dolnego panelu dla przycisków "Zapisz" i "Zakończ"
        Dim panelBottom As New Panel()
        panelBottom.BackColor = kolorOkna
        panelBottom.Size = New System.Drawing.Size(detailsForm.Width, 60)
        panelBottom.Dock = DockStyle.Bottom
        detailsForm.Controls.Add(panelBottom)

        Dim buttonZapisz As New Button()
        buttonZapisz.Text = "Zapisz"
        buttonZapisz.Size = New System.Drawing.Size(90, 32)
        buttonZapisz.BackColor = Color.FromArgb(0, 68, 102)
        buttonZapisz.ForeColor = Color.FromArgb(242, 242, 242)
        buttonZapisz.Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
        buttonZapisz.FlatAppearance.BorderSize = 0
        buttonZapisz.FlatStyle = FlatStyle.Flat
        buttonZapisz.Anchor = AnchorStyles.None
        buttonZapisz.Enabled = True

        Dim buttonAnuluj As New Button()
        buttonAnuluj.Text = "Zakończ"
        buttonAnuluj.Size = New System.Drawing.Size(90, 32)
        buttonAnuluj.BackColor = Color.FromArgb(0, 68, 102)
        buttonAnuluj.ForeColor = Color.FromArgb(242, 242, 242)
        buttonAnuluj.Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
        buttonAnuluj.FlatAppearance.BorderSize = 0
        buttonAnuluj.FlatStyle = FlatStyle.Flat
        buttonAnuluj.Anchor = AnchorStyles.None

        panelBottom.Controls.Add(buttonZapisz)
        panelBottom.Controls.Add(buttonAnuluj)

        buttonZapisz.Location = New System.Drawing.Point((panelBottom.Width - buttonZapisz.Width - buttonAnuluj.Width - 10) * 0.7, 10)
        buttonAnuluj.Location = New System.Drawing.Point(buttonZapisz.Location.X + buttonZapisz.Width + 10, 10)

        detailsForm.ActiveControl = buttonZapisz

        AddHandler buttonAnuluj.Click, Sub(senderAnuluj As Object, eAnuluj As EventArgs)
                                           detailsForm.Close()
                                           settings = LoadSettings()
                                       End Sub

        Dim buttonZakoncz As New Button()
        With buttonZakoncz
            .Text = "Zakończ"
            .DialogResult = DialogResult.OK
            .Size = New System.Drawing.Size(90, 30)
            .BackColor = Color.FromArgb(0, 68, 102)
            .ForeColor = Color.FromArgb(242, 242, 242)
            .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
            .FlatAppearance.BorderSize = 0
            .FlatStyle = FlatStyle.Flat
            .Anchor = AnchorStyles.None
        End With


        AddHandler buttonZakoncz.Click, Sub()
                                            detailsForm.Close()
                                        End Sub

        ' Wywołanie metody do tworzenia zakładek i przycisków na formularzu Narzędzia
        CreateTabs_EdytujUrzadzenie(detailsForm, contentPanel, buttonZapisz, buttonZakoncz)


        ' Wyświetlenie formularza jako modalne okno dialogowe
        detailsForm.ShowDialog()

    End Sub

    ' Funkcja odpowiedzialna za tworzenie zakładek i dodawanie ich do formularza Narzędzia
    Private Sub CreateTabs_EdytujUrzadzenie(detailsForm As Form, contentPanel As Panel, buttonZapisz As Button, buttonZakoncz As Button)
        ' Tworzenie czterech przykładowych przycisków (zakładek)
        Dim button1 As New Button()

        ' Ustawienia przycisków z dłuższymi etykietami
        SetupButton(button1, "Edycja urządzenia", 10, 20)

        ' Dodanie obsługi zdarzeń MouseEnter, MouseLeave i Click do każdego przycisku
        AddHandler button1.MouseEnter, Sub(sender As Object, e As EventArgs) HandleButtonHover(sender, e)
        AddHandler button1.MouseLeave, Sub(sender As Object, e As EventArgs) HandleButtonLeave(sender, e)
        AddHandler button1.Click, Sub(sender As Object, e As EventArgs) HandleButtonClick_EdytujUrzadzenie(sender, contentPanel, 1, buttonZapisz, buttonZakoncz)

        detailsForm.Controls.Add(button1)

        ' Dodanie separatorów między przyciskami
        Dim separator1 As New Panel()
        separator1.BackColor = kolorBorder ' Separator między przyciskami
        separator1.Size = New System.Drawing.Size(200, 2)
        separator1.Location = New System.Drawing.Point(10, 50)

        ' Dodajemy separatory do formularza
        detailsForm.Controls.Add(separator1)

        ' Wywołujemy funkcję kliknięcia dla pierwszego przycisku, aby był domyślnie aktywny
        HandleButtonClick_EdytujUrzadzenie(button1, contentPanel, 1, buttonZapisz, buttonZakoncz)

        ' Dodanie obsługi zdarzenia Paint do panelu bocznego w celu rysowania borderu
        AddHandler contentPanel.Paint, AddressOf DrawPanelBorder
    End Sub

    ' Obsługa kliknięcia przycisków zakładek dla formularza Narzędzia
    Private Sub HandleButtonClick_EdytujUrzadzenie(sender As Object, contentPanel As Panel, tabIndex As Integer, buttonZapisz As Button, buttonZakoncz As Button)
        ' Ustawienie aktywnego przycisku
        Dim clickedButton As Button = DirectCast(sender, Button)
        If currentActiveButton IsNot Nothing Then
            ' Resetowanie poprzedniego aktywnego przycisku
            currentActiveButton.BackColor = kolorButtons
            currentActiveButton.Size = New System.Drawing.Size(200, 30)
            currentActiveButton.FlatAppearance.BorderSize = 1
            currentActiveButton.FlatAppearance.BorderColor = kolorBorder
        End If

        ' Ustawienie nowego aktywnego przycisku
        currentActiveButton = clickedButton
        currentActiveButton.BackColor = Color.White
        currentActiveButton.Size = New System.Drawing.Size(220, 30)
        currentActiveButton.FlatAppearance.BorderSize = 0

        ' Dodanie rysowania borderu wokół aktywnego przycisku
        AddHandler currentActiveButton.Paint, AddressOf DrawButtonBorder

        ' Wyczyść zawartość panelu i wyświetl odpowiednią zawartość dla zakładki
        contentPanel.Controls.Clear()

        Select Case tabIndex

            Case 1

                Dim selectedRow As DataGridViewRow = DataGridView1.CurrentRow
                If selectedRow IsNot Nothing Then
                    Dim address As String = selectedRow.Cells("Adres").Value.ToString()
                    Dim hostname As String = selectedRow.Cells("Nazwa hosta").Value.ToString()
                    Dim miejscePostoju As String = selectedRow.Cells("Miejsce postoju").Value.ToString()
                    Dim urzadzenie As String = selectedRow.Cells("Urządzenie").Value.ToString()
                    Dim serialNumber As String = selectedRow.Cells("Nr seryjny").Value.ToString()
                    Dim dodadkoweInfo As String = selectedRow.Cells("Dodatkowe informacje").Value.ToString()

                    Dim columnIndex As Integer = dataTable.Columns("MAC").Ordinal
                    Dim dataRow As DataRow = DirectCast(selectedRow.DataBoundItem, DataRowView).Row
                    Dim mac As String = dataRow(columnIndex).ToString()

                    Dim LabelDodanoUrzadzenie As New Label()
                    With LabelDodanoUrzadzenie
                        .Text = "Pomyślnie zaktualizowano dane urządzenia!"
                        .Font = New System.Drawing.Font("Calibri", 17.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                        .AutoSize = True
                        .ForeColor = Color.FromArgb(12, 111, 29)
                        .Visible = False
                    End With


                    Dim labelUrzadzenie As New Label()
                    With labelUrzadzenie
                        .Text = "Urządzenie: "
                        .Location = New System.Drawing.Point(75, 130)
                        .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                        .AutoSize = False
                        .Width = 200
                        .TextAlign = ContentAlignment.MiddleRight
                        .ForeColor = Color.Black
                    End With


                    Dim labelUrzadzenieDane As New Label()
                    With labelUrzadzenieDane
                        .Text = urzadzenie
                        .Location = New System.Drawing.Point(280, 130)
                        .Font = New System.Drawing.Font("Calibri", 15.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                        .AutoSize = False
                        .Width = 300
                        .ForeColor = Color.Black
                    End With


                    Dim labelSerial As New Label()
                    With labelSerial
                        .Text = "Nr seryjny: "
                        .Location = New System.Drawing.Point(75, 167)
                        .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                        .AutoSize = False
                        .Width = 200
                        .TextAlign = ContentAlignment.MiddleRight
                        .ForeColor = Color.Black
                    End With


                    Dim labelSerialDane As New Label()
                    With labelSerialDane
                        .Text = serialNumber
                        .Location = New System.Drawing.Point(280, 167)
                        .Font = New System.Drawing.Font("Calibri", 14.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                        .AutoSize = False
                        .Width = 300
                        .ForeColor = Color.Black
                    End With


                    Dim labelMac As New Label()
                    With labelMac
                        .Text = "MAC : "
                        .Location = New System.Drawing.Point(75, 204)
                        .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                        .AutoSize = False
                        .Width = 200
                        .TextAlign = ContentAlignment.MiddleRight
                        .ForeColor = Color.Black
                    End With


                    Dim labelMacDane As New Label()
                    With labelMacDane
                        .Text = mac
                        .Location = New System.Drawing.Point(280, 204)
                        .Font = New System.Drawing.Font("Calibri", 14.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                        .AutoSize = False
                        .Width = 300
                        .ForeColor = Color.Black
                    End With


                    Dim labelAdres As New Label()
                    With labelAdres
                        .Text = "Adres IP: "
                        .Location = New System.Drawing.Point(75, 241)
                        .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                        .AutoSize = False
                        .Width = 200
                        .TextAlign = ContentAlignment.MiddleRight
                        .ForeColor = Color.Black
                    End With


                    Dim AdresDane As New TextBox()
                    With AdresDane
                        .Text = address
                        .Location = New System.Drawing.Point(280, 241)
                        .Font = New System.Drawing.Font("Calibri", 14.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                        .AutoSize = False
                        .Width = 300
                        .Height = 30
                        .ForeColor = Color.Black
                    End With


                    Dim labelHostname As New Label()
                    With labelHostname
                        .Text = "Nazwa hosta: "
                        .Location = New System.Drawing.Point(75, 278)
                        .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                        .AutoSize = False
                        .Width = 200
                        .TextAlign = ContentAlignment.MiddleRight
                        .ForeColor = Color.Black
                    End With


                    Dim labelHostnameDane As New TextBox()
                    With labelHostnameDane
                        .Text = hostname
                        .Location = New System.Drawing.Point(280, 278)
                        .Font = New System.Drawing.Font("Calibri", 14.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                        .AutoSize = False
                        .Width = 300
                        .Height = 30
                        .ForeColor = Color.Black
                    End With


                    Dim labelMiejsce As New Label()
                    With labelMiejsce
                        .Text = "Miejsce postoju: "
                        .Location = New System.Drawing.Point(75, 315)
                        .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                        .AutoSize = False
                        .Width = 200
                        .TextAlign = ContentAlignment.MiddleRight
                        .ForeColor = Color.Black
                    End With


                    Dim MiejsceDaneTextBox As New TextBox()
                    With MiejsceDaneTextBox
                        .Text = miejscePostoju
                        .Location = New System.Drawing.Point(280, 315)
                        .Font = New System.Drawing.Font("Calibri", 14.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                        .AutoSize = False
                        .Visible = False
                        .Width = 300
                        .Height = 30
                        .TextAlign = HorizontalAlignment.Center
                        .ForeColor = Color.Black
                    End With


                    Dim MiejsceDaneComboBox As New ComboBox()
                    With MiejsceDaneComboBox
                        .Location = New System.Drawing.Point(280, 315)
                        .Font = New System.Drawing.Font("Calibri", 14.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                        .AutoSize = False
                        .Visible = False
                        .Width = 300
                        .Height = 30
                        .ForeColor = Color.Black
                        .DropDownStyle = ComboBoxStyle.DropDownList ' Ustaw styl ComboBox
                        .DropDownHeight = 150
                    End With


                    MiejsceDaneComboBox.Items.Clear()
                    MiejsceDaneComboBox.Items.Add(miejscePostoju)

                    Dim sortedItemsMiejsce As List(Of String) = New List(Of String)()

                    For Each pozycja As slMiejPost In settings.slownikMiejscePostoju
                        If Not String.IsNullOrEmpty(pozycja.MiejscePostoju) AndAlso Not pozycja.MiejscePostoju.Equals(miejscePostoju) Then
                            sortedItemsMiejsce.Add(pozycja.MiejscePostoju)
                        End If
                    Next

                    sortedItemsMiejsce.Sort()

                    MiejsceDaneComboBox.Items.AddRange(sortedItemsMiejsce.ToArray())
                    MiejsceDaneComboBox.SelectedIndex = 0

                    Dim miejsceDane As Control = If(settings.slownikMiejscePostojuON, CType(MiejsceDaneComboBox, Control), CType(MiejsceDaneTextBox, Control))
                    miejsceDane.Visible = True

                    Dim labelInfo As New Label()
                    With labelInfo
                        .Text = "Dodatkowe informacje: "
                        .Location = New System.Drawing.Point(75, 352)
                        .Font = New System.Drawing.Font("Calibri", 14.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                        .AutoSize = False
                        .Width = 200
                        .TextAlign = ContentAlignment.MiddleRight
                        .ForeColor = Color.Black
                    End With


                    Dim InfoDaneTextBox As New TextBox()
                    With InfoDaneTextBox
                        .Text = dodadkoweInfo
                        .Location = New System.Drawing.Point(280, 352)
                        .Font = New System.Drawing.Font("Calibri", 14.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                        .AutoSize = False
                        .Visible = False
                        .Width = 300
                        .Height = 30
                        .TextAlign = HorizontalAlignment.Center
                        .ForeColor = Color.Black
                    End With


                    Dim InfoDaneComboBox As New ComboBox()
                    With InfoDaneComboBox
                        .Location = New System.Drawing.Point(280, 352)
                        .Font = New System.Drawing.Font("Calibri", 14.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                        .AutoSize = False
                        .Visible = False
                        .Width = 300
                        .Height = 30
                        .ForeColor = Color.Black
                        .DropDownStyle = ComboBoxStyle.DropDownList
                        .DropDownHeight = 130
                    End With


                    InfoDaneComboBox.Items.Clear()
                    InfoDaneComboBox.Items.Add(dodadkoweInfo)

                    Dim sortedItemsInfo As List(Of String) = New List(Of String)()

                    For Each pozycja As slDodInfo In settings.slownikDodatkoweInformacje
                        If Not String.IsNullOrEmpty(pozycja.DodatkoweInfo) AndAlso Not pozycja.DodatkoweInfo.Equals(dodadkoweInfo) Then
                            sortedItemsInfo.Add(pozycja.DodatkoweInfo)
                        End If
                    Next

                    sortedItemsInfo.Sort()

                    InfoDaneComboBox.Items.AddRange(sortedItemsInfo.ToArray())
                    InfoDaneComboBox.SelectedIndex = 0

                    Dim InfoDane As Control = If(settings.slownikDodatkoweInfoON, CType(InfoDaneComboBox, Control), CType(InfoDaneTextBox, Control))
                    InfoDane.Visible = True

                    contentPanel.Controls.Add(LabelDodanoUrzadzenie)
                    contentPanel.Controls.Add(labelUrzadzenieDane)
                    contentPanel.Controls.Add(labelUrzadzenie)
                    contentPanel.Controls.Add(labelSerialDane)
                    contentPanel.Controls.Add(labelSerial)
                    contentPanel.Controls.Add(labelMacDane)
                    contentPanel.Controls.Add(labelMac)
                    contentPanel.Controls.Add(labelAdres)
                    contentPanel.Controls.Add(AdresDane)
                    contentPanel.Controls.Add(labelHostnameDane)
                    contentPanel.Controls.Add(labelHostname)
                    contentPanel.Controls.Add(labelMiejsce)
                    contentPanel.Controls.Add(labelInfo)
                    contentPanel.Controls.Add(MiejsceDaneTextBox)
                    contentPanel.Controls.Add(MiejsceDaneComboBox)
                    contentPanel.Controls.Add(InfoDaneTextBox)
                    contentPanel.Controls.Add(InfoDaneComboBox)

                    LabelDodanoUrzadzenie.Location = New System.Drawing.Point((contentPanel.Width - LabelDodanoUrzadzenie.Width) / 2, 50)


                    AddHandler AdresDane.KeyPress, Sub(sender2 As Object, e2 As KeyPressEventArgs)
                                                       RestrictToIpFormat(AdresDane, e2)
                                                   End Sub

                    AddHandler AdresDane.TextChanged, Sub()
                                                          ValidateIp(AdresDane, buttonZapisz)
                                                      End Sub

                    AddHandler MiejsceDaneComboBox.SelectedIndexChanged, Sub(senderobj As Object, e As EventArgs)
                                                                             buttonZapisz.Enabled = True
                                                                         End Sub

                    AddHandler InfoDaneComboBox.SelectedIndexChanged, Sub(senderobj As Object, e As EventArgs)
                                                                          buttonZapisz.Enabled = True
                                                                      End Sub

                    'ODCZYT USTAWIEŃ PROGRMU
                    If settings.sposobOdczytuAuto Then
                        AdresDane.Enabled = False
                        labelHostnameDane.Enabled = False
                    ElseIf settings.sposobOdczytuManual Then
                        AdresDane.Enabled = True
                        labelHostnameDane.Enabled = True

                    End If

                    ' Dodaj obsługę zdarzeń kliknięcia przycisków
                    AddHandler buttonZapisz.Click, Sub()
                                                       ' Tutaj dodaj kod obsługujący zapisanie zmian
                                                       Dim readJson As String = File.ReadAllText(filePath)
                                                       Dim readJsonWartosc As List(Of Dane) = JsonConvert.DeserializeObject(Of List(Of Dane))(readJson)
                                                       Dim existingSerial As Dane = readJsonWartosc.FirstOrDefault(Function(d) d.SerialNumber = labelSerialDane.Text)
                                                       Dim existingAdres As Dane = readJsonWartosc.FirstOrDefault(Function(d) d.AdresIp = AdresDane.Text)

                                                       Dim jestSerial As Boolean = False
                                                       Dim jestAdres As Boolean = False
                                                       Dim nieMaAdres As Boolean = False
                                                       Dim nieMaHostname As Boolean = False
                                                       Dim jestHostname As Boolean = False

                                                       For Each dane In readJsonWartosc
                                                           If dane.SerialNumber = labelSerialDane.Text Then
                                                               jestSerial = True
                                                               If dane.AdresIp = AdresDane.Text Then
                                                                   jestAdres = True
                                                               Else
                                                                   nieMaAdres = True
                                                               End If
                                                               If dane.Hostname = labelHostnameDane.Text Then
                                                                   jestHostname = True
                                                               Else
                                                                   nieMaHostname = True
                                                               End If
                                                           End If
                                                       Next

                                                       ' Zmienna do przechowywania poprzedniej wartości tekstu
                                                       Dim PreviousTextValue As String = miejsceDane.Text

                                                       ' Dodaj obsługę zdarzenia TextChanged dla MiejsceDane
                                                       AddHandler miejsceDane.TextChanged,
                                                           Sub(senderTextChanged As Object, eTextChanged As EventArgs)
                                                               ' Wartość tekstu została zmieniona, wykonaj działania
                                                               buttonZapisz.Enabled = True

                                                               ' Zapisz bieżącą wartość tekstu jako poprzednią
                                                               PreviousTextValue = miejsceDane.Text
                                                           End Sub

                                                       Dim PreviousTextValue1 As String = InfoDane.Text
                                                       AddHandler InfoDane.TextChanged,
                                                           Sub(senderTextChanged As Object, eTextChanged As EventArgs)
                                                               ' Wartość tekstu została zmieniona, wykonaj działania
                                                               buttonZapisz.Enabled = True

                                                               ' Zapisz bieżącą wartość tekstu jako poprzednią
                                                               PreviousTextValue1 = InfoDane.Text
                                                           End Sub

                                                       Dim PreviousTextValue2 As String = labelHostnameDane.Text
                                                       AddHandler labelHostnameDane.TextChanged,
                                                           Sub(senderTextChanged As Object, eTextChanged As EventArgs)
                                                               ' Wartość tekstu została zmieniona, wykonaj działania
                                                               buttonZapisz.Enabled = True

                                                               ' Zapisz bieżącą wartość tekstu jako poprzednią
                                                               PreviousTextValue2 = labelHostnameDane.Text
                                                           End Sub

                                                       Dim detailsForm1 As New Form()
                                                       With detailsForm1
                                                           .Text = "Alert"
                                                           .StartPosition = FormStartPosition.CenterParent
                                                           .AutoSize = False
                                                           .Width = 600
                                                           .Height = 350
                                                           .MaximizeBox = False
                                                           .FormBorderStyle = FormBorderStyle.FixedDialog
                                                           .BackColor = Color.White
                                                           .StartPosition = FormStartPosition.CenterScreen
                                                       End With


                                                       Dim questionIcon As System.Drawing.Image = My.Resources.questionIcon
                                                       Dim okIcon As System.Drawing.Image = My.Resources.okIcon
                                                       Dim infoIcon As System.Drawing.Image = My.Resources.infoIcon
                                                       Dim warningIcon As System.Drawing.Image = My.Resources.warningIcon

                                                       Dim iconPictureBox As New PictureBox()
                                                       With iconPictureBox
                                                           .Size = New System.Drawing.Size(108, 108)
                                                           .Location = New System.Drawing.Point(20, 80)
                                                           .SizeMode = PictureBoxSizeMode.StretchImage
                                                           .Image = warningIcon
                                                       End With


                                                       Dim labelZmieniasz = New Label()
                                                       With labelZmieniasz
                                                           .Visible = False
                                                           .Width = 450
                                                           .Font = New System.Drawing.Font("Calibri", 14.0!, System.Drawing.FontStyle.Bold)
                                                           .ForeColor = Color.FromArgb(255, 64, 0)
                                                           .Location = New System.Drawing.Point(100, 80)
                                                           .TextAlign = ContentAlignment.MiddleCenter
                                                       End With


                                                       Dim labelMessage1a = New Label()
                                                       With labelMessage1a
                                                           .Text = "Poprawnie zaktualizowano dane urządzenia !"
                                                           .Width = 450
                                                           .Font = New System.Drawing.Font("Calibri", 14.0!, System.Drawing.FontStyle.Bold)
                                                           .ForeColor = Color.FromArgb(12, 111, 29)
                                                           .Location = New System.Drawing.Point(100, 30)
                                                           .TextAlign = ContentAlignment.MiddleCenter
                                                           .Visible = False
                                                       End With

                                                       Dim labelMessage1b = New Label()
                                                       With labelMessage1b
                                                           .Text = "Adres jest przypisany do innego urządzenia !"
                                                           .Width = 450
                                                           .Font = New System.Drawing.Font("Calibri", 14.0!, System.Drawing.FontStyle.Bold)
                                                           .ForeColor = Color.FromArgb(255, 64, 0)
                                                           .Location = New System.Drawing.Point(100, 30)
                                                           .TextAlign = ContentAlignment.MiddleCenter
                                                           .Visible = False
                                                       End With

                                                       Dim labelMessage2 = New Label()
                                                       With labelMessage2
                                                           .Text = "Urządzenie:"
                                                           .Width = 160
                                                           .Visible = False
                                                           .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                                                           .ForeColor = Color.Black
                                                           .Location = New System.Drawing.Point(160, 65)
                                                           .TextAlign = ContentAlignment.MiddleRight
                                                       End With


                                                       Dim labelMessage3 = New Label()
                                                       With labelMessage3
                                                           .Text = readJsonWartosc.First(Function(d) d.SerialNumber = labelSerialDane.Text).Urzadzenie
                                                           .AutoSize = True
                                                           .Visible = False
                                                           .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                                                           .ForeColor = Color.Black
                                                           .Location = New System.Drawing.Point(320, 67)
                                                       End With


                                                       Dim labelMessage4 = New Label()
                                                       With labelMessage4
                                                           .Text = "Nr seryjny:"
                                                           .Width = 160
                                                           .Visible = False
                                                           .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                                                           .ForeColor = Color.Black
                                                           .Location = New System.Drawing.Point(160, 85)
                                                           .TextAlign = ContentAlignment.MiddleRight
                                                       End With


                                                       Dim labelMessage5 = New Label()
                                                       With labelMessage5
                                                           .Text = readJsonWartosc.First(Function(d) d.SerialNumber = labelSerialDane.Text).SerialNumber
                                                           .AutoSize = True
                                                           .Visible = False
                                                           .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                                                           .ForeColor = Color.Black
                                                           .Location = New System.Drawing.Point(320, 87)
                                                       End With


                                                       Dim labelMessage6 = New Label()
                                                       With labelMessage6
                                                           .Text = "Adres IP:"
                                                           .Width = 160
                                                           .Visible = False
                                                           .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                                                           .ForeColor = Color.Black
                                                           .Location = New System.Drawing.Point(160, 105)
                                                           .TextAlign = ContentAlignment.MiddleRight
                                                       End With


                                                       Dim labelMessage7 = New Label()
                                                       With labelMessage7
                                                           .AutoSize = True
                                                           .Visible = False
                                                           .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                                                           .ForeColor = Color.Black
                                                           .Location = New System.Drawing.Point(320, 107)
                                                       End With


                                                       Dim labelMessage15 = New Label()
                                                       With labelMessage15
                                                           .Text = "Nazwa hosta:"
                                                           .Width = 160
                                                           .Visible = False
                                                           .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                                                           .ForeColor = Color.Black
                                                           .Location = New System.Drawing.Point(160, 125)
                                                           .TextAlign = ContentAlignment.MiddleRight
                                                       End With


                                                       Dim labelMessage16 = New Label()
                                                       With labelMessage16
                                                           .Text = readJsonWartosc.First(Function(d) d.SerialNumber = labelSerialDane.Text).Hostname
                                                           .AutoSize = True
                                                           .Visible = False
                                                           .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                                                           .ForeColor = Color.Black
                                                           .Location = New System.Drawing.Point(320, 127)
                                                       End With


                                                       Dim labelMessage8 = New Label()
                                                       With labelMessage8
                                                           .Text = "Miejsce postoju:"
                                                           .Width = 160
                                                           .Visible = False
                                                           .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                                                           .ForeColor = Color.Black
                                                           .Location = New System.Drawing.Point(160, 145)
                                                           .TextAlign = ContentAlignment.MiddleRight
                                                       End With


                                                       Dim labelMessage9 = New Label()
                                                       With labelMessage9
                                                           .Text = readJsonWartosc.First(Function(d) d.SerialNumber = labelSerialDane.Text).MiejscePostoju
                                                           .AutoSize = True
                                                           .Visible = False
                                                           .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                                                           .ForeColor = Color.Black
                                                           .Location = New System.Drawing.Point(320, 147)
                                                       End With


                                                       Dim labelMessage10 = New Label()
                                                       With labelMessage10
                                                           .Text = "Dodatkowe informacje:"
                                                           .Width = 160
                                                           .Visible = False
                                                           .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                                                           .ForeColor = Color.Black
                                                           .Location = New System.Drawing.Point(160, 165)
                                                           .TextAlign = ContentAlignment.MiddleRight
                                                       End With


                                                       Dim labelMessage11 = New Label()
                                                       With labelMessage11
                                                           .Text = readJsonWartosc.First(Function(d) d.SerialNumber = labelSerialDane.Text).DodatkoweInfo
                                                           .AutoSize = True
                                                           .Visible = False
                                                           .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                                                           .ForeColor = Color.Black
                                                           .Location = New System.Drawing.Point(320, 167)
                                                       End With


                                                       Dim labelAbyMial = New Label()
                                                       With labelAbyMial
                                                           .Visible = False
                                                           .Text = "Aby system miał łączność z urządzeniem"
                                                           .Width = 450
                                                           .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Bold)
                                                           .ForeColor = Color.Black
                                                           .Location = New System.Drawing.Point(120, 140)
                                                           .TextAlign = ContentAlignment.MiddleCenter
                                                       End With


                                                       Dim labelMessage12 = New Label()
                                                       With labelMessage12
                                                           .Visible = False
                                                           .Text = "zaktualizuj dane w ustawieniach urządzenia!"
                                                           .Width = 450
                                                           .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Bold)
                                                           .ForeColor = Color.Black
                                                           .Location = New System.Drawing.Point(120, 165)
                                                           .TextAlign = ContentAlignment.MiddleCenter
                                                       End With


                                                       Dim labelMessage13 = New Label()
                                                       With labelMessage13
                                                           .Text = "(dane urządzenia zostaną nadpisane aktualnymi)"
                                                           .Width = 450
                                                           .Visible = False
                                                           .Font = New System.Drawing.Font("Calibri", 9.0!, System.Drawing.FontStyle.Regular)
                                                           .ForeColor = Color.Black
                                                           .Location = New System.Drawing.Point(0, 207)
                                                           .TextAlign = ContentAlignment.MiddleCenter
                                                       End With

                                                       Dim labelMessage13a = New Label()
                                                       With labelMessage13a
                                                           .Text = "Czy na pewno zapisać dane?"
                                                           .Width = 450
                                                           .Visible = False
                                                           .Font = New System.Drawing.Font("Calibri", 10.0!, System.Drawing.FontStyle.Bold)
                                                           .ForeColor = Color.Black
                                                           .Location = New System.Drawing.Point(80, 205)
                                                           .TextAlign = ContentAlignment.MiddleCenter
                                                       End With


                                                       Dim panelBottom1 As New Panel()
                                                       With panelBottom1
                                                           .Dock = DockStyle.Bottom
                                                           .Height = 60
                                                           .BackColor = Color.FromArgb(235, 235, 224)
                                                       End With


                                                       With buttonZakoncz
                                                           .Visible = False
                                                           .Text = "Zakończ"
                                                           .DialogResult = DialogResult.OK
                                                           .Size = New System.Drawing.Size(90, 30)
                                                           .BackColor = Color.FromArgb(0, 68, 102)
                                                           .ForeColor = Color.FromArgb(242, 242, 242)
                                                           .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                                                           .FlatAppearance.BorderSize = 0
                                                           .FlatStyle = FlatStyle.Flat
                                                           .Anchor = AnchorStyles.None
                                                       End With


                                                       Dim buttonAnuluj = New Button()
                                                       With buttonAnuluj
                                                           .Visible = False
                                                           .Text = "Anuluj"
                                                           .DialogResult = DialogResult.OK
                                                           .Size = New System.Drawing.Size(90, 30)
                                                           .BackColor = Color.FromArgb(0, 68, 102)
                                                           .ForeColor = Color.FromArgb(242, 242, 242)
                                                           .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                                                           .FlatAppearance.BorderSize = 0
                                                           .FlatStyle = FlatStyle.Flat
                                                           .Anchor = AnchorStyles.None
                                                       End With

                                                       Dim buttonEdytujUrzadzenie = New Button()
                                                       With buttonEdytujUrzadzenie
                                                           .Text = "Zapisz"
                                                           .Size = New System.Drawing.Size(90, 30)
                                                           .BackColor = Color.FromArgb(0, 68, 102)
                                                           .ForeColor = Color.FromArgb(242, 242, 242)
                                                           .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                                                           .FlatAppearance.BorderSize = 0
                                                           .FlatStyle = FlatStyle.Flat
                                                           .Anchor = AnchorStyles.None
                                                       End With


                                                       detailsForm1.Controls.Add(iconPictureBox)
                                                       detailsForm1.Controls.Add(labelZmieniasz)
                                                       detailsForm1.Controls.Add(labelMessage1a)
                                                       detailsForm1.Controls.Add(labelMessage1b)
                                                       detailsForm1.Controls.Add(labelMessage2)
                                                       detailsForm1.Controls.Add(labelMessage3)
                                                       detailsForm1.Controls.Add(labelMessage4)
                                                       detailsForm1.Controls.Add(labelMessage5)
                                                       detailsForm1.Controls.Add(labelMessage6)
                                                       detailsForm1.Controls.Add(labelMessage7)
                                                       detailsForm1.Controls.Add(labelMessage15)
                                                       detailsForm1.Controls.Add(labelMessage16)
                                                       detailsForm1.Controls.Add(labelMessage8)
                                                       detailsForm1.Controls.Add(labelMessage9)
                                                       detailsForm1.Controls.Add(labelMessage10)
                                                       detailsForm1.Controls.Add(labelMessage11)
                                                       detailsForm1.Controls.Add(labelMessage12)
                                                       detailsForm1.Controls.Add(labelMessage13)
                                                       detailsForm1.Controls.Add(labelMessage13a)
                                                       detailsForm1.Controls.Add(labelAbyMial)
                                                       detailsForm1.Controls.Add(panelBottom1)
                                                       panelBottom1.Controls.Add(buttonZakoncz)
                                                       panelBottom1.Controls.Add(buttonZakoncz)
                                                       panelBottom1.Controls.Add(buttonAnuluj)
                                                       panelBottom1.Controls.Add(buttonEdytujUrzadzenie)

                                                       buttonEdytujUrzadzenie.Location = New System.Drawing.Point((panelBottom1.Width - buttonEdytujUrzadzenie.Width - buttonZakoncz.Width - 10) \ 2, 15)
                                                       buttonZakoncz.Location = New System.Drawing.Point(buttonEdytujUrzadzenie.Location.X + buttonEdytujUrzadzenie.Width + 10, 15)
                                                       buttonAnuluj.Location = New System.Drawing.Point(buttonEdytujUrzadzenie.Location.X + buttonEdytujUrzadzenie.Width + 10, 15)

                                                       AddHandler buttonAnuluj.Click, Sub()
                                                                                          detailsForm1.Close()
                                                                                      End Sub
                                                       AddHandler buttonEdytujUrzadzenie.Click, Sub()
                                                                                                    iconPictureBox.Image = Nothing
                                                                                                    Application.DoEvents()
                                                                                                    iconPictureBox.Size = New System.Drawing.Size(134, 126)
                                                                                                    iconPictureBox.Image = okIcon

                                                                                                    If existingSerial IsNot Nothing Then
                                                                                                        ' Aktualizacja istniejącego obiektu
                                                                                                        existingSerial.AdresIp = AdresDane.Text
                                                                                                        existingSerial.Urzadzenie = labelUrzadzenieDane.Text
                                                                                                        existingSerial.Hostname = labelHostnameDane.Text
                                                                                                        existingSerial.Mac = labelMacDane.Text
                                                                                                        existingSerial.MiejscePostoju = miejsceDane.Text
                                                                                                        existingSerial.DodatkoweInfo = InfoDane.Text
                                                                                                    End If

                                                                                                    Dim updatedJson As String = JsonConvert.SerializeObject(readJsonWartosc, Formatting.Indented)
                                                                                                    File.WriteAllText(filePath, updatedJson)

                                                                                                    buttonZapisz.Enabled = False

                                                                                                    UpdateDataSinglePrinter(AdresDane.Text, serial:=labelSerialDane.Text, hostname:=labelHostnameDane.Text, miejscePostoju:=miejsceDane.Text, dodatkoweInfo:=InfoDane.Text)

                                                                                                    labelZmieniasz.Visible = False
                                                                                                    labelAbyMial.Visible = False
                                                                                                    labelMessage12.Visible = False
                                                                                                    labelMessage1a.Visible = True
                                                                                                    buttonEdytujUrzadzenie.Enabled = False
                                                                                                    labelMessage2.Visible = True
                                                                                                    labelMessage3.Visible = True
                                                                                                    labelMessage4.Visible = True
                                                                                                    labelMessage5.Visible = True
                                                                                                    labelMessage6.Visible = True
                                                                                                    labelMessage7.Visible = True
                                                                                                    labelMessage8.Visible = True
                                                                                                    labelMessage9.Visible = True
                                                                                                    labelMessage10.Visible = True
                                                                                                    labelMessage15.Visible = True
                                                                                                    labelMessage16.Visible = True
                                                                                                    labelMessage11.Visible = True
                                                                                                    labelMessage3.Text = existingSerial.Urzadzenie
                                                                                                    labelMessage5.Text = existingSerial.SerialNumber
                                                                                                    labelMessage7.Text = existingSerial.AdresIp
                                                                                                    labelMessage16.Text = existingSerial.Hostname
                                                                                                    labelMessage9.Text = existingSerial.MiejscePostoju
                                                                                                    labelMessage11.Text = existingSerial.DodatkoweInfo
                                                                                                    labelMessage13.Visible = False
                                                                                                    buttonAnuluj.Visible = False
                                                                                                    buttonZakoncz.Visible = True
                                                                                                End Sub

                                                       If jestSerial And nieMaHostname And jestAdres Then

                                                           labelZmieniasz.Visible = True
                                                           labelZmieniasz.Text = "Zmieniasz nazwę hosta urządzenia!"
                                                           labelAbyMial.Visible = True
                                                           labelMessage12.Visible = True
                                                           buttonAnuluj.Visible = True



                                                           detailsForm1.ShowDialog()

                                                       ElseIf jestSerial And jestHostname And nieMaAdres Then

                                                           labelZmieniasz.Visible = True
                                                           labelZmieniasz.Text = "Zmieniasz adres IP urządzenia!"
                                                           labelAbyMial.Visible = True
                                                           labelMessage12.Visible = True
                                                           buttonAnuluj.Visible = True

                                                           ' Sprawdzenie czy istnieje inne urządzenie o tym adresie
                                                           If existingAdres IsNot Nothing Then
                                                               labelMessage13a.Visible = True
                                                               labelZmieniasz.Visible = False
                                                               labelMessage1b.Visible = True
                                                               labelAbyMial.Visible = False
                                                               labelMessage12.Visible = False
                                                               buttonEdytujUrzadzenie.Enabled = True
                                                               labelMessage2.Visible = True
                                                               labelMessage3.Visible = True
                                                               labelMessage4.Visible = True
                                                               labelMessage5.Visible = True
                                                               labelMessage6.Visible = True
                                                               labelMessage7.Visible = True
                                                               labelMessage8.Visible = True
                                                               labelMessage9.Visible = True
                                                               labelMessage10.Visible = True
                                                               labelMessage15.Visible = True
                                                               labelMessage16.Visible = True
                                                               labelMessage11.Visible = True
                                                               labelMessage3.Text = existingAdres.Urzadzenie
                                                               labelMessage5.Text = existingAdres.SerialNumber
                                                               labelMessage7.Text = existingAdres.AdresIp
                                                               labelMessage16.Text = existingAdres.Hostname
                                                               labelMessage9.Text = existingAdres.MiejscePostoju
                                                               labelMessage11.Text = existingAdres.DodatkoweInfo
                                                           End If

                                                           detailsForm1.ShowDialog()


                                                       ElseIf jestSerial And nieMaHostname And nieMaAdres Then

                                                           labelZmieniasz.Visible = True
                                                           labelZmieniasz.Text = "Zmieniasz adres IP oraz nazwę hosta urządzenia!"
                                                           labelAbyMial.Visible = True
                                                           labelMessage12.Visible = True
                                                           buttonAnuluj.Visible = True

                                                           ' Sprawdzenie czy istnieje inne urządzenie o tym adresie
                                                           If existingAdres IsNot Nothing Then
                                                               labelMessage13a.Visible = True
                                                               labelZmieniasz.Visible = False
                                                               labelMessage1b.Visible = True
                                                               labelAbyMial.Visible = False
                                                               labelMessage12.Visible = False
                                                               buttonEdytujUrzadzenie.Enabled = True
                                                               labelMessage2.Visible = True
                                                               labelMessage3.Visible = True
                                                               labelMessage4.Visible = True
                                                               labelMessage5.Visible = True
                                                               labelMessage6.Visible = True
                                                               labelMessage7.Visible = True
                                                               labelMessage8.Visible = True
                                                               labelMessage9.Visible = True
                                                               labelMessage10.Visible = True
                                                               labelMessage15.Visible = True
                                                               labelMessage16.Visible = True
                                                               labelMessage11.Visible = True
                                                               labelMessage3.Text = existingAdres.Urzadzenie
                                                               labelMessage5.Text = existingAdres.SerialNumber
                                                               labelMessage7.Text = existingAdres.AdresIp
                                                               labelMessage16.Text = existingAdres.Hostname
                                                               labelMessage9.Text = existingAdres.MiejscePostoju
                                                               labelMessage11.Text = existingAdres.DodatkoweInfo
                                                           End If

                                                           detailsForm1.ShowDialog()

                                                       Else

                                                           If settings.sposobOdczytuAuto Then
                                                               Dim printerInfoIP As PrinterInfo = GetPrinterInfo(AdresDane.Text)
                                                               Dim printerInfoHostname As PrinterInfo = GetPrinterInfo(labelHostnameDane.Text)

                                                               If printerInfoIP IsNot Nothing OrElse printerInfoHostname IsNot Nothing Then
                                                                   Dim selectedPrinterInfo As PrinterInfo = If(printerInfoIP IsNot Nothing, printerInfoIP, printerInfoHostname)
                                                                   Dim adresCzyDns As Boolean = If(printerInfoIP IsNot Nothing, True, False)

                                                                   If existingSerial IsNot Nothing Then
                                                                       ' Aktualizacja istniejącego obiektu
                                                                       existingSerial.AdresIp = selectedPrinterInfo.IPAddressDns
                                                                       existingSerial.Urzadzenie = labelUrzadzenieDane.Text
                                                                       existingSerial.Hostname = selectedPrinterInfo.Hostname
                                                                       existingSerial.Mac = labelMacDane.Text
                                                                       existingSerial.MiejscePostoju = miejsceDane.Text
                                                                       existingSerial.DodatkoweInfo = InfoDane.Text
                                                                   End If

                                                               Else

                                                                   If existingSerial IsNot Nothing Then
                                                                       ' Aktualizacja istniejącego obiektu
                                                                       existingSerial.AdresIp = AdresDane.Text
                                                                       existingSerial.Urzadzenie = labelUrzadzenieDane.Text
                                                                       existingSerial.Hostname = labelHostnameDane.Text
                                                                       existingSerial.Mac = labelMacDane.Text
                                                                       existingSerial.MiejscePostoju = miejsceDane.Text
                                                                       existingSerial.DodatkoweInfo = InfoDane.Text
                                                                   End If
                                                               End If

                                                           ElseIf settings.sposobOdczytuManual Then
                                                               If existingSerial IsNot Nothing Then
                                                                   ' Aktualizacja istniejącego obiektu
                                                                   existingSerial.AdresIp = AdresDane.Text
                                                                   existingSerial.Urzadzenie = labelUrzadzenieDane.Text
                                                                   existingSerial.Hostname = labelHostnameDane.Text
                                                                   existingSerial.Mac = labelMacDane.Text
                                                                   existingSerial.MiejscePostoju = miejsceDane.Text
                                                                   existingSerial.DodatkoweInfo = InfoDane.Text
                                                               End If
                                                           End If

                                                           Dim updatedJson As String = JsonConvert.SerializeObject(readJsonWartosc, Formatting.Indented)
                                                           File.WriteAllText(filePath, updatedJson)

                                                           LabelDodanoUrzadzenie.Visible = True
                                                           buttonZapisz.Enabled = False

                                                           UpdateDataSinglePrinter(AdresDane.Text, serial:=labelSerialDane.Text, hostname:=labelHostnameDane.Text, miejscePostoju:=miejsceDane.Text, dodatkoweInfo:=InfoDane.Text)

                                                       End If

                                                   End Sub

                End If
        End Select
    End Sub



    ' USUWANIE URZĄDZENIA
    Private Sub copyMenuItem4_Click(sender As Object, e As EventArgs) Handles copyMenuItem4.Click

        ' Wczytaj ustawienia programu
        settings = LoadSettings()

        Dim selectedRow As DataGridViewRow = DataGridView1.CurrentRow

        If selectedRow IsNot Nothing Then
            Dim address As String = selectedRow.Cells("Adres").Value.ToString()
            Dim miejscePostoju As String = selectedRow.Cells("Miejsce postoju").Value.ToString()
            Dim hostname As String = selectedRow.Cells("Nazwa hosta").Value.ToString()
            Dim urzadzenie As String = selectedRow.Cells("Urządzenie").Value.ToString()
            Dim serialNumber As String = selectedRow.Cells("Nr seryjny").Value.ToString()
            Dim dodadkoweInfo As String = selectedRow.Cells("Dodatkowe informacje").Value.ToString()
            ' Pobierz indeks ukrytej kolumny "MAC" z DataTable
            Dim columnIndex As Integer = dataTable.Columns("MAC").Ordinal

            ' Pobierz DataRow odpowiadający wybranemu wierszowi
            Dim dataRow As DataRow = DirectCast(selectedRow.DataBoundItem, DataRowView).Row

            ' Pobierz wartość ukrytej kolumny "MAC" z DataRow
            Dim mac As String = dataRow(columnIndex).ToString()

            Dim detailsForm As New Form()
            With detailsForm
                .Text = "Usuwanie: " & urzadzenie
                .StartPosition = FormStartPosition.CenterParent
                .AutoSize = False
                .Width = 800
                .Height = 450
                .MaximizeBox = False
                .FormBorderStyle = FormBorderStyle.FixedDialog
                .BackColor = Color.White
            End With


            Dim questionIcon As System.Drawing.Image = My.Resources.questionIcon


            Dim iconPictureBox As New PictureBox()
            With iconPictureBox
                .Size = New System.Drawing.Size(108, 156)
                .Location = New System.Drawing.Point(20, 100)
                .SizeMode = PictureBoxSizeMode.StretchImage
                .Image = questionIcon
            End With


            Dim LabelCzyNapewno As New Label()
            With LabelCzyNapewno
                .Text = "Czy na pewno chcesz usunąć to urządzenie z systemu ?"
                .Font = New System.Drawing.Font("Calibri", 16.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                .AutoSize = True
                .Visible = True
            End With


            Dim LabelDodanoUrzadzenie As New Label()
            With LabelDodanoUrzadzenie
                .Text = "Pomyślnie usunięto urządzenie z systemu!"
                .Font = New System.Drawing.Font("Calibri", 16.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                .AutoSize = True
                .ForeColor = Color.FromArgb(12, 111, 29)
                .Visible = False
            End With


            Dim labelUrzadzenie As New Label()
            With labelUrzadzenie
                .Text = "Urządzenie:"
                .Location = New System.Drawing.Point(160, 100)
                .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                .AutoSize = False
                .Width = 200
                .TextAlign = ContentAlignment.MiddleRight
                .ForeColor = Color.Black
            End With


            Dim labelUrzadzenieDane As New Label()
            With labelUrzadzenieDane
                .Text = urzadzenie
                .Location = New System.Drawing.Point(360, 100)
                .Font = New System.Drawing.Font("Calibri", 14.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                .AutoSize = True
                .ForeColor = Color.Black
            End With


            Dim labelIpaddres As New Label()
            With labelIpaddres
                .Text = "Adres IP:"
                .Location = New System.Drawing.Point(160, 128)
                .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                .AutoSize = False
                .Width = 200
                .TextAlign = ContentAlignment.MiddleRight
                .ForeColor = Color.Black
            End With


            Dim labelIpaddresDane As New Label()
            With labelIpaddresDane
                .Text = address
                .Location = New System.Drawing.Point(360, 128)
                .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                .AutoSize = True
                .ForeColor = Color.Black
            End With


            Dim labelHostname As New Label()
            With labelHostname
                .Text = "Nazwa hosta:"
                .Location = New System.Drawing.Point(160, 156)
                .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                .AutoSize = False
                .Width = 200
                .TextAlign = ContentAlignment.MiddleRight
                .ForeColor = Color.Black
            End With


            Dim labelHostnameDane As New Label()
            With labelHostnameDane
                .Text = hostname
                .Location = New System.Drawing.Point(360, 156)
                .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                .AutoSize = True
                .ForeColor = Color.Black
            End With


            Dim labelSerial As New Label()
            With labelSerial
                .Text = "Nr seryjny:"
                .Location = New System.Drawing.Point(160, 184)
                .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                .AutoSize = False
                .Width = 200
                .TextAlign = ContentAlignment.MiddleRight
                .ForeColor = Color.Black
            End With


            Dim labelSerialDane As New Label()
            With labelSerialDane
                .Text = serialNumber
                .Location = New System.Drawing.Point(360, 184)
                .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                .AutoSize = True
                .ForeColor = Color.Black
            End With


            Dim labelMac As New Label()
            With labelMac
                .Text = "MAC: "
                .Location = New System.Drawing.Point(160, 212)
                .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                .AutoSize = False
                .Width = 200
                .TextAlign = ContentAlignment.MiddleRight
                .ForeColor = Color.Black
            End With


            Dim labelMacDane As New Label()
            With labelMacDane
                .Location = New System.Drawing.Point(360, 212)
                .Font = New System.Drawing.Font("Calibri", 14.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                .AutoSize = True
                .ForeColor = Color.Black
            End With


            Dim labelMiejsce As New Label()
            With labelMiejsce
                .Text = "Miejsce postoju:"
                .Location = New System.Drawing.Point(160, 240)
                .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                .AutoSize = False
                .Width = 200
                .TextAlign = ContentAlignment.MiddleRight
                .ForeColor = Color.Black
            End With

            Dim MiejsceDane As New Label()
            With MiejsceDane
                .Text = miejscePostoju
                .Location = New System.Drawing.Point(360, 240)
                .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                .AutoSize = False
                .Width = 300
                .Height = 30
                .ForeColor = Color.Black
            End With


            Dim labelInfo As New Label()
            With labelInfo
                .Text = "Dodatkowe informacje:"
                .Location = New System.Drawing.Point(160, 268)
                .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                .AutoSize = False
                .Width = 200
                .TextAlign = ContentAlignment.MiddleRight
                .ForeColor = Color.Black
            End With


            Dim InfoDane As New Label()
            With InfoDane
                .Text = dodadkoweInfo
                .Location = New System.Drawing.Point(360, 268)
                .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                .AutoSize = False
                .Width = 300
                .Height = 30
                .ForeColor = Color.Black
            End With

            Dim panelBottom As New Panel()
            With panelBottom
                .Dock = DockStyle.Bottom
                .Height = 60
                .BackColor = Color.FromArgb(235, 235, 224)
            End With


            Dim buttonZapisz As New Button()
            With buttonZapisz
                .Text = "Usuń"
                .Size = New System.Drawing.Size(90, 30)
                .BackColor = Color.FromArgb(0, 68, 102)
                .ForeColor = Color.FromArgb(242, 242, 242)
                .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                .FlatAppearance.BorderSize = 0
                .FlatStyle = FlatStyle.Flat
                .Anchor = AnchorStyles.None
            End With


            Dim buttonAnuluj As New Button()
            With buttonAnuluj
                .Text = "Zakończ"
                .Size = New System.Drawing.Size(90, 30)
                .BackColor = Color.FromArgb(0, 68, 102)
                .ForeColor = Color.FromArgb(242, 242, 242)
                .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                .FlatAppearance.BorderSize = 0
                .FlatStyle = FlatStyle.Flat
                .Anchor = AnchorStyles.None
            End With


            detailsForm.Controls.Add(panelBottom)
            panelBottom.Controls.Add(buttonZapisz)
            panelBottom.Controls.Add(buttonAnuluj)
            detailsForm.Controls.Add(iconPictureBox)
            detailsForm.Controls.Add(LabelCzyNapewno)
            detailsForm.Controls.Add(LabelDodanoUrzadzenie)
            detailsForm.Controls.Add(labelUrzadzenie)
            detailsForm.Controls.Add(labelUrzadzenieDane)
            detailsForm.Controls.Add(labelIpaddres)
            detailsForm.Controls.Add(labelIpaddresDane)
            detailsForm.Controls.Add(labelHostname)
            detailsForm.Controls.Add(labelHostnameDane)
            detailsForm.Controls.Add(labelSerial)
            detailsForm.Controls.Add(labelSerialDane)
            detailsForm.Controls.Add(labelMac)
            detailsForm.Controls.Add(labelMacDane)
            detailsForm.Controls.Add(labelMiejsce)
            detailsForm.Controls.Add(labelInfo)
            detailsForm.Controls.Add(MiejsceDane)
            detailsForm.Controls.Add(InfoDane)


            Dim xPosLabelCzyNapewno As Integer = (detailsForm.Width - LabelCzyNapewno.Width) \ 2
            LabelCzyNapewno.Location = New System.Drawing.Point(xPosLabelCzyNapewno, 40)

            Dim xPosDodanoUrzadzenie As Integer = (detailsForm.Width - LabelDodanoUrzadzenie.Width) \ 2
            LabelDodanoUrzadzenie.Location = New System.Drawing.Point(xPosDodanoUrzadzenie, 40)

            buttonZapisz.Location = New System.Drawing.Point((panelBottom.Width - buttonZapisz.Width - buttonAnuluj.Width - 10) \ 2, 15)
            buttonAnuluj.Location = New System.Drawing.Point(buttonZapisz.Location.X + buttonZapisz.Width + 10, 15)

            AddHandler buttonAnuluj.Click, Sub()
                                               detailsForm.Close()

                                           End Sub

            AddHandler buttonZapisz.Click, Sub()
                                               disaableBottomInfo = True

                                               Dim totalSerialNumbers As Integer = GetSerialNumberCount()
                                               labelPanelBottomLiczbaAllText.Text = (totalSerialNumbers - 1).ToString()


                                               If File.Exists(filePath) Then
                                                   Dim json As String = File.ReadAllText(filePath)
                                                   Dim wartosc As List(Of Dane) = JsonConvert.DeserializeObject(Of List(Of Dane))(json)
                                                   Dim pozycja As Dane = wartosc.Find(Function(d As Dane) d.SerialNumber = serialNumber)

                                                   If pozycja IsNot Nothing Then
                                                       wartosc.Remove(pozycja)
                                                       Dim updatedJson As String = JsonConvert.SerializeObject(wartosc, Formatting.Indented)
                                                       File.WriteAllText(filePath, updatedJson)
                                                   End If
                                               End If


                                               If File.Exists(filePathExportData) Then
                                                   Dim jsonExportData As String = File.ReadAllText(filePathExportData)
                                                   Dim wartoscExportData As List(Of DaneToDatabase) = JsonConvert.DeserializeObject(Of List(Of DaneToDatabase))(jsonExportData)
                                                   Dim pozycjaExportData As DaneToDatabase = wartoscExportData.Find(Function(d As DaneToDatabase) d.SerialNumber = serialNumber)

                                                   If pozycjaExportData IsNot Nothing Then
                                                       wartoscExportData.Remove(pozycjaExportData)
                                                       Dim updatedJson As String = JsonConvert.SerializeObject(wartoscExportData, Formatting.Indented)
                                                       File.WriteAllText(filePathExportData, updatedJson)
                                                   End If
                                               End If

                                               Dim rowIndex As Integer = -1
                                               For Each row As DataGridViewRow In DataGridView1.Rows
                                                   If row.Cells("Nr seryjny").Value IsNot Nothing AndAlso row.Cells("Nr seryjny").Value.ToString() = serialNumber Then
                                                       rowIndex = row.Index
                                                       Exit For
                                                   End If
                                               Next

                                               If rowIndex >= 0 Then
                                                   Dim StatusValue As String = If(DataGridView1.Rows(rowIndex).Cells("Status").Value IsNot Nothing, DataGridView1.Rows(rowIndex).Cells("Status").Value.ToString(), "")


                                                   If StatusValue = ChrW(&H2022) Then
                                                       statusCountOnline -= 1
                                                       LabelOnlineText.Text = statusCountOnline.ToString()
                                                   ElseIf StatusValue = ChrW(&H25CF) Then
                                                       statusCountOffline -= 1
                                                       LabelOfflineText.Text = statusCountOffline.ToString()
                                                   End If

                                                   DataGridView1.Rows.RemoveAt(rowIndex)
                                               End If

                                               LabelCzyNapewno.Visible = False
                                               LabelDodanoUrzadzenie.Visible = True
                                               buttonZapisz.Enabled = False

                                               UpdatePanels()
                                           End Sub

            detailsForm.ShowDialog()
        End If

    End Sub

    ' SZUKAJ URZĄDZEŃ
    Private Sub btnSzukaj_Click(sender As Object, e As EventArgs) Handles btnSzukaj.Click

        btnSzukaj.BackColor = Color.White

        ' Wczytaj ustawienia programu
        settings = LoadSettings()

        ' Tworzenie nowego formularza "Narzędzia"
        Dim detailsForm As New Form()
        detailsForm.Text = "Sieciowy skaner urządzeń drukujących"
        detailsForm.StartPosition = FormStartPosition.CenterParent
        detailsForm.AutoSize = False
        detailsForm.MaximizeBox = False
        detailsForm.FormBorderStyle = FormBorderStyle.FixedDialog
        detailsForm.BackColor = kolorOkna
        detailsForm.Owner = Me
        Dim screenWidth As Integer = Screen.PrimaryScreen.WorkingArea.Width
        Dim screenHeight As Integer = Screen.PrimaryScreen.WorkingArea.Height
        detailsForm.Width = screenWidth * 0.8
        detailsForm.Height = screenHeight * 0.9


        ' Tworzenie panelu dla zawartości zakładek
        Dim contentPanel As New Panel()
        contentPanel.BackColor = Color.White
        contentPanel.Location = New System.Drawing.Point(211, 20)
        contentPanel.Size = New System.Drawing.Size(detailsForm.Width - 245, detailsForm.Height - 130)
        detailsForm.Controls.Add(contentPanel)

        ' Tworzenie dolnego panelu dla przycisków "Zapisz" i "Zakończ"
        Dim panelBottom As New Panel()
        panelBottom.BackColor = kolorOkna
        panelBottom.Size = New System.Drawing.Size(detailsForm.Width, 60)
        panelBottom.Dock = DockStyle.Bottom
        detailsForm.Controls.Add(panelBottom)

        Dim buttonZapisz As New Button()
        buttonZapisz.Text = "Zapisz"
        buttonZapisz.Size = New System.Drawing.Size(90, 32)
        buttonZapisz.BackColor = Color.FromArgb(0, 68, 102)
        buttonZapisz.ForeColor = Color.FromArgb(242, 242, 242)
        buttonZapisz.Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
        buttonZapisz.FlatAppearance.BorderSize = 0
        buttonZapisz.FlatStyle = FlatStyle.Flat
        buttonZapisz.Anchor = AnchorStyles.None
        buttonZapisz.Visible = True

        Dim buttonAnuluj As New Button()
        buttonAnuluj.Text = "Zakończ"
        buttonAnuluj.Size = New System.Drawing.Size(90, 32)
        buttonAnuluj.BackColor = Color.FromArgb(0, 68, 102)
        buttonAnuluj.ForeColor = Color.FromArgb(242, 242, 242)
        buttonAnuluj.Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
        buttonAnuluj.FlatAppearance.BorderSize = 0
        buttonAnuluj.FlatStyle = FlatStyle.Flat
        buttonAnuluj.Anchor = AnchorStyles.None

        panelBottom.Controls.Add(buttonZapisz)
        panelBottom.Controls.Add(buttonAnuluj)

        buttonZapisz.Location = New System.Drawing.Point((panelBottom.Width - buttonZapisz.Width - buttonAnuluj.Width - 10) * 0.7, 10)
        buttonAnuluj.Location = New System.Drawing.Point(buttonZapisz.Location.X + buttonZapisz.Width + 10, 10)

        AddHandler buttonAnuluj.Click, Sub(senderAnuluj As Object, eAnuluj As EventArgs)
                                           detailsForm.Close()
                                           settings = LoadSettings()
                                       End Sub
        Dim buttonZakoncz As New Button()
        With buttonZakoncz
            .Text = "Zakończ"
            .DialogResult = DialogResult.OK
            .Size = New System.Drawing.Size(90, 30)
            .BackColor = Color.FromArgb(0, 68, 102)
            .ForeColor = Color.FromArgb(242, 242, 242)
            .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
            .FlatAppearance.BorderSize = 0
            .FlatStyle = FlatStyle.Flat
            .Anchor = AnchorStyles.None
        End With

        AddHandler buttonZakoncz.Click, Sub()
                                            detailsForm.Close()
                                        End Sub

        AddHandler detailsForm.FormClosed, AddressOf OnDetailsFormClosed

        CreateTabs_SzukajUrzadzen(detailsForm, contentPanel, buttonZapisz, buttonZakoncz)

        detailsForm.ShowDialog()
    End Sub

    ' Funkcja odpowiedzialna za tworzenie zakładek i dodawanie ich do formularza Narzędzia
    Private Sub CreateTabs_SzukajUrzadzen(detailsForm As Form, contentPanel As Panel, buttonZapisz As Button, buttonZakoncz As Button)

        Dim button1 As New Button()
        Dim button2 As New Button()

        ' Tworzenie przycisków
        SetupButton(button1, "Sprawdź sieć automatycznie", 10, 20)
        SetupButton(button2, "Wpisz sieć manualnie", 10, 52)

        ' Dodanie do formularza
        detailsForm.Controls.Add(button1)
        detailsForm.Controls.Add(button2)

        ' Tworzenie listy przycisków, które mają być kontrolowane
        Dim buttonList As New List(Of Button) From {button1, button2}

        ' Przypisanie obsługi zdarzenia Click do każdego przycisku
        AddHandler button1.Click, Sub(sender As Object, e As EventArgs) HandleButtonClick_SzukajUrzadzen(sender, contentPanel, 1, buttonZapisz, buttonZakoncz, detailsForm, buttonList)
        AddHandler button2.Click, Sub(sender As Object, e As EventArgs) HandleButtonClick_SzukajUrzadzen(sender, contentPanel, 2, buttonZapisz, buttonZakoncz, detailsForm, buttonList)

        ' Separator graficzny (opcjonalnie)
        Dim separator1 As New Panel()
        separator1.BackColor = kolorBorder
        separator1.Size = New System.Drawing.Size(200, 2)
        separator1.Location = New System.Drawing.Point(10, 50)

        Dim separator2 As New Panel()
        separator2.BackColor = kolorBorder
        separator2.Size = New System.Drawing.Size(200, 2)
        separator2.Location = New System.Drawing.Point(10, 82)

        ' Dodanie separatorów do formularza
        detailsForm.Controls.Add(separator1)
        detailsForm.Controls.Add(separator2)

        ' Wywołanie metody, aby ustawić stan początkowy zakładek
        HandleButtonClick_SzukajUrzadzen(button1, contentPanel, 1, buttonZapisz, buttonZakoncz, detailsForm, buttonList)

        ' Dodanie obsługi rysowania granicy panelu
        AddHandler contentPanel.Paint, AddressOf DrawPanelBorder
    End Sub

    ' Funkcja do dynamicznego dodawania elementów do Panelu wewnątrz GroupBox
    Private Sub DodajElementDoPanelu(element As Control, panelDostepneSieci As Panel, ramkaDostepneSieci As GroupBox)
        panelDostepneSieci.Controls.Add(element)

        If panelDostepneSieci.Controls.Count > 1 Then
            element.Top = panelDostepneSieci.Controls(panelDostepneSieci.Controls.Count - 2).Bottom + 5
        End If

        If panelDostepneSieci.Height < 179 Then
            panelDostepneSieci.Height += element.Height + 5
        End If

        If panelDostepneSieci.Height > 179 Then
            panelDostepneSieci.Height = 179
        End If

        ramkaDostepneSieci.Refresh()
    End Sub

    ' Obsługa kliknięcia przycisków zakładek dla formularza Narzędzia
    Private Sub HandleButtonClick_SzukajUrzadzen(sender As Object, contentPanel As Panel, tabIndex As Integer, buttonZapisz As Button, buttonZakoncz As Button, detailsForm As Form, buttonList As List(Of Button))

        ' Ustawienie aktywnego przycisku
        Dim clickedButton As Button = DirectCast(sender, Button)
        If currentActiveButton IsNot Nothing Then
            ' Resetowanie poprzedniego aktywnego przycisku
            currentActiveButton.BackColor = kolorButtons
            currentActiveButton.Size = New System.Drawing.Size(200, 30)
            currentActiveButton.FlatAppearance.BorderSize = 1
            currentActiveButton.FlatAppearance.BorderColor = kolorBorder
        End If

        ' Ustawienie nowego aktywnego przycisku
        currentActiveButton = clickedButton
        currentActiveButton.BackColor = Color.White
        currentActiveButton.Size = New System.Drawing.Size(220, 30)
        currentActiveButton.FlatAppearance.BorderSize = 0

        ' Dodanie rysowania borderu wokół aktywnego przycisku
        AddHandler currentActiveButton.Paint, AddressOf DrawButtonBorder

        ' Wyczyść zawartość panelu i wyświetl odpowiednią zawartość dla zakładki
        contentPanel.Controls.Clear()

        clickedButton = CType(sender, Button)

        Dim isInProgress As Boolean = False

        ' RAMKA SKANUJ - START
        Dim ramkaSzukajUrzadzenSkanuj As New GroupBox()
        With ramkaSzukajUrzadzenSkanuj
            .Visible = False
            .Text = "Przeszukiwanie sieci"
            .Size = New System.Drawing.Size((contentPanel.Width) / 2, 220)
            .Location = New System.Drawing.Point(10, 10)
            .Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Bold)
        End With

        Dim labelAdres As New Label()
        With labelAdres
            .Text = "Aby rozpocząć sprawdź dostępne sieci"
            .AutoSize = True
            .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
            .TextAlign = ContentAlignment.MiddleCenter
        End With

        Dim labelWyszukiwanieZakończone As New Label()
        With labelWyszukiwanieZakończone
            .Text = "Wyszukiwanie zakończone"
            .AutoSize = True
            .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
            .TextAlign = ContentAlignment.MiddleCenter
            .Visible = False
        End With

        Dim labelZakresUniemozliwia As New Label()
        With labelZakresUniemozliwia
            .Text = "W wybranej sieci nie jest możliwe wyszukiwanie urządzeń !"
            .AutoSize = True
            .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
            .ForeColor = Color.FromArgb(255, 64, 0)
            .TextAlign = ContentAlignment.MiddleCenter
            .Visible = False
        End With

        Dim labelWarunkiTak As New Label()
        With labelWarunkiTak
            .Text = "Warunki do przeszukiwania sieci są spełnione"
            .AutoSize = True
            .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
            .ForeColor = Color.FromArgb(12, 111, 29)
            .TextAlign = ContentAlignment.MiddleCenter
            .Visible = False
        End With

        Dim labelWarunkiNie As New Label()
        With labelWarunkiNie
            .Text = "Warunki do przeszukiwania sieci nie są spełnione"
            .AutoSize = True
            .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
            .ForeColor = Color.FromArgb(255, 64, 0)
            .TextAlign = ContentAlignment.MiddleCenter
            .Visible = False
        End With

        Dim progressBar As New ProgressBar()
        With progressBar
            .Size = New System.Drawing.Size(ramkaSzukajUrzadzenSkanuj.Width * 0.8, 15)
            .Visible = False
        End With

        Dim progressLabel As New Label()
        With progressLabel
            .AutoSize = True
            .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
            .TextAlign = ContentAlignment.MiddleCenter
        End With

        Dim buttonSprawdzSiec As New Button()
        With buttonSprawdzSiec
            .Text = "Sprawdź sieć"
            .Size = New System.Drawing.Size(90, 28)
            .BackColor = Color.FromArgb(0, 68, 102)
            .ForeColor = Color.White
            .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
            .FlatAppearance.BorderSize = 0
            .FlatStyle = FlatStyle.Flat
        End With

        Dim buttonSzukajPrinter As New Button()
        With buttonSzukajPrinter
            .Text = "Szukaj"
            .Size = New System.Drawing.Size(90, 28)
            .BackColor = Color.FromArgb(0, 68, 102)
            .ForeColor = Color.White
            .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
            .FlatAppearance.BorderSize = 0
            .FlatStyle = FlatStyle.Flat
            .Enabled = False
        End With

        contentPanel.Controls.Add(ramkaSzukajUrzadzenSkanuj)
        ramkaSzukajUrzadzenSkanuj.Controls.Add(labelAdres)
        ramkaSzukajUrzadzenSkanuj.Controls.Add(labelWyszukiwanieZakończone)
        ramkaSzukajUrzadzenSkanuj.Controls.Add(labelWarunkiTak)
        ramkaSzukajUrzadzenSkanuj.Controls.Add(labelZakresUniemozliwia)
        ramkaSzukajUrzadzenSkanuj.Controls.Add(labelWarunkiNie)
        ramkaSzukajUrzadzenSkanuj.Controls.Add(progressBar)
        ramkaSzukajUrzadzenSkanuj.Controls.Add(progressLabel)
        ramkaSzukajUrzadzenSkanuj.Controls.Add(buttonSprawdzSiec)
        ramkaSzukajUrzadzenSkanuj.Controls.Add(buttonSzukajPrinter)

        Dim totalWidth = buttonSprawdzSiec.Width + buttonSzukajPrinter.Width + 20
        Dim startX1 = (ramkaSzukajUrzadzenSkanuj.Width - totalWidth) \ 2
        buttonSprawdzSiec.Location = New System.Drawing.Point(startX1, 100)
        buttonSzukajPrinter.Location = New System.Drawing.Point(startX1 + buttonSprawdzSiec.Width + 20, 100)

        labelAdres.Location = New System.Drawing.Point((ramkaSzukajUrzadzenSkanuj.Width - labelAdres.Width) / 2, 40)
        labelWyszukiwanieZakończone.Location = New System.Drawing.Point((ramkaSzukajUrzadzenSkanuj.Width - labelWyszukiwanieZakończone.Width) / 2, 40)
        labelWarunkiTak.Location = New System.Drawing.Point((ramkaSzukajUrzadzenSkanuj.Width - labelWarunkiTak.Width) / 2, 40)
        labelWarunkiNie.Location = New System.Drawing.Point((ramkaSzukajUrzadzenSkanuj.Width - labelWarunkiNie.Width) / 2, 40)
        labelZakresUniemozliwia.Location = New System.Drawing.Point((ramkaSzukajUrzadzenSkanuj.Width - labelZakresUniemozliwia.Width) / 2, 40)
        progressBar.Location = New System.Drawing.Point((ramkaSzukajUrzadzenSkanuj.Width - progressBar.Width) / 2, 40)
        progressLabel.Location = New System.Drawing.Point((ramkaSzukajUrzadzenSkanuj.Width - progressLabel.Width) / 2, 20)

        ' RAMKA SKANUJ - STOP


        ' RAMKA DOSTĘPNE SIECI - START
        Dim ramkaDostepneSieci As New GroupBox()
        With ramkaDostepneSieci
            .Visible = False
            .Text = "Dostępne sieci"
            .AutoSize = True
            .AutoSizeMode = AutoSizeMode.GrowAndShrink
            .Width = ((contentPanel.Width) / 2) - 30
            .Location = New System.Drawing.Point(ramkaSzukajUrzadzenSkanuj.Width + 20, 10)
            .Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Bold)
        End With

        Dim panelDostepneSieci As New Panel()
        With panelDostepneSieci
            .Location = New System.Drawing.Point(5, 20)
            .Width = ramkaDostepneSieci.Width - 10
            .Height = 100
            .AutoScroll = True
        End With

        ramkaDostepneSieci.Controls.Add(panelDostepneSieci)
        contentPanel.Controls.Add(ramkaDostepneSieci)

        Dim labelZakres As New Label()
        With labelZakres
            .Text = "Dostępny zakres adresów do wyszukiwania urządzeń to: "
            .AutoSize = True
            .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
            .TextAlign = ContentAlignment.MiddleCenter
            .Visible = False
        End With

        Dim labelZakresWybierz As New Label()
        With labelZakresWybierz
            .Text = "Wybierz z jakiej sieci chcesz wykonać wyszukiwanie:"
            .AutoSize = True
            .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
            .TextAlign = ContentAlignment.MiddleCenter
            .Visible = False
        End With

        Dim radioButtons As New List(Of RadioButton)()

        Dim labelAdresIpTylkoJeden As New Label()
        With labelAdresIpTylkoJeden
            .AutoSize = True
            .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
            .TextAlign = ContentAlignment.MiddleCenter
            .Visible = False
        End With

        DodajElementDoPanelu(labelZakres, panelDostepneSieci, ramkaDostepneSieci)
        DodajElementDoPanelu(labelZakresWybierz, panelDostepneSieci, ramkaDostepneSieci)
        DodajElementDoPanelu(labelAdresIpTylkoJeden, panelDostepneSieci, ramkaDostepneSieci)
        DodajElementDoPanelu(labelAdresIpTylkoJeden, panelDostepneSieci, ramkaDostepneSieci)
        labelZakres.Location = New System.Drawing.Point((ramkaDostepneSieci.Width - labelZakres.Width) / 2, 30)
        labelZakresWybierz.Location = New System.Drawing.Point((ramkaDostepneSieci.Width - labelZakresWybierz.Width) / 2, 5)
        ' RAMKA DOSTĘPNE SIECI - STOP


        'RAMKA DANE PODSIECI - START
        Dim ramkaDanePodsieci As New GroupBox()
        With ramkaDanePodsieci
            .Visible = False
            .Text = "Dane podsieci"
            .Size = New System.Drawing.Size((contentPanel.Width - 20), 90)
            .Location = New System.Drawing.Point(10, ramkaSzukajUrzadzenSkanuj.Height + 10)
            .Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Bold)
        End With

        Dim AdresIpSekcjaNr1 As New TextBox()
        With AdresIpSekcjaNr1
            .Width = 40
            .TextAlign = HorizontalAlignment.Center
            .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
            .Visible = False
        End With

        Dim AdresIpSekcjaNr2 As New TextBox()
        With AdresIpSekcjaNr2
            .Width = 40
            .TextAlign = HorizontalAlignment.Center
            .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
            .Visible = False
        End With

        Dim AdresIpSekcjaNr3 As New TextBox()
        With AdresIpSekcjaNr3
            .Width = 40
            .TextAlign = HorizontalAlignment.Center
            .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
            .Visible = False
        End With

        Dim AdresIpSekcjaNr4 As New TextBox()
        With AdresIpSekcjaNr4
            .Text = "xxx"
            .Enabled = False
            .Width = 40
            .BackColor = Color.FromArgb(217, 217, 217)
            .TextAlign = HorizontalAlignment.Center
            .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
            .Visible = False
        End With

        Dim labelZakres1 As New Label()
        With labelZakres1
            .Text = "Uzupełnij wskazane pole adresu IP przeszukiwanej sieci"
            .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
            .AutoSize = True
            .ForeColor = Color.Black
            .Visible = False
        End With

        Dim labelZakres1a As New Label()
        With labelZakres1a
            .Text = "Uzupełnij wskazane pola adresu IP przeszukiwanej sieci"
            .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
            .AutoSize = True
            .ForeColor = Color.Black
            .Visible = False
        End With

        contentPanel.Controls.Add(ramkaDanePodsieci)
        ramkaDanePodsieci.Controls.Add(AdresIpSekcjaNr1)
        ramkaDanePodsieci.Controls.Add(AdresIpSekcjaNr2)
        ramkaDanePodsieci.Controls.Add(AdresIpSekcjaNr3)
        ramkaDanePodsieci.Controls.Add(AdresIpSekcjaNr4)
        ramkaDanePodsieci.Controls.Add(labelZakres1)
        ramkaDanePodsieci.Controls.Add(labelZakres1a)

        Dim spacing As Integer = 30
        Dim startX As Integer = ((ramkaDanePodsieci.Width - (50 * 4 + spacing * 3)) \ 2)

        AdresIpSekcjaNr1.Location = New System.Drawing.Point(startX, 25)
        AdresIpSekcjaNr2.Location = New System.Drawing.Point(startX + 50 + spacing, 25)
        AdresIpSekcjaNr3.Location = New System.Drawing.Point(startX + (50 + spacing) * 2, 25)
        AdresIpSekcjaNr4.Location = New System.Drawing.Point(startX + (50 + spacing) * 3, 25)

        labelZakres1.Location = New System.Drawing.Point((ramkaDanePodsieci.Width - labelZakres1.Width) / 2, 60)
        labelZakres1a.Location = New System.Drawing.Point((ramkaDanePodsieci.Width - labelZakres1a.Width) / 2, 60)
        'RAMKA DANE PODSIECI - STOP


        ' RAMKA ZNALEZIONE URZĄDZENIA TABELA - START
        Dim panelZnalezioneUrzadzenia As New Panel()
        With panelZnalezioneUrzadzenia
            .Location = New System.Drawing.Point(5, ramkaSzukajUrzadzenSkanuj.Height + ramkaDanePodsieci.Height + 10)
            .Width = contentPanel.Width - 10
            .Height = 400
            '.AutoScroll = True
        End With

        Dim labelListaZawiera As New Label()
        With labelListaZawiera
            .Text = "Lista zawiera tylko urządzenia, które nie występują w systemie lub są wprowadzone z innym IP"
            .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
            .AutoSize = True
            .ForeColor = Color.Black
            .Visible = False

        End With

        Dim labelListaNieZawiera As New Label()
        With labelListaNieZawiera
            .Text = "Wszystkie dostępne urządzenia w tej sieci są dodane do systemu"
            .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
            .AutoSize = True
            .ForeColor = Color.Black
            .Visible = False
        End With

        Dim labelListaBrak As New Label()
        With labelListaBrak
            .Text = "Brak dostępnych urządzeń w tej sieci"
            .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
            .AutoSize = True
            .ForeColor = Color.Black
            .Visible = False

        End With

        Dim DataGridView2 As New DataGridView()
        With DataGridView2
            .Visible = False
            .Width = panelZnalezioneUrzadzenia.Width - 10
            .Height = panelZnalezioneUrzadzenia.Height - .Location.Y - 20
            .BorderStyle = BorderStyle.None
            .AutoGenerateColumns = True
            .ColumnHeadersHeight = 25
            .ColumnHeadersDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter
            .ColumnHeadersDefaultCellStyle.Font = New System.Drawing.Font("Calibri", 10, System.Drawing.FontStyle.Bold)
            .CellBorderStyle = DataGridViewCellBorderStyle.SingleHorizontal
            .BackgroundColor = Color.White
            .RowHeadersVisible = False
            .AllowUserToAddRows = False
        End With

        contentPanel.Controls.Add(panelZnalezioneUrzadzenia)
        panelZnalezioneUrzadzenia.Controls.Add(labelListaZawiera)
        panelZnalezioneUrzadzenia.Controls.Add(labelListaNieZawiera)
        panelZnalezioneUrzadzenia.Controls.Add(labelListaBrak)
        panelZnalezioneUrzadzenia.Controls.Add(DataGridView2)

        labelListaZawiera.Location = New System.Drawing.Point((panelZnalezioneUrzadzenia.Width - labelListaZawiera.Width) / 2, 5)
        labelListaNieZawiera.Location = New System.Drawing.Point((panelZnalezioneUrzadzenia.Width - labelListaNieZawiera.Width) / 2, 5)
        labelListaBrak.Location = New System.Drawing.Point((panelZnalezioneUrzadzenia.Width - labelListaBrak.Width) / 2, 5)
        DataGridView2.Location = New System.Drawing.Point(0, 40)
        ' RAMKA ZNALEZIONE URZĄDZENIA TABELA - STOP


        ' RAMKA PODSUMOWANIE - START
        Dim panelPodsumowanie As New Panel()
        With panelPodsumowanie
            .Size = New System.Drawing.Size(contentPanel.Width - 20, 40)
            .Location = New System.Drawing.Point(10, contentPanel.Height - 50)
            .Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Bold)
        End With

        Dim znalezionoTotal As New Label()
        With znalezionoTotal
            .Text = "Wszystkie znalezione urządzenia: "
            .AutoSize = True
            .Font = New System.Drawing.Font("Calibri", 11.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
            .TextAlign = ContentAlignment.MiddleCenter
            .ForeColor = Color.Black
            .Visible = False
        End With

        Dim znalezionoWystepujaSystem As New Label()
        With znalezionoWystepujaSystem
            .Text = "Występuje w systemie: "
            .AutoSize = True
            .Font = New System.Drawing.Font("Calibri", 11.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
            .TextAlign = ContentAlignment.MiddleCenter
            .ForeColor = Color.Black
            .Visible = False
        End With

        Dim znalezionoNieWystepujaSystem As New Label()
        With znalezionoNieWystepujaSystem
            .Text = "Nie występuje w systemie: "
            .AutoSize = True
            .Font = New System.Drawing.Font("Calibri", 11.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
            .TextAlign = ContentAlignment.MiddleCenter
            .ForeColor = Color.Black
            .Visible = False
        End With

        Dim znalezionoInnyAdres As New Label()
        With znalezionoInnyAdres
            .Text = "Występuje w systemie pod innym adresem: "
            .AutoSize = True
            .Font = New System.Drawing.Font("Calibri", 11.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
            .TextAlign = ContentAlignment.MiddleCenter
            .ForeColor = Color.Black
            .Visible = False
        End With

        contentPanel.Controls.Add(panelPodsumowanie)
        panelPodsumowanie.Controls.Add(znalezionoTotal)
        panelPodsumowanie.Controls.Add(znalezionoWystepujaSystem)
        panelPodsumowanie.Controls.Add(znalezionoNieWystepujaSystem)
        panelPodsumowanie.Controls.Add(znalezionoInnyAdres)

        Dim totalWidthPanelBottom2 As Integer = panelPodsumowanie.Width
        Dim totalLabelsWidth As Integer = znalezionoTotal.Width + znalezionoWystepujaSystem.Width + znalezionoNieWystepujaSystem.Width + znalezionoInnyAdres.Width
        Dim spacingPanelBottom2 As Integer = (totalWidthPanelBottom2 - totalLabelsWidth) / 5

        znalezionoTotal.Location = New System.Drawing.Point(spacingPanelBottom2, (panelPodsumowanie.Height - znalezionoTotal.Height) / 2)
        znalezionoWystepujaSystem.Location = New System.Drawing.Point(znalezionoTotal.Right + spacingPanelBottom2, (panelPodsumowanie.Height - znalezionoWystepujaSystem.Height) / 2)
        znalezionoNieWystepujaSystem.Location = New System.Drawing.Point(znalezionoWystepujaSystem.Right + spacingPanelBottom2, (panelPodsumowanie.Height - znalezionoNieWystepujaSystem.Height) / 2)
        znalezionoInnyAdres.Location = New System.Drawing.Point(znalezionoNieWystepujaSystem.Right + spacingPanelBottom2, (panelPodsumowanie.Height - znalezionoInnyAdres.Height) / 2)

        ' RAMKA PODSUMOWANIE - STOP


        AddHandler AdresIpSekcjaNr1.KeyPress, Sub(sender2 As Object, e2 As KeyPressEventArgs)
                                                  ' Sprawdź, czy wpisany znak nie jest cyfrą od 0 do 9 ani klawiszem sterującym
                                                  If Not Char.IsDigit(e2.KeyChar) AndAlso Not Char.IsControl(e2.KeyChar) Then
                                                      e2.Handled = True ' Odrzuć wpisany znak
                                                  End If

                                                  ' Sprawdź, czy wpisana wartość przekroczy maksymalną długość 3 znaków
                                                  If AdresIpSekcjaNr1.Text.Length >= 3 AndAlso Not Char.IsControl(e2.KeyChar) Then
                                                      e2.Handled = True ' Odrzuć wpisany znak
                                                  End If
                                              End Sub
        AddHandler AdresIpSekcjaNr2.KeyPress, Sub(sender3 As Object, e3 As KeyPressEventArgs)
                                                  ' Sprawdź, czy wpisany znak nie jest cyfrą od 0 do 9 ani klawiszem sterującym
                                                  If Not Char.IsDigit(e3.KeyChar) AndAlso Not Char.IsControl(e3.KeyChar) Then
                                                      e3.Handled = True ' Odrzuć wpisany znak
                                                  End If

                                                  ' Sprawdź, czy wpisana wartość przekroczy maksymalną długość 3 znaków
                                                  If AdresIpSekcjaNr2.Text.Length >= 3 AndAlso Not Char.IsControl(e3.KeyChar) Then
                                                      e3.Handled = True ' Odrzuć wpisany znak
                                                  End If
                                              End Sub
        AddHandler AdresIpSekcjaNr3.KeyPress, Sub(sender4 As Object, e4 As KeyPressEventArgs)
                                                  ' Sprawdź, czy wpisany znak nie jest cyfrą od 0 do 9 ani klawiszem sterującym
                                                  If Not Char.IsDigit(e4.KeyChar) AndAlso Not Char.IsControl(e4.KeyChar) Then
                                                      e4.Handled = True ' Odrzuć wpisany znak
                                                  End If

                                                  ' Sprawdź, czy wpisana wartość przekroczy maksymalną długość 3 znaków
                                                  If AdresIpSekcjaNr3.Text.Length >= 3 AndAlso Not Char.IsControl(e4.KeyChar) Then
                                                      e4.Handled = True ' Odrzuć wpisany znak
                                                  End If
                                              End Sub
        AddHandler AdresIpSekcjaNr4.KeyPress, Sub(sender5 As Object, e5 As KeyPressEventArgs)
                                                  ' Sprawdź, czy wpisany znak nie jest cyfrą od 0 do 9 ani klawiszem sterującym
                                                  If Not Char.IsDigit(e5.KeyChar) AndAlso Not Char.IsControl(e5.KeyChar) Then
                                                      e5.Handled = True ' Odrzuć wpisany znak
                                                  End If

                                                  ' Sprawdź, czy wpisana wartość przekroczy maksymalną długość 3 znaków
                                                  If AdresIpSekcjaNr4.Text.Length >= 3 AndAlso Not Char.IsControl(e5.KeyChar) Then
                                                      e5.Handled = True ' Odrzuć wpisany znak
                                                  End If
                                              End Sub

        ' FORMULARZ ALERT/INFO - START
        Dim detailsForm1 As New Form()
        With detailsForm1
            .Text = "Alert/Info"
            .StartPosition = FormStartPosition.CenterParent
            .AutoSize = False
            .Width = 600
            .Height = 350
            .MaximizeBox = False
            .FormBorderStyle = FormBorderStyle.FixedDialog
            .BackColor = Color.White
            .StartPosition = FormStartPosition.CenterScreen
        End With

        Dim questionIcon As System.Drawing.Image = My.Resources.questionIcon
        Dim okIcon As System.Drawing.Image = My.Resources.okIcon
        Dim infoIcon As System.Drawing.Image = My.Resources.infoIcon
        Dim warningIcon As System.Drawing.Image = My.Resources.warningIcon

        Dim iconPictureBox As New PictureBox()
        With iconPictureBox
            .Size = New System.Drawing.Size(108, 156)
            .Location = New System.Drawing.Point(10, 60)
            .SizeMode = PictureBoxSizeMode.StretchImage
            .Image = questionIcon
        End With

        Dim pomyslnieDodano = New Label()
        With pomyslnieDodano
            .Text = "Pomyślnie dodano urządzenia do systemu!"
            .Width = 350
            .Font = New System.Drawing.Font("Calibri", 14.0!, System.Drawing.FontStyle.Bold)
            .ForeColor = Color.FromArgb(12, 111, 29)
            .TextAlign = ContentAlignment.MiddleCenter
            .Visible = False
        End With

        Dim urzadzenieIstnieje = New Label()
        With urzadzenieIstnieje
            .Text = "Wśród wybranych istnieją urządzenia występujące w systemie z innym IP!"
            .Width = 350
            .Font = New System.Drawing.Font("Calibri", 14.0!, System.Drawing.FontStyle.Bold)
            .ForeColor = Color.FromArgb(255, 64, 0)
            .TextAlign = ContentAlignment.MiddleCenter
            .Visible = False
        End With

        Dim dodanoTotal = New Label()
        With dodanoTotal
            .Text = "Dodano nowe urządzenia:  "
            .Width = 350
            .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Bold)
            .ForeColor = Color.Black
            .TextAlign = ContentAlignment.MiddleCenter
            .Visible = False
        End With

        Dim dodanoAktualizacja = New Label()
        With dodanoAktualizacja
            .Text = "Zaktualizowano istniejące urządzenia: "
            .Width = 350
            .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Bold)
            .ForeColor = Color.Black
            .Location = New System.Drawing.Point((detailsForm1.Width - dodanoAktualizacja.Width) \ 2, 100)
            .TextAlign = ContentAlignment.MiddleCenter
            .Visible = False
        End With

        Dim czyNadpisać = New Label()
        With czyNadpisać
            .Text = "Czy na pewno chcesz wprowadzić te urządzenia do systemu?"
            .Width = 350
            .Visible = False
            .Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Bold)
            .ForeColor = Color.Black
            .TextAlign = ContentAlignment.MiddleCenter
        End With


        Dim daneNadpisane = New Label()
        With daneNadpisane
            .Text = "(dane urządzenia zostaną nadpisane aktualnymi)"
            .Width = 350
            .Visible = False
            .Font = New System.Drawing.Font("Calibri", 11.0!, System.Drawing.FontStyle.Regular)
            .ForeColor = Color.Black
            .TextAlign = ContentAlignment.MiddleCenter
        End With

        Dim panelBottom1 As New Panel()
        With panelBottom1
            .Dock = DockStyle.Bottom
            .Height = 60
            .BackColor = Color.FromArgb(235, 235, 224)
        End With

        Dim buttonZakonczAlert As New Button()
        With buttonZakonczAlert
            .Text = "Anuluj"
            .DialogResult = DialogResult.OK
            .Size = New System.Drawing.Size(90, 30)
            .BackColor = Color.FromArgb(0, 68, 102)
            .ForeColor = Color.FromArgb(242, 242, 242)
            .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
            .FlatAppearance.BorderSize = 0
            .FlatStyle = FlatStyle.Flat
            .Anchor = AnchorStyles.None
            .Visible = False
        End With

        Dim buttonEdytujUrzadzenie = New Button()
        With buttonEdytujUrzadzenie
            .Text = "Zapisz"
            .Size = New System.Drawing.Size(90, 30)
            .BackColor = Color.FromArgb(0, 68, 102)
            .ForeColor = Color.FromArgb(242, 242, 242)
            .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
            .FlatAppearance.BorderSize = 0
            .FlatStyle = FlatStyle.Flat
            .Anchor = AnchorStyles.None
            .Visible = False
        End With

        With buttonZakoncz
            .Text = "Zakończ"
            .Size = New System.Drawing.Size(90, 30)
            .BackColor = Color.FromArgb(0, 68, 102)
            .ForeColor = Color.FromArgb(242, 242, 242)
            .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
            .FlatAppearance.BorderSize = 0
            .FlatStyle = FlatStyle.Flat
            .Anchor = AnchorStyles.None
            .Visible = False
        End With

        detailsForm1.Controls.Add(pomyslnieDodano)
        detailsForm1.Controls.Add(iconPictureBox)
        detailsForm1.Controls.Add(urzadzenieIstnieje)
        detailsForm1.Controls.Add(dodanoTotal)
        detailsForm1.Controls.Add(dodanoAktualizacja)
        detailsForm1.Controls.Add(czyNadpisać)
        detailsForm1.Controls.Add(daneNadpisane)
        detailsForm1.Controls.Add(panelBottom1)
        panelBottom1.Controls.Add(buttonZakonczAlert)
        panelBottom1.Controls.Add(buttonEdytujUrzadzenie)
        panelBottom1.Controls.Add(buttonZakoncz)

        pomyslnieDodano.Location = New System.Drawing.Point(150, 70)
        dodanoTotal.Location = New System.Drawing.Point(150, 120)
        urzadzenieIstnieje.Location = New System.Drawing.Point(150, 70)
        czyNadpisać.Location = New System.Drawing.Point(150, 160)
        daneNadpisane.Location = New System.Drawing.Point(1502, 180)

        buttonEdytujUrzadzenie.Location = New System.Drawing.Point((panelBottom1.Width - buttonEdytujUrzadzenie.Width - buttonZakonczAlert.Width - 10) \ 2, 15)
        buttonZakonczAlert.Location = New System.Drawing.Point((buttonEdytujUrzadzenie.Location.X + buttonEdytujUrzadzenie.Width) + 10, 15)
        buttonZakoncz.Location = New System.Drawing.Point((buttonEdytujUrzadzenie.Location.X + buttonEdytujUrzadzenie.Width) + 10, 15)

        AddHandler buttonZakonczAlert.Click, Sub()

                                                 detailsForm1.Close()
                                             End Sub

        ' FORMULARZ ALERT/INFO - STOP


        Dim btnAuto As Boolean
        btnAuto = False

        Dim btnManual As Boolean
        btnManual = False

        Dim jednoActive As Boolean
        jednoActive = False

        Dim wieleActive As Boolean
        wieleActive = False

        Dim sekcjaNr4 As Boolean
        sekcjaNr4 = False

        Dim sekcjaNr3 As Boolean
        sekcjaNr3 = False

        Dim sekcjaNr2 As Boolean
        sekcjaNr2 = False

        Dim sekcjaNr1 As Boolean
        sekcjaNr1 = False

        ' GŁÓWNA METODA PRZESZUKIWANIA SIECI
        AddHandler buttonSprawdzSiec.Click, Sub()


                                                btnAuto = True
                                                btnManual = False

                                                AdresIpSekcjaNr1.Text = ""
                                                AdresIpSekcjaNr2.Text = ""
                                                AdresIpSekcjaNr3.Text = ""
                                                AdresIpSekcjaNr4.Text = "xxx"
                                                buttonSprawdzSiec.Enabled = False
                                                labelListaNieZawiera.Visible = False
                                                labelListaZawiera.Visible = False
                                                labelListaBrak.Visible = False
                                                buttonZapisz.Visible = False
                                                znalezionoTotal.Visible = False
                                                znalezionoWystepujaSystem.Visible = False
                                                znalezionoNieWystepujaSystem.Visible = False
                                                znalezionoInnyAdres.Visible = False
                                                znalezionoTotal.Text = "Wszystkie znalezione urządzenia: "
                                                znalezionoWystepujaSystem.Text = "Występuje w systemie: "
                                                znalezionoNieWystepujaSystem.Text = "Nie występuje w systemie: "
                                                znalezionoInnyAdres.Text = "Występuje w systemie pod innym adresem: "
                                                dataTable1 = New DataTable()
                                                DataGridView2.DataSource = Nothing
                                                DataGridView2.Rows.Clear()
                                                DataGridView2.Columns.Clear()
                                                DataGridView2.Controls.Remove(headerCheckBox)
                                                dataTable1.Columns.Clear()
                                                dataTable1.Clear()

                                                Dim activeConnectionsCount As Integer = 0 ' Licznik aktywnych połączeń sieciowych
                                                Dim radioYPos As Integer = 30


                                                For Each row As DataGridViewRow In DataGridView2.Rows
                                                    Dim checkBox As DataGridViewCheckBoxCell = (TryCast(row.Cells("checkBoxColumn"), DataGridViewCheckBoxCell))
                                                    checkBox.ReadOnly = True
                                                Next


                                                ' JEŻELI JEST WIĘCEJ NIŻ JEDNO AKTYWNE POŁĄCZENIE SIECIOWE
                                                Dim interfaces As NetworkInterface() = NetworkInterface.GetAllNetworkInterfaces()

                                                ' Tymczasowa lista dla adresów IP
                                                Dim allUnicastAddresses As New List(Of UnicastIPAddressInformation)()

                                                For Each networkInterface In interfaces
                                                    If networkInterface.OperationalStatus = OperationalStatus.Up AndAlso
                                                                                                                            networkInterface.NetworkInterfaceType <> NetworkInterfaceType.Loopback AndAlso
                                                                                                             networkInterface.NetworkInterfaceType <> NetworkInterfaceType.Tunnel Then

                                                        Dim ipProperties As IPInterfaceProperties = networkInterface.GetIPProperties()
                                                        Dim unicastAddresses As UnicastIPAddressInformationCollection = ipProperties.UnicastAddresses
                                                        For Each address As UnicastIPAddressInformation In unicastAddresses
                                                            If address.Address.AddressFamily = AddressFamily.InterNetwork Then
                                                                ' Dodajemy wykryte adresy do listy allUnicastAddresses
                                                                allUnicastAddresses.Add(address)
                                                            End If
                                                        Next
                                                    End If
                                                Next

                                                ' POBIERANIE ADRESÓW Z LISTY settings.siecAlternatywnaPodsiec
                                                For Each entry In settings.siecAlternatywnaPodsiec
                                                    Dim manualIp As String = entry.AddressIP
                                                    Dim manualSubnetMask As String = "255.255.255.0"

                                                    ' Walidacja adresu IP i maski podsieci
                                                    If Not String.IsNullOrEmpty(manualIp) AndAlso Not String.IsNullOrEmpty(manualSubnetMask) Then
                                                        Try
                                                            ' Konwertuj adres IP i maskę na odpowiednie obiekty
                                                            Dim manualIpAddress As System.Net.IPAddress = System.Net.IPAddress.Parse(manualIp)
                                                            Dim manualSubnetMaskAddress As System.Net.IPAddress = System.Net.IPAddress.Parse(manualSubnetMask)

                                                            ' Stwórz nowy obiekt UnicastIPAddressInformation dla ręcznie wpisanego adresu
                                                            Dim manualUnicastAddress As New CustomUnicastIPAddressInformation(manualIpAddress, manualSubnetMaskAddress)

                                                            ' Dodaj adres z ustawień do listy
                                                            allUnicastAddresses.Add(manualUnicastAddress)
                                                        Catch ex As FormatException

                                                        End Try
                                                    End If
                                                Next
                                                ' Teraz iteruj przez wszystkie adresy, w tym ręcznie dodany adres
                                                For Each address In allUnicastAddresses
                                                    Dim ipAddress As System.Net.IPAddress = address.Address
                                                    Dim subnetMask As System.Net.IPAddress = address.IPv4Mask

                                                    Dim ipBytes As Byte() = ipAddress.GetAddressBytes()
                                                    Dim maskBytes As Byte() = subnetMask.GetAddressBytes()

                                                    ' Oblicz minimalny adres IP
                                                    Dim minIpBytesDim As Byte() = New Byte(ipBytes.Length - 1) {}
                                                    For i As Integer = 0 To ipBytes.Length - 1
                                                        minIpBytesDim(i) = CByte(ipBytes(i) And maskBytes(i))
                                                    Next

                                                    ' Dodaj 1 do minimalnego adresu IP
                                                    Dim minIp As UInt32 = BitConverter.ToUInt32(minIpBytesDim.Reverse().ToArray(), 0)
                                                    minIp += 1
                                                    minIpBytesDim = BitConverter.GetBytes(minIp).Reverse().ToArray()
                                                    Dim minIpAddress As New System.Net.IPAddress(minIpBytesDim)

                                                    ' Oblicz maksymalny adres IP
                                                    Dim maxIpBytesDim As Byte() = New Byte(ipBytes.Length - 1) {}
                                                    For i As Integer = 0 To ipBytes.Length - 1
                                                        maxIpBytesDim(i) = CByte((ipBytes(i) And maskBytes(i)) Or (Not maskBytes(i)))
                                                    Next

                                                    ' Odejmij 1 od maksymalnego adresu IP
                                                    Dim maxIp As UInt32 = BitConverter.ToUInt32(maxIpBytesDim.Reverse().ToArray(), 0)
                                                    maxIp -= 1
                                                    maxIpBytesDim = BitConverter.GetBytes(maxIp).Reverse().ToArray()
                                                    Dim maxIpAddress As New System.Net.IPAddress(maxIpBytesDim)



                                                    Dim radioButton As New RadioButton()
                                                    With radioButton
                                                        radioButton.Visible = True
                                                        radioButton.Text = minIpAddress.ToString() & " - " & maxIpAddress.ToString()
                                                        .Size = New System.Drawing.Size(ramkaDostepneSieci.Width * 0.5, 30)
                                                        .ForeColor = Color.Black
                                                        .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                                                    End With
                                                    DodajElementDoPanelu(radioButton, panelDostepneSieci, ramkaDostepneSieci)
                                                    radioButtons.Add(radioButton)

                                                    radioButton.Location = New System.Drawing.Point((ramkaDostepneSieci.Width - radioButton.Width) / 2 + 50, radioYPos)

                                                    AdresIpSekcjaNr1.Visible = False
                                                    AdresIpSekcjaNr2.Visible = False
                                                    AdresIpSekcjaNr3.Visible = False
                                                    AdresIpSekcjaNr4.Visible = False
                                                    labelZakres1a.Visible = False

                                                    labelWarunkiTak.Visible = False
                                                    labelWarunkiNie.Visible = True

                                                    AddHandler buttonSzukajPrinter.Click, Async Sub()
                                                                                              radioButton.Enabled = False
                                                                                          End Sub

                                                    ' Obsługa zdarzenia CheckedChanged
                                                    AddHandler radioButton.CheckedChanged, Sub(sender1 As Object, ee As EventArgs)

                                                                                               labelListaNieZawiera.Visible = False
                                                                                               labelListaZawiera.Visible = False
                                                                                               znalezionoTotal.Visible = False
                                                                                               labelListaBrak.Visible = False

                                                                                               Dim dataTable1 As DataTable = Nothing ' Deklaracja zmiennej dataTable1

                                                                                               ' Sprawdzenie, czy dataTable1 istnieje
                                                                                               If dataTable1 IsNot Nothing Then
                                                                                                   DataGridView2.DataSource = Nothing
                                                                                                   DataGridView2.Rows.Clear()
                                                                                                   DataGridView2.Columns.Clear()
                                                                                                   DataGridView2.Controls.Remove(headerCheckBox)
                                                                                                   dataTable1.Columns.Clear()
                                                                                                   dataTable1.Clear()
                                                                                               Else
                                                                                                   dataTable1 = New DataTable()
                                                                                                   dataTable1.Columns.Add("Istnieje", GetType(String))
                                                                                                   dataTable1.Columns.Add("Adres", GetType(String))
                                                                                                   dataTable1.Columns.Add("Nazwa hosta", GetType(String))
                                                                                                   dataTable1.Columns.Add("Urządzenie", GetType(String))
                                                                                                   dataTable1.Columns.Add("Nr seryjny", GetType(String))
                                                                                                   dataTable1.Columns.Add("MAC", GetType(String))
                                                                                                   dataTable1.Columns.Add("Miejsce postoju", GetType(String))
                                                                                                   dataTable1.Columns.Add("Dodatkowe informacje", GetType(String))
                                                                                               End If


                                                                                               progressBar.Visible = False
                                                                                               progressLabel.Visible = False
                                                                                               AdresIpSekcjaNr1.Text = ""
                                                                                               AdresIpSekcjaNr2.Text = ""
                                                                                               AdresIpSekcjaNr3.Text = ""
                                                                                               AdresIpSekcjaNr4.Text = "xxx"

                                                                                               Dim selectedRadioButton As RadioButton = DirectCast(sender1, RadioButton)

                                                                                               If selectedRadioButton.Checked Then
                                                                                                   Dim selectedText As String = selectedRadioButton.Text

                                                                                                   ' Rozdziel tekst na dwa adresy IP
                                                                                                   Dim ipRange As String() = selectedText.Split("-"c)
                                                                                                   Dim minIpStr As String = ipRange(0).Trim()
                                                                                                   Dim maxIpStr As String = ipRange(1).Trim()

                                                                                                   ' Rozbij oba adresy IP na oktety
                                                                                                   Dim minIpParts As String() = minIpStr.Split("."c)
                                                                                                   Dim maxIpParts As String() = maxIpStr.Split("."c)

                                                                                                   ' Konwersja oktetów na liczby całkowite
                                                                                                   minIpBytes = minIpParts.Select(Function(part) Byte.Parse(part)).ToArray()
                                                                                                   maxIpBytes = maxIpParts.Select(Function(part) Byte.Parse(part)).ToArray()


                                                                                                   If ((maxIpBytes(2) - minIpBytes(2)) <> 0 AndAlso (maxIpBytes(1) - minIpBytes(1)) <> 0 AndAlso (maxIpBytes(0) - minIpBytes(0)) <> 0) Then

                                                                                                       sekcjaNr1 = True
                                                                                                       sekcjaNr2 = False
                                                                                                       sekcjaNr3 = False
                                                                                                       sekcjaNr4 = False

                                                                                                       labelAdres.Visible = False
                                                                                                       labelZakres.Visible = False
                                                                                                       labelWarunkiTak.Visible = False
                                                                                                       labelWarunkiNie.Visible = True
                                                                                                       ramkaDanePodsieci.Visible = True
                                                                                                       labelZakres1.Visible = False
                                                                                                       labelZakres1a.Visible = True
                                                                                                       buttonSzukajPrinter.Enabled = False

                                                                                                       AdresIpSekcjaNr1.Visible = True
                                                                                                       AdresIpSekcjaNr2.Visible = True
                                                                                                       AdresIpSekcjaNr3.Visible = True
                                                                                                       AdresIpSekcjaNr4.Visible = True

                                                                                                       AdresIpSekcjaNr1.BackColor = Color.FromArgb(204, 255, 153)
                                                                                                       AdresIpSekcjaNr2.BackColor = Color.FromArgb(204, 255, 153)
                                                                                                       AdresIpSekcjaNr3.BackColor = Color.FromArgb(204, 255, 153)

                                                                                                       AddHandler AdresIpSekcjaNr1.TextChanged, Sub(sender7 As Object, e7 As EventArgs)
                                                                                                                                                    If AdresIpSekcjaNr1.Text.Length > 0 And AdresIpSekcjaNr2.Text.Length > 0 And AdresIpSekcjaNr3.Text.Length > 0 Then
                                                                                                                                                        buttonSzukajPrinter.Enabled = True
                                                                                                                                                        labelWarunkiTak.Visible = True
                                                                                                                                                        labelWarunkiNie.Visible = False
                                                                                                                                                    Else
                                                                                                                                                        buttonSzukajPrinter.Enabled = False
                                                                                                                                                        labelWarunkiTak.Visible = False
                                                                                                                                                        labelWarunkiNie.Visible = True
                                                                                                                                                    End If
                                                                                                                                                End Sub
                                                                                                       AddHandler AdresIpSekcjaNr2.TextChanged, Sub(sender7 As Object, e7 As EventArgs)
                                                                                                                                                    If AdresIpSekcjaNr1.Text.Length > 0 And AdresIpSekcjaNr2.Text.Length > 0 And AdresIpSekcjaNr3.Text.Length > 0 Then
                                                                                                                                                        buttonSzukajPrinter.Enabled = True
                                                                                                                                                        labelWarunkiTak.Visible = True
                                                                                                                                                        labelWarunkiNie.Visible = False
                                                                                                                                                    Else
                                                                                                                                                        buttonSzukajPrinter.Enabled = False
                                                                                                                                                        labelWarunkiTak.Visible = False
                                                                                                                                                        labelWarunkiNie.Visible = True
                                                                                                                                                    End If
                                                                                                                                                End Sub
                                                                                                       AddHandler AdresIpSekcjaNr3.TextChanged, Sub(sender8 As Object, e8 As EventArgs)
                                                                                                                                                    If AdresIpSekcjaNr1.Text.Length > 0 And AdresIpSekcjaNr2.Text.Length > 0 And AdresIpSekcjaNr3.Text.Length > 0 Then
                                                                                                                                                        buttonSzukajPrinter.Enabled = True
                                                                                                                                                        labelWarunkiTak.Visible = True
                                                                                                                                                        labelWarunkiNie.Visible = False
                                                                                                                                                    Else
                                                                                                                                                        buttonSzukajPrinter.Enabled = False
                                                                                                                                                        labelWarunkiTak.Visible = False
                                                                                                                                                        labelWarunkiNie.Visible = True
                                                                                                                                                    End If
                                                                                                                                                End Sub


                                                                                                   ElseIf ((maxIpBytes(2) - minIpBytes(2)) <> 0 AndAlso (maxIpBytes(1) - minIpBytes(1)) <> 0) Then

                                                                                                       sekcjaNr1 = False
                                                                                                       sekcjaNr2 = True
                                                                                                       sekcjaNr3 = False
                                                                                                       sekcjaNr4 = False

                                                                                                       labelAdres.Visible = False
                                                                                                       labelZakres.Visible = False
                                                                                                       labelWarunkiTak.Visible = False
                                                                                                       labelWarunkiNie.Visible = True
                                                                                                       ramkaDanePodsieci.Visible = True
                                                                                                       labelZakres1.Visible = False
                                                                                                       labelZakres1a.Visible = True
                                                                                                       buttonSzukajPrinter.Enabled = False

                                                                                                       AdresIpSekcjaNr1.Visible = True
                                                                                                       AdresIpSekcjaNr2.Visible = True
                                                                                                       AdresIpSekcjaNr3.Visible = True
                                                                                                       AdresIpSekcjaNr4.Visible = True

                                                                                                       AdresIpSekcjaNr1.Text = maxIpBytes(0)
                                                                                                       AdresIpSekcjaNr1.Enabled = False
                                                                                                       AdresIpSekcjaNr1.BackColor = Color.FromArgb(217, 217, 217)

                                                                                                       AdresIpSekcjaNr2.BackColor = Color.FromArgb(204, 255, 153)

                                                                                                       AdresIpSekcjaNr3.BackColor = Color.FromArgb(204, 255, 153)

                                                                                                       AddHandler AdresIpSekcjaNr2.TextChanged, Sub(sender7 As Object, e7 As EventArgs)
                                                                                                                                                    If AdresIpSekcjaNr2.Text.Length > 0 And AdresIpSekcjaNr3.Text.Length > 0 Then
                                                                                                                                                        buttonSzukajPrinter.Enabled = True
                                                                                                                                                        labelWarunkiTak.Visible = True
                                                                                                                                                        labelWarunkiNie.Visible = False
                                                                                                                                                    Else
                                                                                                                                                        buttonSzukajPrinter.Enabled = False
                                                                                                                                                        labelWarunkiTak.Visible = False
                                                                                                                                                        labelWarunkiNie.Visible = True
                                                                                                                                                    End If
                                                                                                                                                End Sub
                                                                                                       AddHandler AdresIpSekcjaNr3.TextChanged, Sub(sender8 As Object, e8 As EventArgs)
                                                                                                                                                    If AdresIpSekcjaNr2.Text.Length > 0 And AdresIpSekcjaNr3.Text.Length > 0 Then
                                                                                                                                                        buttonSzukajPrinter.Enabled = True
                                                                                                                                                        labelWarunkiTak.Visible = True
                                                                                                                                                        labelWarunkiNie.Visible = False
                                                                                                                                                    Else
                                                                                                                                                        buttonSzukajPrinter.Enabled = False
                                                                                                                                                        labelWarunkiTak.Visible = False
                                                                                                                                                        labelWarunkiNie.Visible = True
                                                                                                                                                    End If
                                                                                                                                                End Sub

                                                                                                   ElseIf (maxIpBytes(2) - minIpBytes(2)) <> 0 Then

                                                                                                       sekcjaNr1 = False
                                                                                                       sekcjaNr2 = False
                                                                                                       sekcjaNr3 = True
                                                                                                       sekcjaNr4 = False

                                                                                                       labelAdres.Visible = False
                                                                                                       labelZakres.Visible = False
                                                                                                       labelWarunkiTak.Visible = False
                                                                                                       labelWarunkiNie.Visible = True
                                                                                                       ramkaDanePodsieci.Visible = True
                                                                                                       labelZakres1.Visible = True
                                                                                                       labelZakres1a.Visible = False
                                                                                                       buttonSzukajPrinter.Enabled = False

                                                                                                       AdresIpSekcjaNr1.Visible = True
                                                                                                       AdresIpSekcjaNr2.Visible = True
                                                                                                       AdresIpSekcjaNr3.Visible = True
                                                                                                       AdresIpSekcjaNr4.Visible = True

                                                                                                       AdresIpSekcjaNr1.Text = maxIpBytes(0)
                                                                                                       AdresIpSekcjaNr1.Enabled = False
                                                                                                       AdresIpSekcjaNr1.BackColor = Color.FromArgb(217, 217, 217)

                                                                                                       AdresIpSekcjaNr2.Text = maxIpBytes(1)
                                                                                                       AdresIpSekcjaNr2.Enabled = False
                                                                                                       AdresIpSekcjaNr2.BackColor = Color.FromArgb(217, 217, 217)

                                                                                                       AdresIpSekcjaNr3.BackColor = Color.FromArgb(204, 255, 153)

                                                                                                       AddHandler AdresIpSekcjaNr3.TextChanged, Sub(sender6 As Object, e6 As EventArgs)
                                                                                                                                                    If AdresIpSekcjaNr3.Text.Length > 0 Then
                                                                                                                                                        buttonSzukajPrinter.Enabled = True
                                                                                                                                                        labelWarunkiTak.Visible = True
                                                                                                                                                        labelWarunkiNie.Visible = False
                                                                                                                                                    Else
                                                                                                                                                        buttonSzukajPrinter.Enabled = False
                                                                                                                                                        labelWarunkiTak.Visible = False
                                                                                                                                                        labelWarunkiNie.Visible = True
                                                                                                                                                    End If
                                                                                                                                                End Sub

                                                                                                   Else

                                                                                                       sekcjaNr1 = False
                                                                                                       sekcjaNr2 = False
                                                                                                       sekcjaNr3 = False
                                                                                                       sekcjaNr4 = True

                                                                                                       labelWarunkiTak.Visible = True
                                                                                                       labelWarunkiNie.Visible = False
                                                                                                       labelAdres.Visible = False
                                                                                                       ramkaDanePodsieci.Visible = False
                                                                                                       labelZakres1.Visible = False
                                                                                                       labelZakres.Visible = False
                                                                                                       labelZakres1a.Visible = False
                                                                                                       buttonSzukajPrinter.Enabled = True
                                                                                                       AdresIpSekcjaNr1.Visible = False
                                                                                                       AdresIpSekcjaNr2.Visible = False
                                                                                                       AdresIpSekcjaNr3.Visible = False
                                                                                                       AdresIpSekcjaNr4.Visible = False

                                                                                                   End If

                                                                                               Else
                                                                                                   If buttonSzukajPrinter.Enabled = True Then
                                                                                                       radioButton.Enabled = True
                                                                                                   End If

                                                                                               End If


                                                                                           End Sub

                                                    radioButton.Enabled = True

                                                    radioYPos += radioButton.Height + 5 ' Przesuń pozycję Y dla kolejnego przycisku RadioButton

                                                    activeConnectionsCount += 1 ' Zwiększ licznik aktywnych połączeń
                                                Next



                                                ' JEŻELI JEST JEDNO AKTYWNE POŁĄCZENIE SIECIOWE
                                                If activeConnectionsCount = 1 Then
                                                    jednoActive = True

                                                    For Each radio As RadioButton In radioButtons
                                                        radio.Visible = False
                                                    Next radio

                                                    labelAdres.Visible = False


                                                    For Each networkInterface In interfaces
                                                        If networkInterface.OperationalStatus = OperationalStatus.Up AndAlso
                                                                                                                                           networkInterface.NetworkInterfaceType <> NetworkInterfaceType.Loopback AndAlso
                                                                                                                                             networkInterface.NetworkInterfaceType <> NetworkInterfaceType.Tunnel Then

                                                            Dim ipProperties As IPInterfaceProperties = networkInterface.GetIPProperties()
                                                            Dim unicastAddresses As UnicastIPAddressInformationCollection = ipProperties.UnicastAddresses

                                                            For Each address As UnicastIPAddressInformation In unicastAddresses
                                                                If address.Address.AddressFamily = AddressFamily.InterNetwork Then
                                                                    Dim ipAddress As System.Net.IPAddress = address.Address
                                                                    Dim subnetMask As System.Net.IPAddress = address.IPv4Mask

                                                                    Dim ipBytes As Byte() = ipAddress.GetAddressBytes()
                                                                    Dim maskBytes As Byte() = subnetMask.GetAddressBytes()
                                                                    ' Oblicz minimalny adres IP
                                                                    minIpBytes = New Byte(ipBytes.Length - 1) {}
                                                                    For i As Integer = 0 To ipBytes.Length - 1
                                                                        minIpBytes(i) = CByte(ipBytes(i) And maskBytes(i))
                                                                    Next

                                                                    ' Dodaj 1 do minimalnego adresu IP
                                                                    Dim minIp As UInt32 = BitConverter.ToUInt32(minIpBytes.Reverse().ToArray(), 0)
                                                                    minIp += 1
                                                                    minIpBytes = BitConverter.GetBytes(minIp).Reverse().ToArray()
                                                                    minIpAddress = New System.Net.IPAddress(minIpBytes)
                                                                    ' Oblicz maksymalny adres IP
                                                                    maxIpBytes = New Byte(ipBytes.Length - 1) {}
                                                                    For i As Integer = 0 To ipBytes.Length - 1
                                                                        maxIpBytes(i) = CByte((ipBytes(i) And maskBytes(i)) Or (Not maskBytes(i)))
                                                                    Next

                                                                    ' Odejmij 1 od maksymalnego adresu IP
                                                                    Dim maxIp As UInt32 = BitConverter.ToUInt32(maxIpBytes.Reverse().ToArray(), 0)
                                                                    maxIp -= 1
                                                                    maxIpBytes = BitConverter.GetBytes(maxIp).Reverse().ToArray()
                                                                    maxIpAddress = New System.Net.IPAddress(maxIpBytes)

                                                                    labelAdresIpTylkoJeden.Text = minIpAddress.ToString() & " - " & maxIpAddress.ToString()
                                                                    labelAdresIpTylkoJeden.Visible = True
                                                                    labelAdresIpTylkoJeden.Location = New System.Drawing.Point((ramkaDostepneSieci.Width - labelAdresIpTylkoJeden.Width) / 2, 55)

                                                                    dataTable1 = New DataTable()
                                                                    dataTable1.Columns.Clear()

                                                                    dataTable1.Columns.Add("Adres", GetType(String))
                                                                    dataTable1.Columns.Add("Nazwa hosta", GetType(String))
                                                                    dataTable1.Columns.Add("Urządzenie", GetType(String))
                                                                    dataTable1.Columns.Add("Nr seryjny", GetType(String))
                                                                    dataTable1.Columns.Add("MAC", GetType(String))
                                                                    dataTable1.Columns.Add("Miejsce postaju", GetType(String))
                                                                    dataTable1.Columns.Add("Dodatkowe informacje", GetType(String))

                                                                    If ((maxIpBytes(2) - minIpBytes(2)) <> 0 AndAlso (maxIpBytes(1) - minIpBytes(1)) <> 0 AndAlso (maxIpBytes(0) - minIpBytes(0)) <> 0) Then

                                                                        sekcjaNr1 = True
                                                                        sekcjaNr2 = False
                                                                        sekcjaNr3 = False
                                                                        sekcjaNr4 = False

                                                                        labelAdres.Visible = False
                                                                        labelZakres.Visible = True
                                                                        labelWarunkiTak.Visible = False
                                                                        labelWarunkiNie.Visible = True
                                                                        ramkaDanePodsieci.Visible = True
                                                                        labelZakres1.Visible = False
                                                                        labelZakres1a.Visible = True
                                                                        buttonSzukajPrinter.Enabled = False

                                                                        AdresIpSekcjaNr1.Visible = True
                                                                        AdresIpSekcjaNr2.Visible = True
                                                                        AdresIpSekcjaNr3.Visible = True
                                                                        AdresIpSekcjaNr4.Visible = True

                                                                        AdresIpSekcjaNr1.BackColor = Color.FromArgb(204, 255, 153)
                                                                        AdresIpSekcjaNr2.BackColor = Color.FromArgb(204, 255, 153)
                                                                        AdresIpSekcjaNr3.BackColor = Color.FromArgb(204, 255, 153)

                                                                        AddHandler AdresIpSekcjaNr1.TextChanged, Sub(sender7 As Object, e7 As EventArgs)
                                                                                                                     If AdresIpSekcjaNr1.Text.Length > 0 And AdresIpSekcjaNr2.Text.Length > 0 And AdresIpSekcjaNr3.Text.Length > 0 Then
                                                                                                                         buttonSzukajPrinter.Enabled = True
                                                                                                                         labelWarunkiTak.Visible = True
                                                                                                                         labelWarunkiNie.Visible = False
                                                                                                                     Else
                                                                                                                         buttonSzukajPrinter.Enabled = False
                                                                                                                         labelWarunkiTak.Visible = False
                                                                                                                         labelWarunkiNie.Visible = True
                                                                                                                     End If
                                                                                                                 End Sub
                                                                        AddHandler AdresIpSekcjaNr2.TextChanged, Sub(sender7 As Object, e7 As EventArgs)
                                                                                                                     If AdresIpSekcjaNr1.Text.Length > 0 And AdresIpSekcjaNr2.Text.Length > 0 And AdresIpSekcjaNr3.Text.Length > 0 Then
                                                                                                                         buttonSzukajPrinter.Enabled = True
                                                                                                                         labelWarunkiTak.Visible = True
                                                                                                                         labelWarunkiNie.Visible = False
                                                                                                                     Else
                                                                                                                         buttonSzukajPrinter.Enabled = False
                                                                                                                         labelWarunkiTak.Visible = False
                                                                                                                         labelWarunkiNie.Visible = True
                                                                                                                     End If
                                                                                                                 End Sub
                                                                        AddHandler AdresIpSekcjaNr3.TextChanged, Sub(sender8 As Object, e8 As EventArgs)
                                                                                                                     If AdresIpSekcjaNr1.Text.Length > 0 And AdresIpSekcjaNr2.Text.Length > 0 And AdresIpSekcjaNr3.Text.Length > 0 Then
                                                                                                                         buttonSzukajPrinter.Enabled = True
                                                                                                                         labelWarunkiTak.Visible = True
                                                                                                                         labelWarunkiNie.Visible = False
                                                                                                                     Else
                                                                                                                         buttonSzukajPrinter.Enabled = False
                                                                                                                         labelWarunkiTak.Visible = False
                                                                                                                         labelWarunkiNie.Visible = True
                                                                                                                     End If
                                                                                                                 End Sub


                                                                    ElseIf ((maxIpBytes(2) - minIpBytes(2)) <> 0 AndAlso (maxIpBytes(1) - minIpBytes(1)) <> 0) Then

                                                                        sekcjaNr1 = False
                                                                        sekcjaNr2 = True
                                                                        sekcjaNr3 = False
                                                                        sekcjaNr4 = False

                                                                        labelAdres.Visible = False
                                                                        labelZakres.Visible = True
                                                                        labelWarunkiTak.Visible = False
                                                                        labelWarunkiNie.Visible = True
                                                                        ramkaDanePodsieci.Visible = True
                                                                        labelZakres1.Visible = False
                                                                        labelZakres1a.Visible = True
                                                                        buttonSzukajPrinter.Enabled = False

                                                                        AdresIpSekcjaNr1.Visible = True
                                                                        AdresIpSekcjaNr2.Visible = True
                                                                        AdresIpSekcjaNr3.Visible = True
                                                                        AdresIpSekcjaNr4.Visible = True

                                                                        AdresIpSekcjaNr1.Text = maxIpBytes(0)
                                                                        AdresIpSekcjaNr1.Enabled = False
                                                                        AdresIpSekcjaNr1.BackColor = Color.FromArgb(217, 217, 217)

                                                                        AdresIpSekcjaNr2.BackColor = Color.FromArgb(204, 255, 153)

                                                                        AdresIpSekcjaNr3.BackColor = Color.FromArgb(204, 255, 153)

                                                                        AddHandler AdresIpSekcjaNr2.TextChanged, Sub(sender7 As Object, e7 As EventArgs)
                                                                                                                     If AdresIpSekcjaNr2.Text.Length > 0 And AdresIpSekcjaNr3.Text.Length > 0 Then
                                                                                                                         buttonSzukajPrinter.Enabled = True
                                                                                                                         labelWarunkiTak.Visible = True
                                                                                                                         labelWarunkiNie.Visible = False
                                                                                                                     Else
                                                                                                                         buttonSzukajPrinter.Enabled = False
                                                                                                                         labelWarunkiTak.Visible = False
                                                                                                                         labelWarunkiNie.Visible = True
                                                                                                                     End If
                                                                                                                 End Sub
                                                                        AddHandler AdresIpSekcjaNr3.TextChanged, Sub(sender8 As Object, e8 As EventArgs)
                                                                                                                     If AdresIpSekcjaNr2.Text.Length > 0 And AdresIpSekcjaNr3.Text.Length > 0 Then
                                                                                                                         buttonSzukajPrinter.Enabled = True
                                                                                                                         labelWarunkiTak.Visible = True
                                                                                                                         labelWarunkiNie.Visible = False
                                                                                                                     Else
                                                                                                                         buttonSzukajPrinter.Enabled = False
                                                                                                                         labelWarunkiTak.Visible = False
                                                                                                                         labelWarunkiNie.Visible = True
                                                                                                                     End If
                                                                                                                 End Sub

                                                                    ElseIf (maxIpBytes(2) - minIpBytes(2)) <> 0 Then

                                                                        sekcjaNr1 = False
                                                                        sekcjaNr2 = False
                                                                        sekcjaNr3 = True
                                                                        sekcjaNr4 = False

                                                                        labelAdres.Visible = False
                                                                        labelZakres.Visible = True
                                                                        labelWarunkiTak.Visible = False
                                                                        labelWarunkiNie.Visible = True
                                                                        ramkaDanePodsieci.Visible = True
                                                                        labelZakres1.Visible = True
                                                                        labelZakres1a.Visible = False
                                                                        buttonSzukajPrinter.Enabled = False

                                                                        AdresIpSekcjaNr1.Visible = True
                                                                        AdresIpSekcjaNr2.Visible = True
                                                                        AdresIpSekcjaNr3.Visible = True
                                                                        AdresIpSekcjaNr4.Visible = True

                                                                        AdresIpSekcjaNr1.Text = maxIpBytes(0)
                                                                        AdresIpSekcjaNr1.Enabled = False
                                                                        AdresIpSekcjaNr1.BackColor = Color.FromArgb(217, 217, 217)

                                                                        AdresIpSekcjaNr2.Text = maxIpBytes(1)
                                                                        AdresIpSekcjaNr2.Enabled = False
                                                                        AdresIpSekcjaNr2.BackColor = Color.FromArgb(217, 217, 217)

                                                                        AdresIpSekcjaNr3.BackColor = Color.FromArgb(204, 255, 153)

                                                                        AddHandler AdresIpSekcjaNr3.TextChanged, Sub(sender6 As Object, e6 As EventArgs)
                                                                                                                     If AdresIpSekcjaNr3.Text.Length > 0 Then
                                                                                                                         buttonSzukajPrinter.Enabled = True
                                                                                                                         labelWarunkiTak.Visible = True
                                                                                                                         labelWarunkiNie.Visible = False
                                                                                                                     Else
                                                                                                                         buttonSzukajPrinter.Enabled = False
                                                                                                                         labelWarunkiTak.Visible = False
                                                                                                                         labelWarunkiNie.Visible = True
                                                                                                                     End If
                                                                                                                 End Sub

                                                                    Else

                                                                        sekcjaNr1 = False
                                                                        sekcjaNr2 = False
                                                                        sekcjaNr3 = False
                                                                        sekcjaNr4 = True

                                                                        labelWarunkiTak.Visible = True
                                                                        labelWarunkiNie.Visible = False
                                                                        labelAdres.Visible = False
                                                                        ramkaDanePodsieci.Visible = False
                                                                        labelZakres1.Visible = False
                                                                        labelZakres.Visible = True
                                                                        labelZakres1a.Visible = False
                                                                        buttonSzukajPrinter.Enabled = True
                                                                        AdresIpSekcjaNr1.Visible = False
                                                                        AdresIpSekcjaNr2.Visible = False
                                                                        AdresIpSekcjaNr3.Visible = False
                                                                        AdresIpSekcjaNr4.Visible = False

                                                                    End If



                                                                End If
                                                            Next
                                                        End If
                                                    Next


                                                End If

                                                If activeConnectionsCount > 1 Then

                                                    wieleActive = True
                                                    labelZakres.Visible = False
                                                    labelAdres.Visible = False
                                                    labelZakresWybierz.Visible = True
                                                End If
                                            End Sub




        ' PRZYCISK SZUKAJ DLA RĘCZNIE I AUTO
        AddHandler buttonSzukajPrinter.Click, Async Sub()
                                                  ' Ustawienia wspólne

                                                  For Each btn As Button In buttonList
                                                      If btn Is sender Then
                                                          btn.Enabled = True
                                                      Else
                                                          btn.Enabled = False
                                                      End If
                                                  Next

                                                  labelWarunkiTak.Visible = False
                                                  labelWyszukiwanieZakończone.Visible = False
                                                  buttonSzukajPrinter.Enabled = False
                                                  znalezionoTotal.Visible = False
                                                  znalezionoWystepujaSystem.Visible = False
                                                  znalezionoNieWystepujaSystem.Visible = False
                                                  znalezionoInnyAdres.Visible = False
                                                  znalezionoTotal.Text = "Wszystkie znalezione urządzenia: "
                                                  znalezionoWystepujaSystem.Text = "Występuje w systemie: "
                                                  znalezionoNieWystepujaSystem.Text = "Nie występuje w systemie: "
                                                  znalezionoInnyAdres.Text = "Występuje w systemie pod innym adresem: "
                                                  dataTable1 = New DataTable()
                                                  DataGridView2.DataSource = Nothing
                                                  DataGridView2.Rows.Clear()
                                                  DataGridView2.Columns.Clear()
                                                  DataGridView2.Controls.Remove(headerCheckBox)
                                                  dataTable1.Columns.Clear()
                                                  dataTable1.Clear()

                                                  dataTable1.Columns.Add("Istnieje", GetType(String))
                                                  dataTable1.Columns.Add("Adres", GetType(String))
                                                  dataTable1.Columns.Add("Nazwa hosta", GetType(String))
                                                  dataTable1.Columns.Add("Urządzenie", GetType(String))
                                                  dataTable1.Columns.Add("Nr seryjny", GetType(String))
                                                  dataTable1.Columns.Add("MAC", GetType(String))
                                                  dataTable1.Columns.Add("Miejsce postoju", GetType(String))
                                                  dataTable1.Columns.Add("Dodatkowe informacje", GetType(String))

                                                  DataGridView2.DataSource = dataTable1

                                                  If settings.slownikMiejscePostojuON Then

                                                      Dim miejsceComboBox As New DataGridViewComboBoxColumn()
                                                      miejsceComboBox.Name = "Miejsce postoju"
                                                      miejsceComboBox.HeaderText = "Miejsce postoju"
                                                      miejsceComboBox.DataPropertyName = "Miejsce postoju"

                                                      For Each pozycja As slMiejPost In settings.slownikMiejscePostoju
                                                          miejsceComboBox.Items.Add(pozycja.MiejscePostoju)
                                                      Next

                                                      Dim macColumnIndex As Integer = dataTable1.Columns("MAC").Ordinal

                                                      If DataGridView2.Columns.Contains("Miejsce postoju") Then
                                                          DataGridView2.Columns.Remove("Miejsce postoju")
                                                      End If

                                                      DataGridView2.Columns.Insert(macColumnIndex + 1, miejsceComboBox)
                                                      DataGridView2.Columns("Urządzenie").Width = panelZnalezioneUrzadzenia.Width * 0.18
                                                  Else
                                                      DataGridView2.Columns("Urządzenie").Width = panelZnalezioneUrzadzenia.Width * 0.2
                                                  End If

                                                  If settings.slownikDodatkoweInfoON Then

                                                      Dim dodatkInfoComboBox As New DataGridViewComboBoxColumn()
                                                      dodatkInfoComboBox.Name = "Dodatkowe informacje"
                                                      dodatkInfoComboBox.HeaderText = "Dodatkowe informacje"
                                                      dodatkInfoComboBox.DataPropertyName = "Dodatkowe informacje"

                                                      For Each pozycja As slDodInfo In settings.slownikDodatkoweInformacje
                                                          dodatkInfoComboBox.Items.Add(pozycja.DodatkoweInfo)
                                                      Next

                                                      Dim macColumnIndex As Integer = dataTable1.Columns("MAC").Ordinal

                                                      If DataGridView2.Columns.Contains("Dodatkowe informacje") Then
                                                          DataGridView2.Columns.Remove("Dodatkowe informacje")
                                                      End If

                                                      DataGridView2.Columns.Insert(macColumnIndex + 2, dodatkInfoComboBox)
                                                      DataGridView2.Columns("Urządzenie").Width = panelZnalezioneUrzadzenia.Width * 0.18
                                                  Else
                                                      DataGridView2.Columns("Urządzenie").Width = panelZnalezioneUrzadzenia.Width * 0.2
                                                  End If

                                                  ' Ustawienia kolumn i stylów
                                                  DataGridView2.Columns("Adres").DefaultCellStyle.Font = New System.Drawing.Font("Calibri", 10)
                                                  DataGridView2.Columns("Nazwa hosta").DefaultCellStyle.Font = New System.Drawing.Font("Calibri", 10)
                                                  DataGridView2.Columns("Urządzenie").DefaultCellStyle.Font = New System.Drawing.Font("Calibri", 10)
                                                  DataGridView2.Columns("Nr seryjny").DefaultCellStyle.Font = New System.Drawing.Font("Calibri", 10)
                                                  DataGridView2.Columns("MAC").DefaultCellStyle.Font = New System.Drawing.Font("Calibri", 10)
                                                  DataGridView2.Columns("Miejsce postoju").DefaultCellStyle.Font = New System.Drawing.Font("Calibri", 10)
                                                  DataGridView2.Columns("Dodatkowe informacje").DefaultCellStyle.Font = New System.Drawing.Font("Calibri", 10)
                                                  DataGridView2.Columns("Istnieje").DefaultCellStyle.Font = New System.Drawing.Font("Calibri", 26)
                                                  DataGridView2.Columns("Istnieje").DefaultCellStyle.ForeColor = Color.DarkOrange
                                                  DataGridView2.Columns("Istnieje").DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight

                                                  ' Blokowanie edycji odpowiednich komórek
                                                  DataGridView2.Columns("Adres").ReadOnly = True
                                                  DataGridView2.Columns("Urządzenie").ReadOnly = True
                                                  DataGridView2.Columns("Nr seryjny").ReadOnly = True
                                                  DataGridView2.Columns("MAC").ReadOnly = True
                                                  DataGridView2.Columns("Istnieje").ReadOnly = True

                                                  ' Ukrycie nagłówka kolumny "Istnieje"
                                                  DataGridView2.Columns("Istnieje").HeaderText = String.Empty

                                                  ' Ustawienia szerokości kolumn
                                                  DataGridView2.Columns("Adres").Width = panelZnalezioneUrzadzenia.Width * 0.08
                                                  DataGridView2.Columns("Nazwa hosta").Width = panelZnalezioneUrzadzenia.Width * 0.1

                                                  DataGridView2.Columns("Nr seryjny").Width = panelZnalezioneUrzadzenia.Width * 0.08
                                                  DataGridView2.Columns("Istnieje").Width = panelZnalezioneUrzadzenia.Width * 0.03
                                                  DataGridView2.Columns("MAC").Width = panelZnalezioneUrzadzenia.Width * 0.1
                                                  DataGridView2.Columns("Miejsce postoju").Width = panelZnalezioneUrzadzenia.Width * 0.2
                                                  DataGridView2.Columns("Dodatkowe informacje").Width = panelZnalezioneUrzadzenia.Width * 0.2

                                                  ' DODAJ ZAZNACZONE
                                                  AddHandler buttonZapisz.Click, Async Sub()


                                                                                     ' ZAPIS DO lista.json
                                                                                     Dim existingDevices As New List(Of Dane)()

                                                                                     If File.Exists(filePath) Then
                                                                                         Try
                                                                                             Dim readJson As String = File.ReadAllText(filePath)
                                                                                             existingDevices = JsonConvert.DeserializeObject(Of List(Of Dane))(readJson)
                                                                                         Catch ex As Exception
                                                                                             existingDevices = New List(Of Dane)()
                                                                                         End Try
                                                                                     Else
                                                                                         existingDevices = New List(Of Dane)()

                                                                                         dataTable = New DataTable()
                                                                                         Dim columnNumbers As Integer() = {0, 1, 2, 3, 4, 5, 6}
                                                                                         Dim columnNames As String() = {"Adres", "Nazwa hosta", "Urządzenie", "Nr seryjny", "MAC", "Miejsce postoju", "Dodatkowe informacje"}

                                                                                         For Each columnName As String In columnNames
                                                                                             dataTable.Columns.Add(columnName)
                                                                                         Next

                                                                                         dataTable.Columns.Add("Status", GetType(String))
                                                                                         dataTable.Columns.Add("Licznik M", GetType(String))
                                                                                         dataTable.Columns.Add("Licznik K", GetType(String))
                                                                                         dataTable.Columns.Add("Toner BK", GetType(String))
                                                                                         dataTable.Columns.Add("Toner Y", GetType(String))
                                                                                         dataTable.Columns.Add("Toner M", GetType(String))
                                                                                         dataTable.Columns.Add("Toner C", GetType(String))

                                                                                     End If

                                                                                     Dim iloscNowych As Integer = 0
                                                                                     Dim iloscZaktualizowanych As Integer = 0
                                                                                     Dim iloscNowychTabela As Integer = 0
                                                                                     Dim iloscZaktualizowanychTabela As Integer = 0


                                                                                     Dim newDane As New List(Of Dane)()

                                                                                     For Each row As DataGridViewRow In DataGridView2.Rows
                                                                                         Dim serial As String = row.Cells("Nr seryjny").Value.ToString()
                                                                                         Dim adres As String = row.Cells("Adres").Value.ToString()
                                                                                         Dim istniejeAll As Boolean = existingDevices.Any(Function(device) device.SerialNumber = serial AndAlso device.AdresIp = adres)
                                                                                         Dim istniejeOnlySerial As Boolean = existingDevices.Any(Function(device) device.SerialNumber = serial AndAlso device.AdresIp <> adres)

                                                                                         Dim isSelected As Boolean = Convert.ToBoolean(row.Cells("checkBoxColumn").Value)
                                                                                         If isSelected Then
                                                                                             Dim dane As New Dane()
                                                                                             dane.AdresIp = row.Cells("Adres").Value.ToString()
                                                                                             dane.Hostname = row.Cells("Nazwa hosta").Value.ToString()
                                                                                             dane.Urzadzenie = row.Cells("Urządzenie").Value.ToString()
                                                                                             dane.SerialNumber = row.Cells("Nr seryjny").Value.ToString()
                                                                                             dane.Mac = row.Cells("MAC").Value.ToString()
                                                                                             dane.MiejscePostoju = row.Cells("Miejsce postoju").Value.ToString()
                                                                                             dane.DodatkoweInfo = row.Cells("Dodatkowe informacje").Value.ToString()

                                                                                             If row.Cells("Istnieje").Value.ToString() = "" Then
                                                                                                 iloscNowychTabela += 1
                                                                                             Else
                                                                                                 iloscZaktualizowanychTabela += 1
                                                                                             End If

                                                                                             newDane.Add(dane)

                                                                                         End If
                                                                                     Next
                                                                                     If Not istniejeAll Then
                                                                                         If iloscNowychTabela > 0 AndAlso iloscZaktualizowanychTabela = 0 Then
                                                                                             iconPictureBox.Size = New System.Drawing.Size(134, 126)
                                                                                             iconPictureBox.Image = okIcon
                                                                                             pomyslnieDodano.Visible = True
                                                                                             dodanoTotal.Visible = True
                                                                                             buttonZakoncz.Visible = True
                                                                                             urzadzenieIstnieje.Visible = False
                                                                                             czyNadpisać.Visible = False
                                                                                             daneNadpisane.Visible = False
                                                                                             buttonZakoncz.Visible = True
                                                                                             buttonZakonczAlert.Visible = False
                                                                                             buttonEdytujUrzadzenie.Visible = False


                                                                                             For Each dane In newDane
                                                                                                 existingDevices.Add(dane)

                                                                                                 ' Dodanie nowej drukarki do DataGridView1
                                                                                                 Dim newRow As DataRow = dataTable.NewRow()
                                                                                                 newRow("Adres") = dane.AdresIp
                                                                                                 newRow("Nazwa hosta") = dane.Hostname
                                                                                                 newRow("Urządzenie") = dane.Urzadzenie
                                                                                                 newRow("Nr seryjny") = dane.SerialNumber
                                                                                                 newRow("MAC") = dane.Mac
                                                                                                 newRow("Miejsce postoju") = dane.MiejscePostoju
                                                                                                 newRow("Dodatkowe informacje") = dane.DodatkoweInfo
                                                                                                 ' Dodanie nowego wiersza do DataTable
                                                                                                 dataTable.Rows.Add(newRow)

                                                                                                 iloscNowych += 1


                                                                                                 UpdateDataSinglePrinter(dane.AdresIp, serial:=dane.SerialNumber, hostname:=dane.Hostname, miejscePostoju:=dane.MiejscePostoju, dodatkoweInfo:=dane.DodatkoweInfo)


                                                                                             Next

                                                                                             dodanoTotal.Text = "Liczba nowych urządzeń: " & iloscNowych.ToString()

                                                                                             Dim updatedJson1 As String = JsonConvert.SerializeObject(existingDevices, Formatting.Indented)
                                                                                             File.WriteAllText(filePath, updatedJson1)

                                                                                             detailsForm1.ShowDialog()
                                                                                         End If

                                                                                         If iloscZaktualizowanychTabela > 0 Then
                                                                                             detailsForm1.Width = 800

                                                                                             urzadzenieIstnieje.Width = detailsForm1.Width
                                                                                             czyNadpisać.Width = detailsForm1.Width
                                                                                             urzadzenieIstnieje.Location = New System.Drawing.Point((detailsForm1.Width - urzadzenieIstnieje.Width) \ 2, 30)
                                                                                             czyNadpisać.Location = New System.Drawing.Point((detailsForm1.Width - czyNadpisać.Width) \ 2, 80)
                                                                                             daneNadpisane.Location = New System.Drawing.Point((detailsForm1.Width - daneNadpisane.Width) \ 2, 110)

                                                                                             urzadzenieIstnieje.Visible = True
                                                                                             czyNadpisać.Visible = True
                                                                                             daneNadpisane.Visible = True
                                                                                             buttonZakoncz.Visible = False
                                                                                             buttonZakonczAlert.Visible = True
                                                                                             buttonEdytujUrzadzenie.Visible = True

                                                                                             pomyslnieDodano.Visible = False
                                                                                             dodanoTotal.Visible = False
                                                                                             buttonZakoncz.Visible = False

                                                                                             AddHandler buttonEdytujUrzadzenie.Click, Sub()

                                                                                                                                          For Each dane In newDane
                                                                                                                                              ' Szukamy urządzenia o tym samym numerze seryjnym
                                                                                                                                              Dim matchingDevice As Dane = existingDevices.FirstOrDefault(Function(d) d.SerialNumber = dane.SerialNumber)

                                                                                                                                              ' Sprawdzamy, czy znaleziono dopasowanie
                                                                                                                                              If matchingDevice IsNot Nothing Then
                                                                                                                                                  ' Jeśli urządzenie istnieje i ma ten sam numer seryjny, aktualizujemy jego dane
                                                                                                                                                  matchingDevice.AdresIp = dane.AdresIp
                                                                                                                                                  matchingDevice.Hostname = dane.Hostname
                                                                                                                                                  matchingDevice.Urzadzenie = dane.Urzadzenie
                                                                                                                                                  matchingDevice.Mac = dane.Mac
                                                                                                                                                  matchingDevice.MiejscePostoju = dane.MiejscePostoju
                                                                                                                                                  matchingDevice.DodatkoweInfo = dane.DodatkoweInfo

                                                                                                                                                  iloscZaktualizowanych += 1
                                                                                                                                              Else
                                                                                                                                                  ' Jeśli nie znaleziono urządzenia o tym numerze seryjnym, dodajemy nowe
                                                                                                                                                  existingDevices.Add(dane)

                                                                                                                                                  ' Dodanie nowej drukarki do DataGridView1 
                                                                                                                                                  Dim newRow As DataRow = dataTable.NewRow()
                                                                                                                                                  newRow("Adres") = dane.AdresIp
                                                                                                                                                  newRow("Nazwa hosta") = dane.Hostname
                                                                                                                                                  newRow("Urządzenie") = dane.Urzadzenie
                                                                                                                                                  newRow("Nr seryjny") = dane.SerialNumber
                                                                                                                                                  newRow("MAC") = dane.Mac
                                                                                                                                                  newRow("Miejsce postoju") = dane.MiejscePostoju
                                                                                                                                                  newRow("Dodatkowe informacje") = dane.DodatkoweInfo
                                                                                                                                                  dataTable.Rows.Add(newRow)

                                                                                                                                                  iloscNowych += 1
                                                                                                                                              End If

                                                                                                                                              ' Aktualizacja danych pojedynczej drukarki
                                                                                                                                              If dane.AdresIp IsNot Nothing AndAlso dane.SerialNumber IsNot Nothing Then
                                                                                                                                                  UpdateDataSinglePrinter(dane.AdresIp, serial:=dane.SerialNumber, hostname:=dane.Hostname, miejscePostoju:=dane.MiejscePostoju, dodatkoweInfo:=dane.DodatkoweInfo)
                                                                                                                                              End If
                                                                                                                                          Next

                                                                                                                                          Dim updatedJson As String = JsonConvert.SerializeObject(existingDevices, Formatting.Indented)
                                                                                                                                          File.WriteAllText(filePath, updatedJson)

                                                                                                                                          iconPictureBox.Size = New System.Drawing.Size(134, 126)
                                                                                                                                          iconPictureBox.Image = okIcon
                                                                                                                                          buttonZakoncz.Visible = True
                                                                                                                                          buttonZakonczAlert.Visible = False
                                                                                                                                          buttonEdytujUrzadzenie.Visible = False
                                                                                                                                          pomyslnieDodano.Visible = True
                                                                                                                                          dodanoTotal.Visible = True
                                                                                                                                          dodanoAktualizacja.Visible = True
                                                                                                                                          urzadzenieIstnieje.Visible = False
                                                                                                                                          czyNadpisać.Visible = False
                                                                                                                                          daneNadpisane.Visible = False
                                                                                                                                          dodanoTotal.Text = "Liczba nowych urządzeń: " & iloscNowych.ToString()
                                                                                                                                          dodanoAktualizacja.Text = "Liczba zaktualizowanych urządzeń: " & iloscZaktualizowanych.ToString()

                                                                                                                                          pomyslnieDodano.Location = New System.Drawing.Point((detailsForm1.Width - pomyslnieDodano.Width) \ 2, 50)
                                                                                                                                          dodanoTotal.Location = New System.Drawing.Point((detailsForm1.Width - dodanoTotal.Width) \ 2, 100)
                                                                                                                                          dodanoAktualizacja.Location = New System.Drawing.Point((detailsForm1.Width - dodanoAktualizacja.Width) \ 2, 130)

                                                                                                                                      End Sub
                                                                                             detailsForm1.ShowDialog()

                                                                                         End If
                                                                                     End If

                                                                                     ' ZAPIS DO exportData.json
                                                                                     If Not File.Exists(filePathExportData) Then
                                                                                         ' Jeśli plik nie istnieje, twórz nową listę i zapisuj wszystkie rekordy
                                                                                         Dim newDaneExportData As New List(Of DaneToDatabase)()

                                                                                         For Each row As DataGridViewRow In DataGridView2.Rows
                                                                                             Dim isSelected As Boolean = Convert.ToBoolean(row.Cells("checkBoxColumn").Value)
                                                                                             If isSelected Then
                                                                                                 Dim dane As New DaneToDatabase()
                                                                                                 dane.SerialNumber = row.Cells("Nr seryjny").Value.ToString()
                                                                                                 dane.CzyKolor = False
                                                                                                 dane.LicznikM = Nothing
                                                                                                 dane.LicznikK = Nothing
                                                                                                 dane.PercentTonerBk = ""
                                                                                                 dane.PercentTonerY = ""
                                                                                                 dane.PercentTonerM = ""
                                                                                                 dane.PercentTonerC = ""
                                                                                                 dane.Status = True

                                                                                                 newDaneExportData.Add(dane)
                                                                                             End If
                                                                                         Next

                                                                                         ' Zapisz listę do pliku JSON
                                                                                         Dim updatedJson As String = JsonConvert.SerializeObject(newDaneExportData, Formatting.Indented)
                                                                                         File.WriteAllText(filePathExportData, updatedJson)

                                                                                     Else
                                                                                         ' Jeśli plik istnieje, wczytaj dane z pliku
                                                                                         Dim readJsonExportData As String = File.ReadAllText(filePathExportData)
                                                                                         Dim readJsonWartoscExportData As List(Of DaneToDatabase) = JsonConvert.DeserializeObject(Of List(Of DaneToDatabase))(readJsonExportData)

                                                                                         ' Dodaj nowe rekordy dla drukarek, które nie są jeszcze w pliku
                                                                                         For Each row As DataGridViewRow In DataGridView2.Rows
                                                                                             Dim serialNumber As String = row.Cells("Nr seryjny").Value.ToString()
                                                                                             Dim existingDaneExportData As DaneToDatabase = readJsonWartoscExportData.FirstOrDefault(Function(d) d.SerialNumber = serialNumber)

                                                                                             Dim isSelected As Boolean = Convert.ToBoolean(row.Cells("checkBoxColumn").Value)
                                                                                             If isSelected Then
                                                                                                 If existingDaneExportData Is Nothing Then
                                                                                                     ' Jeśli drukarka o danym numerze seryjnym nie istnieje w pliku, dodaj nowy rekord
                                                                                                     Dim dane As New DaneToDatabase()
                                                                                                     dane.SerialNumber = serialNumber
                                                                                                     dane.CzyKolor = False
                                                                                                     dane.LicznikM = Nothing
                                                                                                     dane.LicznikK = Nothing
                                                                                                     dane.PercentTonerBk = ""
                                                                                                     dane.PercentTonerY = ""
                                                                                                     dane.PercentTonerM = ""
                                                                                                     dane.PercentTonerC = ""
                                                                                                     dane.Status = True

                                                                                                     readJsonWartoscExportData.Add(dane)
                                                                                                 End If
                                                                                             End If
                                                                                         Next

                                                                                         ' Zapisz zaktualizowaną listę do pliku JSON
                                                                                         Dim updatedJson As String = JsonConvert.SerializeObject(readJsonWartoscExportData, Formatting.Indented)
                                                                                         File.WriteAllText(filePathExportData, updatedJson)
                                                                                     End If

                                                                                 End Sub


                                                  ' ###### MANUAL ###### START
                                                  If btnManual = True Then

                                                      buttonZapisz.Visible = False
                                                      buttonSprawdzSiec.Enabled = False
                                                      znalezionoTotal.Visible = False
                                                      labelZakres.Visible = False
                                                      labelZakres1a.Visible = False
                                                      labelZakres1.Visible = False
                                                      labelListaNieZawiera.Visible = False
                                                      labelListaZawiera.Visible = False
                                                      labelListaBrak.Visible = False
                                                      progressBar.Visible = True
                                                      labelAdresIpTylkoJeden.Visible = False
                                                      progressLabel.Visible = True
                                                      buttonSzukajPrinter.Enabled = False
                                                      AdresIpSekcjaNr1.Enabled = False
                                                      AdresIpSekcjaNr2.Enabled = False
                                                      AdresIpSekcjaNr3.Enabled = False
                                                      AdresIpSekcjaNr1.BackColor = Color.FromArgb(217, 217, 217)
                                                      AdresIpSekcjaNr2.BackColor = Color.FromArgb(217, 217, 217)
                                                      AdresIpSekcjaNr3.BackColor = Color.FromArgb(217, 217, 217)

                                                      Await Task.Delay(500)
                                                      progressBar.Visible = True
                                                      Dim tasks As New List(Of Task)()
                                                      Dim lockObject As New Object()

                                                      progressBar.Minimum = 1
                                                      progressBar.Maximum = 254
                                                      progressBar.Value = 1
                                                      progressBar.Step = 1

                                                      AddHandler TaskScheduler.UnobservedTaskException, Sub(evSender, args)
                                                                                                            ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                            args.SetObserved()
                                                                                                            args.Exception.Handle(Function(ex) True)
                                                                                                        End Sub

                                                      AddHandler TaskScheduler.Current.UnobservedTaskException, Sub(evSender, args)
                                                                                                                    ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                    args.SetObserved()
                                                                                                                    args.Exception.Handle(Function(ex) True)
                                                                                                                End Sub

                                                      AddHandler TaskScheduler.Default.UnobservedTaskException, Sub(evSender, args)
                                                                                                                    ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                    args.SetObserved()
                                                                                                                    args.Exception.Handle(Function(ex) True)
                                                                                                                End Sub

                                                      AddHandler TaskScheduler.FromCurrentSynchronizationContext.UnobservedTaskException, Sub(evSender, args)
                                                                                                                                              ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                                              args.SetObserved()
                                                                                                                                              args.Exception.Handle(Function(ex) True)
                                                                                                                                          End Sub

                                                      AddHandler TaskScheduler.Default.FromCurrentSynchronizationContext.UnobservedTaskException, Sub(evSender, args)
                                                                                                                                                      ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                                                      args.SetObserved()
                                                                                                                                                      args.Exception.Handle(Function(ex) True)
                                                                                                                                                  End Sub

                                                      AddHandler TaskScheduler.Default.FromCurrentSynchronizationContext.UnobservedTaskException, Sub(evSender, args)
                                                                                                                                                      ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                                                      args.SetObserved()
                                                                                                                                                      args.Exception.Handle(Function(ex) True)
                                                                                                                                                  End Sub
                                                      Dim lockObject1 As New Object()
                                                      Dim printerFound As Boolean = False
                                                      Dim iloscTotal As Integer = 0
                                                      Dim iloscWystepujeSystem As Integer = 0
                                                      Dim iloscWystepujeInnyAdress As Integer = 0

                                                      For a As Integer = Convert.ToInt32(AdresIpSekcjaNr1.Text) To Convert.ToInt32(AdresIpSekcjaNr1.Text)
                                                          For b As Integer = Convert.ToInt32(AdresIpSekcjaNr2.Text) To Convert.ToInt32(AdresIpSekcjaNr2.Text)
                                                              For c As Integer = Convert.ToInt32(AdresIpSekcjaNr3.Text) To Convert.ToInt32(AdresIpSekcjaNr3.Text)
                                                                  For d As Integer = 1 To 254

                                                                      Dim printerIP_1 As Integer = a
                                                                      Dim printerIP_2 As Integer = b
                                                                      Dim printerIP_3 As Integer = c
                                                                      Dim printerIP_4 As Integer = d

                                                                      Dim task As Task = Task.Run(Async Sub()
                                                                                                      Try
                                                                                                          Dim Printer_IP = $"{printerIP_1}.{printerIP_2}.{printerIP_3}.{printerIP_4}"
                                                                                                          Dim printerInfo As PrinterInfo = GetPrinterInfo(Printer_IP)
                                                                                                          SyncLock lockObject1
                                                                                                              detailsForm.Invoke(Sub()

                                                                                                                                     If printerInfo IsNot Nothing AndAlso Not String.IsNullOrEmpty(printerInfo.SerialNumber) Then
                                                                                                                                         If File.Exists(filePath) Then
                                                                                                                                             Dim readJson As String = File.ReadAllText(filePath)

                                                                                                                                             ' Parsowanie JSON do listy obiektów Dane
                                                                                                                                             Dim existingDevices As List(Of Dane) = JsonConvert.DeserializeObject(Of List(Of Dane))(readJson)
                                                                                                                                             iloscTotal += 1

                                                                                                                                             Dim jestSerial As Boolean = False
                                                                                                                                             Dim nieMaAdres As Boolean = False

                                                                                                                                             Dim wierszDodany As Boolean = False
                                                                                                                                             Dim istniejeWpliku As Boolean = False

                                                                                                                                             For Each dane In existingDevices
                                                                                                                                                 If dane.SerialNumber = printerInfo.SerialNumber Then
                                                                                                                                                     jestSerial = True
                                                                                                                                                     If dane.AdresIp <> Printer_IP Then
                                                                                                                                                         nieMaAdres = True
                                                                                                                                                         iloscWystepujeInnyAdress += 1
                                                                                                                                                     End If
                                                                                                                                                 End If
                                                                                                                                                 If dane.SerialNumber = printerInfo.SerialNumber AndAlso dane.AdresIp = Printer_IP Then
                                                                                                                                                     iloscWystepujeSystem += 1
                                                                                                                                                 End If
                                                                                                                                             Next

                                                                                                                                             ' Warunek 1: Drukarka istnieje z innym adresem IP
                                                                                                                                             If jestSerial AndAlso nieMaAdres Then
                                                                                                                                                 Dim newRow3 As DataRow = dataTable1.NewRow()
                                                                                                                                                 newRow3("Adres") = Printer_IP
                                                                                                                                                 newRow3("Nazwa hosta") = printerInfo.Hostname
                                                                                                                                                 newRow3("Urządzenie") = printerInfo.MarkaModel
                                                                                                                                                 newRow3("Nr seryjny") = printerInfo.SerialNumber
                                                                                                                                                 newRow3("MAC") = printerInfo.MAC
                                                                                                                                                 newRow3("Istnieje") = ChrW(&H2022)
                                                                                                                                                 ' Dodanie wiersza do DataTable
                                                                                                                                                 dataTable1.Rows.Add(newRow3)

                                                                                                                                                 wierszDodany = True
                                                                                                                                                 istniejeWpliku = True

                                                                                                                                                 ' Warunek 2: Drukarka nie istnieje w pliku JSON
                                                                                                                                             ElseIf Not jestSerial Then
                                                                                                                                                 Dim newRow3 As DataRow = dataTable1.NewRow()
                                                                                                                                                 newRow3("Adres") = Printer_IP
                                                                                                                                                 newRow3("Nazwa hosta") = printerInfo.Hostname
                                                                                                                                                 newRow3("Urządzenie") = printerInfo.MarkaModel
                                                                                                                                                 newRow3("Nr seryjny") = printerInfo.SerialNumber
                                                                                                                                                 newRow3("MAC") = printerInfo.MAC
                                                                                                                                                 newRow3("Istnieje") = "" ' Domyślna wartość

                                                                                                                                                 ' Dodanie wiersza bez dodatkowych kryteriów
                                                                                                                                                 dataTable1.Rows.Add(newRow3)

                                                                                                                                                 wierszDodany = True
                                                                                                                                             End If

                                                                                                                                             ' Przypisanie DataTable jako źródła danych dla DataGridView
                                                                                                                                             If wierszDodany Then
                                                                                                                                                 DataGridView2.DataSource = dataTable1
                                                                                                                                                 DataGridView2.Visible = True

                                                                                                                                                 ' Konfiguracja checkboxa w nagłówku
                                                                                                                                                 Dim headerCellLocation As System.Drawing.Point = DataGridView2.GetCellDisplayRectangle(0, -1, True).Location
                                                                                                                                                 headerCheckBox.Location = New System.Drawing.Point(headerCellLocation.X + 8, headerCellLocation.Y + 2)
                                                                                                                                                 headerCheckBox.BackColor = Color.White
                                                                                                                                                 headerCheckBox.Size = New System.Drawing.Size(20, 20)

                                                                                                                                                 If Not DataGridView2.Columns.Contains("checkBoxColumn") Then
                                                                                                                                                     AddHandler headerCheckBox.Click, AddressOf HeaderCheckBox_Clicked
                                                                                                                                                     DataGridView2.Controls.Add(headerCheckBox)

                                                                                                                                                     Dim checkBoxColumn As DataGridViewCheckBoxColumn = New DataGridViewCheckBoxColumn()
                                                                                                                                                     checkBoxColumn.HeaderText = ""
                                                                                                                                                     checkBoxColumn.Width = 30
                                                                                                                                                     checkBoxColumn.Name = "checkBoxColumn"
                                                                                                                                                     DataGridView2.Columns.Insert(0, checkBoxColumn)
                                                                                                                                                 End If
                                                                                                                                             End If
                                                                                                                                         End If

                                                                                                                                         If Not File.Exists(filePath) Then

                                                                                                                                             DataGridView2.Visible = True

                                                                                                                                             iloscTotal += 1

                                                                                                                                             Dim newRow3 As DataRow = dataTable1.NewRow()
                                                                                                                                             newRow3("Adres") = Printer_IP
                                                                                                                                             newRow3("Nazwa hosta") = printerInfo.Hostname
                                                                                                                                             newRow3("Urządzenie") = printerInfo.MarkaModel
                                                                                                                                             newRow3("Nr seryjny") = printerInfo.SerialNumber
                                                                                                                                             newRow3("MAC") = printerInfo.MAC
                                                                                                                                             newRow3("Istnieje") = ""
                                                                                                                                             dataTable1.Rows.Add(newRow3)

                                                                                                                                             Dim newDane As New List(Of Dane)()
                                                                                                                                             Dim dane As New Dane()
                                                                                                                                             dane.AdresIp = Printer_IP
                                                                                                                                             dane.Hostname = printerInfo.Hostname
                                                                                                                                             dane.Urzadzenie = printerInfo.MarkaModel
                                                                                                                                             dane.SerialNumber = printerInfo.SerialNumber

                                                                                                                                             newDane.Add(dane)

                                                                                                                                             Dim headerCellLocation As System.Drawing.Point = DataGridView2.GetCellDisplayRectangle(0, -1, True).Location
                                                                                                                                             headerCheckBox.Location = New System.Drawing.Point(headerCellLocation.X + 8, headerCellLocation.Y + 2)
                                                                                                                                             headerCheckBox.BackColor = Color.White
                                                                                                                                             headerCheckBox.Size = New System.Drawing.Size(20, 20)

                                                                                                                                             If Not DataGridView2.Columns.Contains("checkBoxColumn") Then
                                                                                                                                                 AddHandler headerCheckBox.Click, AddressOf HeaderCheckBox_Clicked
                                                                                                                                                 DataGridView2.Controls.Add(headerCheckBox)

                                                                                                                                                 Dim checkBoxColumn As DataGridViewCheckBoxColumn = New DataGridViewCheckBoxColumn()
                                                                                                                                                 checkBoxColumn.HeaderText = ""
                                                                                                                                                 checkBoxColumn.Width = 30
                                                                                                                                                 checkBoxColumn.Name = "checkBoxColumn"
                                                                                                                                                 DataGridView2.Columns.Insert(0, checkBoxColumn)
                                                                                                                                             End If

                                                                                                                                             AddHandler DataGridView2.CellContentClick, AddressOf DataGridView_CellClick

                                                                                                                                         End If
                                                                                                                                     End If

                                                                                                                                 End Sub)
                                                                                                          End SyncLock
                                                                                                      Catch ex As Exception
                                                                                                          ' Obsługa błędów
                                                                                                      End Try

                                                                                                      If detailsForm.IsHandleCreated Then
                                                                                                          detailsForm.Invoke(Sub()
                                                                                                                                 progressBar.PerformStep()
                                                                                                                                 progressLabel.Text = $"{(progressBar.Value / progressBar.Maximum * 100):F0}%"
                                                                                                                             End Sub)
                                                                                                      Else
                                                                                                          ' Opcjonalnie możesz poczekać, aż uchwyt zostanie utworzony
                                                                                                          AddHandler detailsForm.HandleCreated, Sub()
                                                                                                                                                    detailsForm.Invoke(Sub()
                                                                                                                                                                           progressBar.PerformStep()
                                                                                                                                                                       End Sub)
                                                                                                                                                End Sub
                                                                                                      End If

                                                                                                  End Sub)

                                                                      SyncLock lockObject
                                                                          tasks.Add(task)
                                                                      End SyncLock

                                                                  Next
                                                              Next
                                                          Next

                                                      Next


                                                      ' Oczekiwanie na zakończenie wszystkich zadań
                                                      Await Task.WhenAll(tasks.ToArray())
                                                      ' Kolejne 3 sekundy
                                                      Await Task.Delay(3000)
                                                      AdresIpSekcjaNr1.BackColor = Color.FromArgb(204, 255, 153)
                                                      AdresIpSekcjaNr1.Enabled = True
                                                      AdresIpSekcjaNr2.BackColor = Color.FromArgb(204, 255, 153)
                                                      AdresIpSekcjaNr2.Enabled = True
                                                      AdresIpSekcjaNr3.BackColor = Color.FromArgb(204, 255, 153)
                                                      AdresIpSekcjaNr3.Enabled = True

                                                      progressBar.Visible = False
                                                      progressLabel.Visible = False
                                                      progressLabel.Text = "0%"
                                                      labelWyszukiwanieZakończone.Visible = True

                                                      Dim jakaRoznica As Integer = iloscTotal - (iloscWystepujeSystem + iloscWystepujeInnyAdress)

                                                      znalezionoTotal.Visible = True
                                                      znalezionoWystepujaSystem.Visible = True
                                                      znalezionoNieWystepujaSystem.Visible = True
                                                      znalezionoInnyAdres.Visible = True

                                                      znalezionoTotal.Text = "Wszystkie znalezione urządzenia: " & iloscTotal
                                                      znalezionoWystepujaSystem.Text = "Występuje w systemie: " & iloscWystepujeSystem
                                                      znalezionoInnyAdres.Text = "Występuje w systemie pod innym adresem: " & iloscWystepujeInnyAdress
                                                      znalezionoNieWystepujaSystem.Text = "Nie występuje w systemie: " & jakaRoznica

                                                      If DataGridView2.Rows.Count > 0 Then
                                                          labelListaZawiera.Visible = True
                                                          buttonZapisz.Visible = True
                                                      ElseIf DataGridView2.Rows.Count = 0 AndAlso iloscTotal > 0 Then
                                                          labelListaNieZawiera.Visible = True
                                                          buttonZapisz.Visible = False
                                                      Else
                                                          labelListaBrak.Visible = True
                                                          buttonZapisz.Visible = False
                                                      End If

                                                      buttonSzukajPrinter.Enabled = True

                                                      For Each btn As Button In buttonList
                                                          If btn Is sender Then
                                                              btn.Enabled = True
                                                          Else
                                                              btn.Enabled = True
                                                          End If
                                                      Next

                                                      ' ###### MANUAL ###### STOP


                                                      ' ###### AUTO ###### JEDNO AKTYWNE ###### SEKCJA 4 ###### START
                                                  ElseIf btnAuto = True AndAlso jednoActive = True AndAlso sekcjaNr4 = True Then


                                                      buttonSzukajPrinter.Enabled = False
                                                      AdresIpSekcjaNr1.Enabled = False
                                                      AdresIpSekcjaNr2.Enabled = False
                                                      AdresIpSekcjaNr3.Enabled = False

                                                      AdresIpSekcjaNr1.Text = maxIpBytes(0)
                                                      AdresIpSekcjaNr1.Visible = False

                                                      AdresIpSekcjaNr2.Text = maxIpBytes(1)
                                                      AdresIpSekcjaNr2.Visible = False

                                                      AdresIpSekcjaNr3.Text = maxIpBytes(2)
                                                      AdresIpSekcjaNr3.Visible = False

                                                      Thread.Sleep(500)
                                                      progressBar.Visible = True
                                                      progressLabel.Visible = True

                                                      Dim tasks As New List(Of Task)()
                                                      Dim lockObject As New Object()
                                                      Dim range As Integer = (maxIpBytes(3) - minIpBytes(3) - 20)
                                                      progressBar.Minimum = 1
                                                      progressBar.Maximum = range
                                                      progressBar.Value = 1
                                                      progressBar.Step = 1

                                                      AddHandler TaskScheduler.UnobservedTaskException, Sub(evSender, args)
                                                                                                            ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                            args.SetObserved()
                                                                                                            args.Exception.Handle(Function(ex) True)
                                                                                                        End Sub

                                                      AddHandler TaskScheduler.Current.UnobservedTaskException, Sub(evSender, args)
                                                                                                                    ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                    args.SetObserved()
                                                                                                                    args.Exception.Handle(Function(ex) True)
                                                                                                                End Sub

                                                      AddHandler TaskScheduler.Default.UnobservedTaskException, Sub(evSender, args)
                                                                                                                    ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                    args.SetObserved()
                                                                                                                    args.Exception.Handle(Function(ex) True)
                                                                                                                End Sub

                                                      AddHandler TaskScheduler.FromCurrentSynchronizationContext.UnobservedTaskException, Sub(evSender, args)
                                                                                                                                              ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                                              args.SetObserved()
                                                                                                                                              args.Exception.Handle(Function(ex) True)
                                                                                                                                          End Sub

                                                      AddHandler TaskScheduler.Default.FromCurrentSynchronizationContext.UnobservedTaskException, Sub(evSender, args)
                                                                                                                                                      ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                                                      args.SetObserved()
                                                                                                                                                      args.Exception.Handle(Function(ex) True)
                                                                                                                                                  End Sub

                                                      AddHandler TaskScheduler.Default.FromCurrentSynchronizationContext.UnobservedTaskException, Sub(evSender, args)
                                                                                                                                                      ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                                                      args.SetObserved()
                                                                                                                                                      args.Exception.Handle(Function(ex) True)
                                                                                                                                                  End Sub

                                                      Dim lockObject1 As New Object()
                                                      Dim printerFound As Boolean = False
                                                      Dim iloscTotal As Integer = 0
                                                      Dim iloscWystepujeSystem As Integer = 0
                                                      Dim iloscWystepujeInnyAdress As Integer = 0

                                                      For a As Integer = Convert.ToInt32(AdresIpSekcjaNr1.Text) To Convert.ToInt32(AdresIpSekcjaNr1.Text)
                                                          For b As Integer = Convert.ToInt32(AdresIpSekcjaNr2.Text) To Convert.ToInt32(AdresIpSekcjaNr2.Text)
                                                              For c As Integer = Convert.ToInt32(AdresIpSekcjaNr3.Text) To Convert.ToInt32(AdresIpSekcjaNr3.Text)
                                                                  For d As Integer = 1 To 254

                                                                      Dim printerIP_1 As Integer = a
                                                                      Dim printerIP_2 As Integer = b
                                                                      Dim printerIP_3 As Integer = c
                                                                      Dim printerIP_4 As Integer = d

                                                                      Dim task As Task = Task.Run(Async Sub()
                                                                                                      Try
                                                                                                          Dim Printer_IP = $"{printerIP_1}.{printerIP_2}.{printerIP_3}.{printerIP_4}"
                                                                                                          Dim printerInfo As PrinterInfo = GetPrinterInfo(Printer_IP)
                                                                                                          SyncLock lockObject1
                                                                                                              detailsForm.Invoke(Sub()

                                                                                                                                     If printerInfo IsNot Nothing AndAlso Not String.IsNullOrEmpty(printerInfo.SerialNumber) Then
                                                                                                                                         If File.Exists(filePath) Then
                                                                                                                                             Dim readJson As String = File.ReadAllText(filePath)

                                                                                                                                             ' Parsowanie JSON do listy obiektów Dane
                                                                                                                                             Dim existingDevices As List(Of Dane) = JsonConvert.DeserializeObject(Of List(Of Dane))(readJson)
                                                                                                                                             iloscTotal += 1

                                                                                                                                             Dim jestSerial As Boolean = False
                                                                                                                                             Dim nieMaAdres As Boolean = False

                                                                                                                                             Dim wierszDodany As Boolean = False
                                                                                                                                             Dim istniejeWpliku As Boolean = False

                                                                                                                                             For Each dane In existingDevices
                                                                                                                                                 If dane.SerialNumber = printerInfo.SerialNumber Then
                                                                                                                                                     jestSerial = True
                                                                                                                                                     If dane.AdresIp <> Printer_IP Then
                                                                                                                                                         nieMaAdres = True
                                                                                                                                                         iloscWystepujeInnyAdress += 1
                                                                                                                                                     End If
                                                                                                                                                 End If
                                                                                                                                                 If dane.SerialNumber = printerInfo.SerialNumber AndAlso dane.AdresIp = Printer_IP Then
                                                                                                                                                     iloscWystepujeSystem += 1
                                                                                                                                                 End If
                                                                                                                                             Next

                                                                                                                                             ' Warunek 1: Drukarka istnieje z innym adresem IP
                                                                                                                                             If jestSerial AndAlso nieMaAdres Then
                                                                                                                                                 Dim newRow3 As DataRow = dataTable1.NewRow()
                                                                                                                                                 newRow3("Adres") = Printer_IP
                                                                                                                                                 newRow3("Nazwa hosta") = printerInfo.Hostname
                                                                                                                                                 newRow3("Urządzenie") = printerInfo.MarkaModel
                                                                                                                                                 newRow3("Nr seryjny") = printerInfo.SerialNumber
                                                                                                                                                 newRow3("MAC") = printerInfo.MAC
                                                                                                                                                 newRow3("Istnieje") = ChrW(&H2022)
                                                                                                                                                 ' Dodanie wiersza do DataTable
                                                                                                                                                 dataTable1.Rows.Add(newRow3)

                                                                                                                                                 wierszDodany = True
                                                                                                                                                 istniejeWpliku = True

                                                                                                                                                 ' Warunek 2: Drukarka nie istnieje w pliku JSON
                                                                                                                                             ElseIf Not jestSerial Then
                                                                                                                                                 Dim newRow3 As DataRow = dataTable1.NewRow()
                                                                                                                                                 newRow3("Adres") = Printer_IP
                                                                                                                                                 newRow3("Nazwa hosta") = printerInfo.Hostname
                                                                                                                                                 newRow3("Urządzenie") = printerInfo.MarkaModel
                                                                                                                                                 newRow3("Nr seryjny") = printerInfo.SerialNumber
                                                                                                                                                 newRow3("MAC") = printerInfo.MAC
                                                                                                                                                 newRow3("Istnieje") = "" ' Domyślna wartość

                                                                                                                                                 ' Dodanie wiersza bez dodatkowych kryteriów
                                                                                                                                                 dataTable1.Rows.Add(newRow3)

                                                                                                                                                 wierszDodany = True
                                                                                                                                             End If

                                                                                                                                             ' Przypisanie DataTable jako źródła danych dla DataGridView
                                                                                                                                             If wierszDodany Then
                                                                                                                                                 DataGridView2.DataSource = dataTable1
                                                                                                                                                 DataGridView2.Visible = True

                                                                                                                                                 ' Konfiguracja checkboxa w nagłówku
                                                                                                                                                 Dim headerCellLocation As System.Drawing.Point = DataGridView2.GetCellDisplayRectangle(0, -1, True).Location
                                                                                                                                                 headerCheckBox.Location = New System.Drawing.Point(headerCellLocation.X + 8, headerCellLocation.Y + 2)
                                                                                                                                                 headerCheckBox.BackColor = Color.White
                                                                                                                                                 headerCheckBox.Size = New System.Drawing.Size(20, 20)

                                                                                                                                                 If Not DataGridView2.Columns.Contains("checkBoxColumn") Then
                                                                                                                                                     AddHandler headerCheckBox.Click, AddressOf HeaderCheckBox_Clicked
                                                                                                                                                     DataGridView2.Controls.Add(headerCheckBox)

                                                                                                                                                     Dim checkBoxColumn As DataGridViewCheckBoxColumn = New DataGridViewCheckBoxColumn()
                                                                                                                                                     checkBoxColumn.HeaderText = ""
                                                                                                                                                     checkBoxColumn.Width = 30
                                                                                                                                                     checkBoxColumn.Name = "checkBoxColumn"
                                                                                                                                                     DataGridView2.Columns.Insert(0, checkBoxColumn)
                                                                                                                                                 End If
                                                                                                                                             End If
                                                                                                                                         End If

                                                                                                                                         If Not File.Exists(filePath) Then

                                                                                                                                             DataGridView2.Visible = True

                                                                                                                                             iloscTotal += 1

                                                                                                                                             Dim newRow3 As DataRow = dataTable1.NewRow()
                                                                                                                                             newRow3("Adres") = Printer_IP
                                                                                                                                             newRow3("Nazwa hosta") = printerInfo.Hostname
                                                                                                                                             newRow3("Urządzenie") = printerInfo.MarkaModel
                                                                                                                                             newRow3("Nr seryjny") = printerInfo.SerialNumber
                                                                                                                                             newRow3("MAC") = printerInfo.MAC
                                                                                                                                             newRow3("Istnieje") = ""
                                                                                                                                             dataTable1.Rows.Add(newRow3)

                                                                                                                                             Dim newDane As New List(Of Dane)()
                                                                                                                                             Dim dane As New Dane()
                                                                                                                                             dane.AdresIp = Printer_IP
                                                                                                                                             dane.Hostname = printerInfo.Hostname
                                                                                                                                             dane.Urzadzenie = printerInfo.MarkaModel
                                                                                                                                             dane.SerialNumber = printerInfo.SerialNumber

                                                                                                                                             newDane.Add(dane)

                                                                                                                                             Dim headerCellLocation As System.Drawing.Point = DataGridView2.GetCellDisplayRectangle(0, -1, True).Location
                                                                                                                                             headerCheckBox.Location = New System.Drawing.Point(headerCellLocation.X + 8, headerCellLocation.Y + 2)
                                                                                                                                             headerCheckBox.BackColor = Color.White
                                                                                                                                             headerCheckBox.Size = New System.Drawing.Size(20, 20)

                                                                                                                                             If Not DataGridView2.Columns.Contains("checkBoxColumn") Then
                                                                                                                                                 AddHandler headerCheckBox.Click, AddressOf HeaderCheckBox_Clicked
                                                                                                                                                 DataGridView2.Controls.Add(headerCheckBox)

                                                                                                                                                 Dim checkBoxColumn As DataGridViewCheckBoxColumn = New DataGridViewCheckBoxColumn()
                                                                                                                                                 checkBoxColumn.HeaderText = ""
                                                                                                                                                 checkBoxColumn.Width = 30
                                                                                                                                                 checkBoxColumn.Name = "checkBoxColumn"
                                                                                                                                                 DataGridView2.Columns.Insert(0, checkBoxColumn)
                                                                                                                                             End If

                                                                                                                                             AddHandler DataGridView2.CellContentClick, AddressOf DataGridView_CellClick

                                                                                                                                         End If
                                                                                                                                     End If

                                                                                                                                 End Sub)
                                                                                                          End SyncLock
                                                                                                      Catch ex As Exception
                                                                                                          ' Obsługa błędów
                                                                                                      End Try

                                                                                                      If detailsForm.IsHandleCreated Then
                                                                                                          detailsForm.Invoke(Sub()
                                                                                                                                 progressBar.PerformStep()
                                                                                                                                 progressLabel.Text = $"{(progressBar.Value / progressBar.Maximum * 100):F0}%"
                                                                                                                             End Sub)
                                                                                                      Else
                                                                                                          ' Opcjonalnie możesz poczekać, aż uchwyt zostanie utworzony
                                                                                                          AddHandler detailsForm.HandleCreated, Sub()
                                                                                                                                                    detailsForm.Invoke(Sub()
                                                                                                                                                                           progressBar.PerformStep()
                                                                                                                                                                       End Sub)
                                                                                                                                                End Sub
                                                                                                      End If

                                                                                                  End Sub)

                                                                      SyncLock lockObject
                                                                          tasks.Add(task)
                                                                      End SyncLock

                                                                  Next
                                                              Next
                                                          Next
                                                      Next



                                                      ' Oczekiwanie na zakończenie wszystkich zadań
                                                      Await Task.WhenAll(tasks.ToArray())
                                                      ' Kolejne 3 sekundy
                                                      Await Task.Delay(3000)

                                                      progressBar.Visible = False
                                                      progressLabel.Visible = False
                                                      progressLabel.Text = "0%"
                                                      labelWyszukiwanieZakończone.Visible = True

                                                      Dim jakaRoznica As Integer = iloscTotal - (iloscWystepujeSystem + iloscWystepujeInnyAdress)

                                                      znalezionoTotal.Visible = True
                                                      znalezionoWystepujaSystem.Visible = True
                                                      znalezionoNieWystepujaSystem.Visible = True
                                                      znalezionoInnyAdres.Visible = True

                                                      znalezionoTotal.Text = "Wszystkie znalezione urządzenia: " & iloscTotal
                                                      znalezionoWystepujaSystem.Text = "Występuje w systemie: " & iloscWystepujeSystem
                                                      znalezionoInnyAdres.Text = "Występuje w systemie pod innym adresem: " & iloscWystepujeInnyAdress
                                                      znalezionoNieWystepujaSystem.Text = "Nie występuje w systemie: " & jakaRoznica

                                                      If DataGridView2.Rows.Count > 0 Then
                                                          labelListaZawiera.Visible = True
                                                          buttonZapisz.Visible = True
                                                      ElseIf DataGridView2.Rows.Count = 0 AndAlso iloscTotal > 0 Then
                                                          labelListaNieZawiera.Visible = True
                                                          buttonZapisz.Visible = False
                                                      Else
                                                          labelListaBrak.Visible = True
                                                          buttonZapisz.Visible = False
                                                      End If

                                                      buttonSzukajPrinter.Enabled = True

                                                      For Each btn As Button In buttonList
                                                          If btn Is sender Then
                                                              btn.Enabled = True
                                                          Else
                                                              btn.Enabled = True
                                                          End If
                                                      Next

                                                      ' ###### AUTO ###### JEDNO AKTYWNE ###### SEKCJA 4 ###### STOP

                                                      ' ###### AUTO ###### JEDNO AKTYWNE ###### SEKCJA 3 ###### START
                                                  ElseIf btnAuto = True AndAlso jednoActive = True AndAlso sekcjaNr3 = True Then

                                                      buttonSzukajPrinter.Enabled = False

                                                      AdresIpSekcjaNr1.Text = maxIpBytes(0)
                                                      AdresIpSekcjaNr1.Enabled = False
                                                      AdresIpSekcjaNr1.BackColor = Color.FromArgb(217, 217, 217)

                                                      AdresIpSekcjaNr2.Text = maxIpBytes(1)
                                                      AdresIpSekcjaNr2.Enabled = False
                                                      AdresIpSekcjaNr2.BackColor = Color.FromArgb(217, 217, 217)

                                                      AdresIpSekcjaNr3.BackColor = Color.FromArgb(204, 255, 153)
                                                      AdresIpSekcjaNr3.Enabled = False

                                                      AdresIpSekcjaNr4.Text = "xxx"
                                                      AdresIpSekcjaNr4.Enabled = False
                                                      AdresIpSekcjaNr4.BackColor = Color.FromArgb(217, 217, 217)


                                                      AddHandler AdresIpSekcjaNr3.TextChanged, Sub(sender6 As Object, e6 As EventArgs)
                                                                                                   If AdresIpSekcjaNr3.Text.Length > 0 Then

                                                                                                       buttonSzukajPrinter.Enabled = True
                                                                                                   Else
                                                                                                       buttonSzukajPrinter.Enabled = False
                                                                                                   End If
                                                                                               End Sub

                                                      labelZakres1.Visible = False
                                                      buttonSzukajPrinter.Enabled = False
                                                      AdresIpSekcjaNr1.Enabled = False
                                                      AdresIpSekcjaNr2.Enabled = False
                                                      AdresIpSekcjaNr3.Enabled = False
                                                      AdresIpSekcjaNr3.BackColor = Color.FromArgb(217, 217, 217)

                                                      progressBar.Visible = True
                                                      progressLabel.Visible = True

                                                      Dim tasks As New List(Of Task)()
                                                      Dim lockObject As New Object()
                                                      Dim range As Integer = (maxIpBytes(3) - minIpBytes(3) - 20)
                                                      progressBar.Minimum = 1
                                                      progressBar.Maximum = range
                                                      progressBar.Value = 1
                                                      progressBar.Step = 1

                                                      AddHandler TaskScheduler.UnobservedTaskException, Sub(evSender, args)
                                                                                                            ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                            args.SetObserved()
                                                                                                            args.Exception.Handle(Function(ex) True)
                                                                                                        End Sub

                                                      AddHandler TaskScheduler.Current.UnobservedTaskException, Sub(evSender, args)
                                                                                                                    ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                    args.SetObserved()
                                                                                                                    args.Exception.Handle(Function(ex) True)
                                                                                                                End Sub

                                                      AddHandler TaskScheduler.Default.UnobservedTaskException, Sub(evSender, args)
                                                                                                                    ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                    args.SetObserved()
                                                                                                                    args.Exception.Handle(Function(ex) True)
                                                                                                                End Sub

                                                      AddHandler TaskScheduler.FromCurrentSynchronizationContext.UnobservedTaskException, Sub(evSender, args)
                                                                                                                                              ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                                              args.SetObserved()
                                                                                                                                              args.Exception.Handle(Function(ex) True)
                                                                                                                                          End Sub

                                                      AddHandler TaskScheduler.Default.FromCurrentSynchronizationContext.UnobservedTaskException, Sub(evSender, args)
                                                                                                                                                      ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                                                      args.SetObserved()
                                                                                                                                                      args.Exception.Handle(Function(ex) True)
                                                                                                                                                  End Sub

                                                      AddHandler TaskScheduler.Default.FromCurrentSynchronizationContext.UnobservedTaskException, Sub(evSender, args)
                                                                                                                                                      ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                                                      args.SetObserved()
                                                                                                                                                      args.Exception.Handle(Function(ex) True)
                                                                                                                                                  End Sub

                                                      Dim lockObject1 As New Object()
                                                      Dim printerFound As Boolean = False
                                                      Dim iloscTotal As Integer = 0
                                                      Dim iloscWystepujeSystem As Integer = 0
                                                      Dim iloscWystepujeInnyAdress As Integer = 0

                                                      For a As Integer = Convert.ToInt32(AdresIpSekcjaNr1.Text) To Convert.ToInt32(AdresIpSekcjaNr1.Text)
                                                          For b As Integer = Convert.ToInt32(AdresIpSekcjaNr2.Text) To Convert.ToInt32(AdresIpSekcjaNr2.Text)
                                                              For c As Integer = Convert.ToInt32(AdresIpSekcjaNr3.Text) To Convert.ToInt32(AdresIpSekcjaNr3.Text)
                                                                  For d As Integer = minIpBytes(3) To maxIpBytes(3)

                                                                      Dim printerIP_1 As Integer = a
                                                                      Dim printerIP_2 As Integer = b
                                                                      Dim printerIP_3 As Integer = c
                                                                      Dim printerIP_4 As Integer = d

                                                                      Dim task As Task = Task.Run(Async Sub()
                                                                                                      Try
                                                                                                          Dim Printer_IP = $"{printerIP_1}.{printerIP_2}.{printerIP_3}.{printerIP_4}"
                                                                                                          Dim printerInfo As PrinterInfo = GetPrinterInfo(Printer_IP)
                                                                                                          SyncLock lockObject1
                                                                                                              detailsForm.Invoke(Sub()

                                                                                                                                     If printerInfo IsNot Nothing AndAlso Not String.IsNullOrEmpty(printerInfo.SerialNumber) Then
                                                                                                                                         If File.Exists(filePath) Then
                                                                                                                                             Dim readJson As String = File.ReadAllText(filePath)

                                                                                                                                             ' Parsowanie JSON do listy obiektów Dane
                                                                                                                                             Dim existingDevices As List(Of Dane) = JsonConvert.DeserializeObject(Of List(Of Dane))(readJson)
                                                                                                                                             iloscTotal += 1

                                                                                                                                             Dim jestSerial As Boolean = False
                                                                                                                                             Dim nieMaAdres As Boolean = False

                                                                                                                                             Dim wierszDodany As Boolean = False
                                                                                                                                             Dim istniejeWpliku As Boolean = False

                                                                                                                                             For Each dane In existingDevices
                                                                                                                                                 If dane.SerialNumber = printerInfo.SerialNumber Then
                                                                                                                                                     jestSerial = True
                                                                                                                                                     If dane.AdresIp <> Printer_IP Then
                                                                                                                                                         nieMaAdres = True
                                                                                                                                                         iloscWystepujeInnyAdress += 1
                                                                                                                                                     End If
                                                                                                                                                 End If
                                                                                                                                                 If dane.SerialNumber = printerInfo.SerialNumber AndAlso dane.AdresIp = Printer_IP Then
                                                                                                                                                     iloscWystepujeSystem += 1
                                                                                                                                                 End If
                                                                                                                                             Next

                                                                                                                                             ' Warunek 1: Drukarka istnieje z innym adresem IP
                                                                                                                                             If jestSerial AndAlso nieMaAdres Then
                                                                                                                                                 Dim newRow3 As DataRow = dataTable1.NewRow()
                                                                                                                                                 newRow3("Adres") = Printer_IP
                                                                                                                                                 newRow3("Nazwa hosta") = printerInfo.Hostname
                                                                                                                                                 newRow3("Urządzenie") = printerInfo.MarkaModel
                                                                                                                                                 newRow3("Nr seryjny") = printerInfo.SerialNumber
                                                                                                                                                 newRow3("MAC") = printerInfo.MAC
                                                                                                                                                 newRow3("Istnieje") = ChrW(&H2022)
                                                                                                                                                 ' Dodanie wiersza do DataTable
                                                                                                                                                 dataTable1.Rows.Add(newRow3)

                                                                                                                                                 wierszDodany = True
                                                                                                                                                 istniejeWpliku = True

                                                                                                                                                 ' Warunek 2: Drukarka nie istnieje w pliku JSON
                                                                                                                                             ElseIf Not jestSerial Then
                                                                                                                                                 Dim newRow3 As DataRow = dataTable1.NewRow()
                                                                                                                                                 newRow3("Adres") = Printer_IP
                                                                                                                                                 newRow3("Nazwa hosta") = printerInfo.Hostname
                                                                                                                                                 newRow3("Urządzenie") = printerInfo.MarkaModel
                                                                                                                                                 newRow3("Nr seryjny") = printerInfo.SerialNumber
                                                                                                                                                 newRow3("MAC") = printerInfo.MAC
                                                                                                                                                 newRow3("Istnieje") = "" ' Domyślna wartość

                                                                                                                                                 ' Dodanie wiersza bez dodatkowych kryteriów
                                                                                                                                                 dataTable1.Rows.Add(newRow3)

                                                                                                                                                 wierszDodany = True
                                                                                                                                             End If

                                                                                                                                             ' Przypisanie DataTable jako źródła danych dla DataGridView
                                                                                                                                             If wierszDodany Then
                                                                                                                                                 DataGridView2.DataSource = dataTable1
                                                                                                                                                 DataGridView2.Visible = True

                                                                                                                                                 ' Konfiguracja checkboxa w nagłówku
                                                                                                                                                 Dim headerCellLocation As System.Drawing.Point = DataGridView2.GetCellDisplayRectangle(0, -1, True).Location
                                                                                                                                                 headerCheckBox.Location = New System.Drawing.Point(headerCellLocation.X + 8, headerCellLocation.Y + 2)
                                                                                                                                                 headerCheckBox.BackColor = Color.White
                                                                                                                                                 headerCheckBox.Size = New System.Drawing.Size(20, 20)

                                                                                                                                                 If Not DataGridView2.Columns.Contains("checkBoxColumn") Then
                                                                                                                                                     AddHandler headerCheckBox.Click, AddressOf HeaderCheckBox_Clicked
                                                                                                                                                     DataGridView2.Controls.Add(headerCheckBox)

                                                                                                                                                     Dim checkBoxColumn As DataGridViewCheckBoxColumn = New DataGridViewCheckBoxColumn()
                                                                                                                                                     checkBoxColumn.HeaderText = ""
                                                                                                                                                     checkBoxColumn.Width = 30
                                                                                                                                                     checkBoxColumn.Name = "checkBoxColumn"
                                                                                                                                                     DataGridView2.Columns.Insert(0, checkBoxColumn)
                                                                                                                                                 End If
                                                                                                                                             End If
                                                                                                                                         End If

                                                                                                                                         If Not File.Exists(filePath) Then

                                                                                                                                             DataGridView2.Visible = True

                                                                                                                                             iloscTotal += 1

                                                                                                                                             Dim newRow3 As DataRow = dataTable1.NewRow()
                                                                                                                                             newRow3("Adres") = Printer_IP
                                                                                                                                             newRow3("Nazwa hosta") = printerInfo.Hostname
                                                                                                                                             newRow3("Urządzenie") = printerInfo.MarkaModel
                                                                                                                                             newRow3("Nr seryjny") = printerInfo.SerialNumber
                                                                                                                                             newRow3("MAC") = printerInfo.MAC
                                                                                                                                             newRow3("Istnieje") = ""
                                                                                                                                             dataTable1.Rows.Add(newRow3)

                                                                                                                                             Dim newDane As New List(Of Dane)()
                                                                                                                                             Dim dane As New Dane()
                                                                                                                                             dane.AdresIp = Printer_IP
                                                                                                                                             dane.Hostname = printerInfo.Hostname
                                                                                                                                             dane.Urzadzenie = printerInfo.MarkaModel
                                                                                                                                             dane.SerialNumber = printerInfo.SerialNumber

                                                                                                                                             newDane.Add(dane)

                                                                                                                                             Dim headerCellLocation As System.Drawing.Point = DataGridView2.GetCellDisplayRectangle(0, -1, True).Location
                                                                                                                                             headerCheckBox.Location = New System.Drawing.Point(headerCellLocation.X + 8, headerCellLocation.Y + 2)
                                                                                                                                             headerCheckBox.BackColor = Color.White
                                                                                                                                             headerCheckBox.Size = New System.Drawing.Size(20, 20)

                                                                                                                                             If Not DataGridView2.Columns.Contains("checkBoxColumn") Then
                                                                                                                                                 AddHandler headerCheckBox.Click, AddressOf HeaderCheckBox_Clicked
                                                                                                                                                 DataGridView2.Controls.Add(headerCheckBox)

                                                                                                                                                 Dim checkBoxColumn As DataGridViewCheckBoxColumn = New DataGridViewCheckBoxColumn()
                                                                                                                                                 checkBoxColumn.HeaderText = ""
                                                                                                                                                 checkBoxColumn.Width = 30
                                                                                                                                                 checkBoxColumn.Name = "checkBoxColumn"
                                                                                                                                                 DataGridView2.Columns.Insert(0, checkBoxColumn)
                                                                                                                                             End If

                                                                                                                                             AddHandler DataGridView2.CellContentClick, AddressOf DataGridView_CellClick

                                                                                                                                         End If
                                                                                                                                     End If

                                                                                                                                 End Sub)
                                                                                                          End SyncLock
                                                                                                      Catch ex As Exception
                                                                                                          ' Obsługa błędów
                                                                                                      End Try

                                                                                                      If detailsForm.IsHandleCreated Then
                                                                                                          detailsForm.Invoke(Sub()
                                                                                                                                 progressBar.PerformStep()
                                                                                                                                 progressLabel.Text = $"{(progressBar.Value / progressBar.Maximum * 100):F0}%"
                                                                                                                             End Sub)
                                                                                                      Else
                                                                                                          ' Opcjonalnie możesz poczekać, aż uchwyt zostanie utworzony
                                                                                                          AddHandler detailsForm.HandleCreated, Sub()
                                                                                                                                                    detailsForm.Invoke(Sub()
                                                                                                                                                                           progressBar.PerformStep()
                                                                                                                                                                       End Sub)
                                                                                                                                                End Sub
                                                                                                      End If

                                                                                                  End Sub)

                                                                      SyncLock lockObject
                                                                          tasks.Add(task)
                                                                      End SyncLock

                                                                  Next
                                                              Next
                                                          Next
                                                      Next


                                                      ' Oczekiwanie na zakończenie wszystkich zadań
                                                      Await Task.WhenAll(tasks.ToArray())
                                                      ' Kolejne 3 sekundy
                                                      Await Task.Delay(3000)

                                                      AdresIpSekcjaNr3.Enabled = True
                                                      AdresIpSekcjaNr3.BackColor = Color.FromArgb(204, 255, 153)

                                                      progressBar.Visible = False
                                                      progressLabel.Visible = False
                                                      progressLabel.Text = "0%"
                                                      labelWyszukiwanieZakończone.Visible = True

                                                      Dim jakaRoznica As Integer = iloscTotal - (iloscWystepujeSystem + iloscWystepujeInnyAdress)

                                                      znalezionoTotal.Visible = True
                                                      znalezionoWystepujaSystem.Visible = True
                                                      znalezionoNieWystepujaSystem.Visible = True
                                                      znalezionoInnyAdres.Visible = True

                                                      znalezionoTotal.Text = "Wszystkie znalezione urządzenia: " & iloscTotal
                                                      znalezionoWystepujaSystem.Text = "Występuje w systemie: " & iloscWystepujeSystem
                                                      znalezionoInnyAdres.Text = "Występuje w systemie pod innym adresem: " & iloscWystepujeInnyAdress
                                                      znalezionoNieWystepujaSystem.Text = "Nie występuje w systemie: " & jakaRoznica

                                                      If DataGridView2.Rows.Count > 0 Then
                                                          labelListaZawiera.Visible = True
                                                          buttonZapisz.Visible = True
                                                      ElseIf DataGridView2.Rows.Count = 0 AndAlso iloscTotal > 0 Then
                                                          labelListaNieZawiera.Visible = True
                                                          buttonZapisz.Visible = False
                                                      Else
                                                          labelListaBrak.Visible = True
                                                          buttonZapisz.Visible = False
                                                      End If

                                                      buttonSzukajPrinter.Enabled = True

                                                      For Each btn As Button In buttonList
                                                          If btn Is sender Then
                                                              btn.Enabled = True
                                                          Else
                                                              btn.Enabled = True
                                                          End If
                                                      Next

                                                      ' ###### AUTO ###### JEDNO AKTYWNE ###### SEKCJA 3 ###### STOP


                                                      ' ###### AUTO ###### JEDNO AKTYWNE ###### SEKCJA 2 ###### START

                                                  ElseIf btnAuto = True AndAlso jednoActive = True AndAlso sekcjaNr2 = True Then

                                                      buttonSzukajPrinter.Enabled = False
                                                      labelZakres1.Visible = False
                                                      AdresIpSekcjaNr2.Enabled = False
                                                      AdresIpSekcjaNr3.Enabled = False
                                                      AdresIpSekcjaNr2.BackColor = Color.FromArgb(217, 217, 217)
                                                      AdresIpSekcjaNr3.BackColor = Color.FromArgb(217, 217, 217)

                                                      progressBar.Visible = True
                                                      progressLabel.Visible = True

                                                      Dim tasks As New List(Of Task)()
                                                      Dim lockObject As New Object()
                                                      Dim range As Integer = (maxIpBytes(3) - minIpBytes(3) - 20)
                                                      progressBar.Minimum = 1
                                                      progressBar.Maximum = range
                                                      progressBar.Value = 1
                                                      progressBar.Step = 1

                                                      AddHandler TaskScheduler.UnobservedTaskException, Sub(evSender, args)
                                                                                                            ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                            args.SetObserved()
                                                                                                            args.Exception.Handle(Function(ex) True)
                                                                                                        End Sub

                                                      AddHandler TaskScheduler.Current.UnobservedTaskException, Sub(evSender, args)
                                                                                                                    ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                    args.SetObserved()
                                                                                                                    args.Exception.Handle(Function(ex) True)
                                                                                                                End Sub

                                                      AddHandler TaskScheduler.Default.UnobservedTaskException, Sub(evSender, args)
                                                                                                                    ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                    args.SetObserved()
                                                                                                                    args.Exception.Handle(Function(ex) True)
                                                                                                                End Sub

                                                      AddHandler TaskScheduler.FromCurrentSynchronizationContext.UnobservedTaskException, Sub(evSender, args)
                                                                                                                                              ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                                              args.SetObserved()
                                                                                                                                              args.Exception.Handle(Function(ex) True)
                                                                                                                                          End Sub

                                                      AddHandler TaskScheduler.Default.FromCurrentSynchronizationContext.UnobservedTaskException, Sub(evSender, args)
                                                                                                                                                      ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                                                      args.SetObserved()
                                                                                                                                                      args.Exception.Handle(Function(ex) True)
                                                                                                                                                  End Sub

                                                      AddHandler TaskScheduler.Default.FromCurrentSynchronizationContext.UnobservedTaskException, Sub(evSender, args)
                                                                                                                                                      ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                                                      args.SetObserved()
                                                                                                                                                      args.Exception.Handle(Function(ex) True)
                                                                                                                                                  End Sub

                                                      Dim lockObject1 As New Object()
                                                      Dim printerFound As Boolean = False
                                                      Dim iloscTotal As Integer = 0
                                                      Dim iloscWystepujeSystem As Integer = 0
                                                      Dim iloscWystepujeInnyAdress As Integer = 0

                                                      For a As Integer = Convert.ToInt32(AdresIpSekcjaNr1.Text) To Convert.ToInt32(AdresIpSekcjaNr1.Text)
                                                          For b As Integer = Convert.ToInt32(AdresIpSekcjaNr2.Text) To Convert.ToInt32(AdresIpSekcjaNr2.Text)
                                                              For c As Integer = Convert.ToInt32(AdresIpSekcjaNr3.Text) To Convert.ToInt32(AdresIpSekcjaNr3.Text)
                                                                  For d As Integer = minIpBytes(3) To maxIpBytes(3)

                                                                      Dim printerIP_1 As Integer = a
                                                                      Dim printerIP_2 As Integer = b
                                                                      Dim printerIP_3 As Integer = c
                                                                      Dim printerIP_4 As Integer = d

                                                                      Dim task As Task = Task.Run(Async Sub()
                                                                                                      Try
                                                                                                          Dim Printer_IP = $"{printerIP_1}.{printerIP_2}.{printerIP_3}.{printerIP_4}"
                                                                                                          Dim printerInfo As PrinterInfo = GetPrinterInfo(Printer_IP)
                                                                                                          SyncLock lockObject1
                                                                                                              detailsForm.Invoke(Sub()

                                                                                                                                     If printerInfo IsNot Nothing AndAlso Not String.IsNullOrEmpty(printerInfo.SerialNumber) Then
                                                                                                                                         If File.Exists(filePath) Then
                                                                                                                                             Dim readJson As String = File.ReadAllText(filePath)

                                                                                                                                             ' Parsowanie JSON do listy obiektów Dane
                                                                                                                                             Dim existingDevices As List(Of Dane) = JsonConvert.DeserializeObject(Of List(Of Dane))(readJson)
                                                                                                                                             iloscTotal += 1

                                                                                                                                             Dim jestSerial As Boolean = False
                                                                                                                                             Dim nieMaAdres As Boolean = False

                                                                                                                                             Dim wierszDodany As Boolean = False
                                                                                                                                             Dim istniejeWpliku As Boolean = False

                                                                                                                                             For Each dane In existingDevices
                                                                                                                                                 If dane.SerialNumber = printerInfo.SerialNumber Then
                                                                                                                                                     jestSerial = True
                                                                                                                                                     If dane.AdresIp <> Printer_IP Then
                                                                                                                                                         nieMaAdres = True
                                                                                                                                                         iloscWystepujeInnyAdress += 1
                                                                                                                                                     End If
                                                                                                                                                 End If
                                                                                                                                                 If dane.SerialNumber = printerInfo.SerialNumber AndAlso dane.AdresIp = Printer_IP Then
                                                                                                                                                     iloscWystepujeSystem += 1
                                                                                                                                                 End If
                                                                                                                                             Next

                                                                                                                                             ' Warunek 1: Drukarka istnieje z innym adresem IP
                                                                                                                                             If jestSerial AndAlso nieMaAdres Then
                                                                                                                                                 Dim newRow3 As DataRow = dataTable1.NewRow()
                                                                                                                                                 newRow3("Adres") = Printer_IP
                                                                                                                                                 newRow3("Nazwa hosta") = printerInfo.Hostname
                                                                                                                                                 newRow3("Urządzenie") = printerInfo.MarkaModel
                                                                                                                                                 newRow3("Nr seryjny") = printerInfo.SerialNumber
                                                                                                                                                 newRow3("MAC") = printerInfo.MAC
                                                                                                                                                 newRow3("Istnieje") = ChrW(&H2022)
                                                                                                                                                 ' Dodanie wiersza do DataTable
                                                                                                                                                 dataTable1.Rows.Add(newRow3)

                                                                                                                                                 wierszDodany = True
                                                                                                                                                 istniejeWpliku = True

                                                                                                                                                 ' Warunek 2: Drukarka nie istnieje w pliku JSON
                                                                                                                                             ElseIf Not jestSerial Then
                                                                                                                                                 Dim newRow3 As DataRow = dataTable1.NewRow()
                                                                                                                                                 newRow3("Adres") = Printer_IP
                                                                                                                                                 newRow3("Nazwa hosta") = printerInfo.Hostname
                                                                                                                                                 newRow3("Urządzenie") = printerInfo.MarkaModel
                                                                                                                                                 newRow3("Nr seryjny") = printerInfo.SerialNumber
                                                                                                                                                 newRow3("MAC") = printerInfo.MAC
                                                                                                                                                 newRow3("Istnieje") = "" ' Domyślna wartość

                                                                                                                                                 ' Dodanie wiersza bez dodatkowych kryteriów
                                                                                                                                                 dataTable1.Rows.Add(newRow3)

                                                                                                                                                 wierszDodany = True
                                                                                                                                             End If

                                                                                                                                             ' Przypisanie DataTable jako źródła danych dla DataGridView
                                                                                                                                             If wierszDodany Then
                                                                                                                                                 DataGridView2.DataSource = dataTable1
                                                                                                                                                 DataGridView2.Visible = True

                                                                                                                                                 ' Konfiguracja checkboxa w nagłówku
                                                                                                                                                 Dim headerCellLocation As System.Drawing.Point = DataGridView2.GetCellDisplayRectangle(0, -1, True).Location
                                                                                                                                                 headerCheckBox.Location = New System.Drawing.Point(headerCellLocation.X + 8, headerCellLocation.Y + 2)
                                                                                                                                                 headerCheckBox.BackColor = Color.White
                                                                                                                                                 headerCheckBox.Size = New System.Drawing.Size(20, 20)

                                                                                                                                                 If Not DataGridView2.Columns.Contains("checkBoxColumn") Then
                                                                                                                                                     AddHandler headerCheckBox.Click, AddressOf HeaderCheckBox_Clicked
                                                                                                                                                     DataGridView2.Controls.Add(headerCheckBox)

                                                                                                                                                     Dim checkBoxColumn As DataGridViewCheckBoxColumn = New DataGridViewCheckBoxColumn()
                                                                                                                                                     checkBoxColumn.HeaderText = ""
                                                                                                                                                     checkBoxColumn.Width = 30
                                                                                                                                                     checkBoxColumn.Name = "checkBoxColumn"
                                                                                                                                                     DataGridView2.Columns.Insert(0, checkBoxColumn)
                                                                                                                                                 End If
                                                                                                                                             End If
                                                                                                                                         End If

                                                                                                                                         If Not File.Exists(filePath) Then

                                                                                                                                             DataGridView2.Visible = True

                                                                                                                                             iloscTotal += 1

                                                                                                                                             Dim newRow3 As DataRow = dataTable1.NewRow()
                                                                                                                                             newRow3("Adres") = Printer_IP
                                                                                                                                             newRow3("Nazwa hosta") = printerInfo.Hostname
                                                                                                                                             newRow3("Urządzenie") = printerInfo.MarkaModel
                                                                                                                                             newRow3("Nr seryjny") = printerInfo.SerialNumber
                                                                                                                                             newRow3("MAC") = printerInfo.MAC
                                                                                                                                             newRow3("Istnieje") = ""
                                                                                                                                             dataTable1.Rows.Add(newRow3)

                                                                                                                                             Dim newDane As New List(Of Dane)()
                                                                                                                                             Dim dane As New Dane()
                                                                                                                                             dane.AdresIp = Printer_IP
                                                                                                                                             dane.Hostname = printerInfo.Hostname
                                                                                                                                             dane.Urzadzenie = printerInfo.MarkaModel
                                                                                                                                             dane.SerialNumber = printerInfo.SerialNumber

                                                                                                                                             newDane.Add(dane)

                                                                                                                                             Dim headerCellLocation As System.Drawing.Point = DataGridView2.GetCellDisplayRectangle(0, -1, True).Location
                                                                                                                                             headerCheckBox.Location = New System.Drawing.Point(headerCellLocation.X + 8, headerCellLocation.Y + 2)
                                                                                                                                             headerCheckBox.BackColor = Color.White
                                                                                                                                             headerCheckBox.Size = New System.Drawing.Size(20, 20)

                                                                                                                                             If Not DataGridView2.Columns.Contains("checkBoxColumn") Then
                                                                                                                                                 AddHandler headerCheckBox.Click, AddressOf HeaderCheckBox_Clicked
                                                                                                                                                 DataGridView2.Controls.Add(headerCheckBox)

                                                                                                                                                 Dim checkBoxColumn As DataGridViewCheckBoxColumn = New DataGridViewCheckBoxColumn()
                                                                                                                                                 checkBoxColumn.HeaderText = ""
                                                                                                                                                 checkBoxColumn.Width = 30
                                                                                                                                                 checkBoxColumn.Name = "checkBoxColumn"
                                                                                                                                                 DataGridView2.Columns.Insert(0, checkBoxColumn)
                                                                                                                                             End If

                                                                                                                                             AddHandler DataGridView2.CellContentClick, AddressOf DataGridView_CellClick

                                                                                                                                         End If
                                                                                                                                     End If

                                                                                                                                 End Sub)
                                                                                                          End SyncLock
                                                                                                      Catch ex As Exception
                                                                                                          ' Obsługa błędów
                                                                                                      End Try

                                                                                                      If detailsForm.IsHandleCreated Then
                                                                                                          detailsForm.Invoke(Sub()
                                                                                                                                 progressBar.PerformStep()
                                                                                                                                 progressLabel.Text = $"{(progressBar.Value / progressBar.Maximum * 100):F0}%"
                                                                                                                             End Sub)
                                                                                                      Else
                                                                                                          ' Opcjonalnie możesz poczekać, aż uchwyt zostanie utworzony
                                                                                                          AddHandler detailsForm.HandleCreated, Sub()
                                                                                                                                                    detailsForm.Invoke(Sub()
                                                                                                                                                                           progressBar.PerformStep()
                                                                                                                                                                       End Sub)
                                                                                                                                                End Sub
                                                                                                      End If

                                                                                                  End Sub)

                                                                      SyncLock lockObject
                                                                          tasks.Add(task)
                                                                      End SyncLock

                                                                  Next
                                                              Next
                                                          Next
                                                      Next


                                                      ' Oczekiwanie na zakończenie wszystkich zadań
                                                      Await Task.WhenAll(tasks.ToArray())
                                                      ' Kolejne 3 sekundy
                                                      Await Task.Delay(3000)
                                                      AdresIpSekcjaNr2.BackColor = Color.FromArgb(204, 255, 153)
                                                      AdresIpSekcjaNr2.Enabled = True
                                                      AdresIpSekcjaNr3.BackColor = Color.FromArgb(204, 255, 153)
                                                      AdresIpSekcjaNr3.Enabled = True

                                                      progressBar.Visible = False
                                                      progressLabel.Visible = False
                                                      progressLabel.Text = "0%"
                                                      labelWyszukiwanieZakończone.Visible = True

                                                      Dim jakaRoznica As Integer = iloscTotal - (iloscWystepujeSystem + iloscWystepujeInnyAdress)

                                                      znalezionoTotal.Visible = True
                                                      znalezionoWystepujaSystem.Visible = True
                                                      znalezionoNieWystepujaSystem.Visible = True
                                                      znalezionoInnyAdres.Visible = True

                                                      znalezionoTotal.Text = "Wszystkie znalezione urządzenia: " & iloscTotal
                                                      znalezionoWystepujaSystem.Text = "Występuje w systemie: " & iloscWystepujeSystem
                                                      znalezionoInnyAdres.Text = "Występuje w systemie pod innym adresem: " & iloscWystepujeInnyAdress
                                                      znalezionoNieWystepujaSystem.Text = "Nie występuje w systemie: " & jakaRoznica

                                                      If DataGridView2.Rows.Count > 0 Then
                                                          labelListaZawiera.Visible = True
                                                          buttonZapisz.Visible = True
                                                      ElseIf DataGridView2.Rows.Count = 0 AndAlso iloscTotal > 0 Then
                                                          labelListaNieZawiera.Visible = True
                                                          buttonZapisz.Visible = False
                                                      Else
                                                          labelListaBrak.Visible = True
                                                          buttonZapisz.Visible = False
                                                      End If

                                                      buttonSzukajPrinter.Enabled = True

                                                      For Each btn As Button In buttonList
                                                          If btn Is sender Then
                                                              btn.Enabled = True
                                                          Else
                                                              btn.Enabled = True
                                                          End If
                                                      Next

                                                      ' ###### AUTO ###### JEDNO AKTYWNE ###### SEKCJA 2 ###### STOP


                                                      ' ###### AUTO ###### JEDNO AKTYWNE ###### SEKCJA 1 ###### START

                                                  ElseIf btnAuto = True AndAlso jednoActive = True AndAlso sekcjaNr1 = True Then

                                                      buttonSzukajPrinter.Enabled = False
                                                      AdresIpSekcjaNr1.Enabled = False
                                                      AdresIpSekcjaNr2.Enabled = False
                                                      AdresIpSekcjaNr3.Enabled = False
                                                      AdresIpSekcjaNr1.BackColor = Color.FromArgb(217, 217, 217)
                                                      AdresIpSekcjaNr2.BackColor = Color.FromArgb(217, 217, 217)
                                                      AdresIpSekcjaNr3.BackColor = Color.FromArgb(217, 217, 217)

                                                      progressBar.Visible = True
                                                      progressLabel.Visible = True

                                                      Dim tasks As New List(Of Task)()
                                                      Dim lockObject As New Object()
                                                      Dim range As Integer = (maxIpBytes(3) - minIpBytes(3) - 20)
                                                      progressBar.Minimum = 1
                                                      progressBar.Maximum = range
                                                      progressBar.Value = 1
                                                      progressBar.Step = 1

                                                      AddHandler TaskScheduler.UnobservedTaskException, Sub(evSender, args)
                                                                                                            ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                            args.SetObserved()
                                                                                                            args.Exception.Handle(Function(ex) True)
                                                                                                        End Sub

                                                      AddHandler TaskScheduler.Current.UnobservedTaskException, Sub(evSender, args)
                                                                                                                    ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                    args.SetObserved()
                                                                                                                    args.Exception.Handle(Function(ex) True)
                                                                                                                End Sub

                                                      AddHandler TaskScheduler.Default.UnobservedTaskException, Sub(evSender, args)
                                                                                                                    ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                    args.SetObserved()
                                                                                                                    args.Exception.Handle(Function(ex) True)
                                                                                                                End Sub

                                                      AddHandler TaskScheduler.FromCurrentSynchronizationContext.UnobservedTaskException, Sub(evSender, args)
                                                                                                                                              ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                                              args.SetObserved()
                                                                                                                                              args.Exception.Handle(Function(ex) True)
                                                                                                                                          End Sub

                                                      AddHandler TaskScheduler.Default.FromCurrentSynchronizationContext.UnobservedTaskException, Sub(evSender, args)
                                                                                                                                                      ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                                                      args.SetObserved()
                                                                                                                                                      args.Exception.Handle(Function(ex) True)
                                                                                                                                                  End Sub

                                                      AddHandler TaskScheduler.Default.FromCurrentSynchronizationContext.UnobservedTaskException, Sub(evSender, args)
                                                                                                                                                      ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                                                      args.SetObserved()
                                                                                                                                                      args.Exception.Handle(Function(ex) True)
                                                                                                                                                  End Sub

                                                      Dim lockObject1 As New Object()
                                                      Dim printerFound As Boolean = False
                                                      Dim iloscTotal As Integer = 0
                                                      Dim iloscWystepujeSystem As Integer = 0
                                                      Dim iloscWystepujeInnyAdress As Integer = 0

                                                      For a As Integer = Convert.ToInt32(AdresIpSekcjaNr1.Text) To Convert.ToInt32(AdresIpSekcjaNr1.Text)
                                                          For b As Integer = Convert.ToInt32(AdresIpSekcjaNr2.Text) To Convert.ToInt32(AdresIpSekcjaNr2.Text)
                                                              For c As Integer = Convert.ToInt32(AdresIpSekcjaNr3.Text) To Convert.ToInt32(AdresIpSekcjaNr3.Text)
                                                                  For d As Integer = minIpBytes(3) To maxIpBytes(3)

                                                                      Dim printerIP_1 As Integer = a
                                                                      Dim printerIP_2 As Integer = b
                                                                      Dim printerIP_3 As Integer = c
                                                                      Dim printerIP_4 As Integer = d

                                                                      Dim task As Task = Task.Run(Async Sub()
                                                                                                      Try
                                                                                                          Dim Printer_IP = $"{printerIP_1}.{printerIP_2}.{printerIP_3}.{printerIP_4}"
                                                                                                          Dim printerInfo As PrinterInfo = GetPrinterInfo(Printer_IP)
                                                                                                          SyncLock lockObject1
                                                                                                              detailsForm.Invoke(Sub()

                                                                                                                                     If printerInfo IsNot Nothing AndAlso Not String.IsNullOrEmpty(printerInfo.SerialNumber) Then
                                                                                                                                         If File.Exists(filePath) Then
                                                                                                                                             Dim readJson As String = File.ReadAllText(filePath)

                                                                                                                                             ' Parsowanie JSON do listy obiektów Dane
                                                                                                                                             Dim existingDevices As List(Of Dane) = JsonConvert.DeserializeObject(Of List(Of Dane))(readJson)
                                                                                                                                             iloscTotal += 1

                                                                                                                                             Dim jestSerial As Boolean = False
                                                                                                                                             Dim nieMaAdres As Boolean = False

                                                                                                                                             Dim wierszDodany As Boolean = False
                                                                                                                                             Dim istniejeWpliku As Boolean = False

                                                                                                                                             For Each dane In existingDevices
                                                                                                                                                 If dane.SerialNumber = printerInfo.SerialNumber Then
                                                                                                                                                     jestSerial = True
                                                                                                                                                     If dane.AdresIp <> Printer_IP Then
                                                                                                                                                         nieMaAdres = True
                                                                                                                                                         iloscWystepujeInnyAdress += 1
                                                                                                                                                     End If
                                                                                                                                                 End If
                                                                                                                                                 If dane.SerialNumber = printerInfo.SerialNumber AndAlso dane.AdresIp = Printer_IP Then
                                                                                                                                                     iloscWystepujeSystem += 1
                                                                                                                                                 End If
                                                                                                                                             Next

                                                                                                                                             ' Warunek 1: Drukarka istnieje z innym adresem IP
                                                                                                                                             If jestSerial AndAlso nieMaAdres Then
                                                                                                                                                 Dim newRow3 As DataRow = dataTable1.NewRow()
                                                                                                                                                 newRow3("Adres") = Printer_IP
                                                                                                                                                 newRow3("Nazwa hosta") = printerInfo.Hostname
                                                                                                                                                 newRow3("Urządzenie") = printerInfo.MarkaModel
                                                                                                                                                 newRow3("Nr seryjny") = printerInfo.SerialNumber
                                                                                                                                                 newRow3("MAC") = printerInfo.MAC
                                                                                                                                                 newRow3("Istnieje") = ChrW(&H2022)
                                                                                                                                                 ' Dodanie wiersza do DataTable
                                                                                                                                                 dataTable1.Rows.Add(newRow3)

                                                                                                                                                 wierszDodany = True
                                                                                                                                                 istniejeWpliku = True

                                                                                                                                                 ' Warunek 2: Drukarka nie istnieje w pliku JSON
                                                                                                                                             ElseIf Not jestSerial Then
                                                                                                                                                 Dim newRow3 As DataRow = dataTable1.NewRow()
                                                                                                                                                 newRow3("Adres") = Printer_IP
                                                                                                                                                 newRow3("Nazwa hosta") = printerInfo.Hostname
                                                                                                                                                 newRow3("Urządzenie") = printerInfo.MarkaModel
                                                                                                                                                 newRow3("Nr seryjny") = printerInfo.SerialNumber
                                                                                                                                                 newRow3("MAC") = printerInfo.MAC
                                                                                                                                                 newRow3("Istnieje") = "" ' Domyślna wartość

                                                                                                                                                 ' Dodanie wiersza bez dodatkowych kryteriów
                                                                                                                                                 dataTable1.Rows.Add(newRow3)

                                                                                                                                                 wierszDodany = True
                                                                                                                                             End If

                                                                                                                                             ' Przypisanie DataTable jako źródła danych dla DataGridView
                                                                                                                                             If wierszDodany Then
                                                                                                                                                 DataGridView2.DataSource = dataTable1
                                                                                                                                                 DataGridView2.Visible = True

                                                                                                                                                 ' Konfiguracja checkboxa w nagłówku
                                                                                                                                                 Dim headerCellLocation As System.Drawing.Point = DataGridView2.GetCellDisplayRectangle(0, -1, True).Location
                                                                                                                                                 headerCheckBox.Location = New System.Drawing.Point(headerCellLocation.X + 8, headerCellLocation.Y + 2)
                                                                                                                                                 headerCheckBox.BackColor = Color.White
                                                                                                                                                 headerCheckBox.Size = New System.Drawing.Size(20, 20)

                                                                                                                                                 If Not DataGridView2.Columns.Contains("checkBoxColumn") Then
                                                                                                                                                     AddHandler headerCheckBox.Click, AddressOf HeaderCheckBox_Clicked
                                                                                                                                                     DataGridView2.Controls.Add(headerCheckBox)

                                                                                                                                                     Dim checkBoxColumn As DataGridViewCheckBoxColumn = New DataGridViewCheckBoxColumn()
                                                                                                                                                     checkBoxColumn.HeaderText = ""
                                                                                                                                                     checkBoxColumn.Width = 30
                                                                                                                                                     checkBoxColumn.Name = "checkBoxColumn"
                                                                                                                                                     DataGridView2.Columns.Insert(0, checkBoxColumn)
                                                                                                                                                 End If
                                                                                                                                             End If
                                                                                                                                         End If

                                                                                                                                         If Not File.Exists(filePath) Then

                                                                                                                                             DataGridView2.Visible = True

                                                                                                                                             iloscTotal += 1

                                                                                                                                             Dim newRow3 As DataRow = dataTable1.NewRow()
                                                                                                                                             newRow3("Adres") = Printer_IP
                                                                                                                                             newRow3("Nazwa hosta") = printerInfo.Hostname
                                                                                                                                             newRow3("Urządzenie") = printerInfo.MarkaModel
                                                                                                                                             newRow3("Nr seryjny") = printerInfo.SerialNumber
                                                                                                                                             newRow3("MAC") = printerInfo.MAC
                                                                                                                                             newRow3("Istnieje") = ""
                                                                                                                                             dataTable1.Rows.Add(newRow3)

                                                                                                                                             Dim newDane As New List(Of Dane)()
                                                                                                                                             Dim dane As New Dane()
                                                                                                                                             dane.AdresIp = Printer_IP
                                                                                                                                             dane.Hostname = printerInfo.Hostname
                                                                                                                                             dane.Urzadzenie = printerInfo.MarkaModel
                                                                                                                                             dane.SerialNumber = printerInfo.SerialNumber

                                                                                                                                             newDane.Add(dane)

                                                                                                                                             Dim headerCellLocation As System.Drawing.Point = DataGridView2.GetCellDisplayRectangle(0, -1, True).Location
                                                                                                                                             headerCheckBox.Location = New System.Drawing.Point(headerCellLocation.X + 8, headerCellLocation.Y + 2)
                                                                                                                                             headerCheckBox.BackColor = Color.White
                                                                                                                                             headerCheckBox.Size = New System.Drawing.Size(20, 20)

                                                                                                                                             If Not DataGridView2.Columns.Contains("checkBoxColumn") Then
                                                                                                                                                 AddHandler headerCheckBox.Click, AddressOf HeaderCheckBox_Clicked
                                                                                                                                                 DataGridView2.Controls.Add(headerCheckBox)

                                                                                                                                                 Dim checkBoxColumn As DataGridViewCheckBoxColumn = New DataGridViewCheckBoxColumn()
                                                                                                                                                 checkBoxColumn.HeaderText = ""
                                                                                                                                                 checkBoxColumn.Width = 30
                                                                                                                                                 checkBoxColumn.Name = "checkBoxColumn"
                                                                                                                                                 DataGridView2.Columns.Insert(0, checkBoxColumn)
                                                                                                                                             End If

                                                                                                                                             AddHandler DataGridView2.CellContentClick, AddressOf DataGridView_CellClick

                                                                                                                                         End If
                                                                                                                                     End If

                                                                                                                                 End Sub)
                                                                                                          End SyncLock
                                                                                                      Catch ex As Exception
                                                                                                          ' Obsługa błędów
                                                                                                      End Try

                                                                                                      If detailsForm.IsHandleCreated Then
                                                                                                          detailsForm.Invoke(Sub()
                                                                                                                                 progressBar.PerformStep()
                                                                                                                                 progressLabel.Text = $"{(progressBar.Value / progressBar.Maximum * 100):F0}%"
                                                                                                                             End Sub)
                                                                                                      Else
                                                                                                          ' Opcjonalnie możesz poczekać, aż uchwyt zostanie utworzony
                                                                                                          AddHandler detailsForm.HandleCreated, Sub()
                                                                                                                                                    detailsForm.Invoke(Sub()
                                                                                                                                                                           progressBar.PerformStep()
                                                                                                                                                                       End Sub)
                                                                                                                                                End Sub
                                                                                                      End If

                                                                                                  End Sub)

                                                                      SyncLock lockObject
                                                                          tasks.Add(task)
                                                                      End SyncLock

                                                                  Next
                                                              Next
                                                          Next
                                                      Next

                                                      ' Oczekiwanie na zakończenie wszystkich zadań
                                                      Await Task.WhenAll(tasks.ToArray())
                                                      ' Kolejne 3 sekundy
                                                      Await Task.Delay(3000)
                                                      AdresIpSekcjaNr1.BackColor = Color.FromArgb(204, 255, 153)
                                                      AdresIpSekcjaNr1.Enabled = True
                                                      AdresIpSekcjaNr2.BackColor = Color.FromArgb(204, 255, 153)
                                                      AdresIpSekcjaNr2.Enabled = True
                                                      AdresIpSekcjaNr3.BackColor = Color.FromArgb(204, 255, 153)
                                                      AdresIpSekcjaNr3.Enabled = True

                                                      progressBar.Visible = False
                                                      progressLabel.Visible = False
                                                      progressLabel.Text = "0%"
                                                      labelWyszukiwanieZakończone.Visible = True

                                                      Dim jakaRoznica As Integer = iloscTotal - (iloscWystepujeSystem + iloscWystepujeInnyAdress)

                                                      znalezionoTotal.Visible = True
                                                      znalezionoWystepujaSystem.Visible = True
                                                      znalezionoNieWystepujaSystem.Visible = True
                                                      znalezionoInnyAdres.Visible = True

                                                      znalezionoTotal.Text = "Wszystkie znalezione urządzenia: " & iloscTotal
                                                      znalezionoWystepujaSystem.Text = "Występuje w systemie: " & iloscWystepujeSystem
                                                      znalezionoInnyAdres.Text = "Występuje w systemie pod innym adresem: " & iloscWystepujeInnyAdress
                                                      znalezionoNieWystepujaSystem.Text = "Nie występuje w systemie: " & jakaRoznica

                                                      If DataGridView2.Rows.Count > 0 Then
                                                          labelListaZawiera.Visible = True
                                                          buttonZapisz.Visible = True
                                                      ElseIf DataGridView2.Rows.Count = 0 AndAlso iloscTotal > 0 Then
                                                          labelListaNieZawiera.Visible = True
                                                          buttonZapisz.Visible = False
                                                      Else
                                                          labelListaBrak.Visible = True
                                                          buttonZapisz.Visible = False
                                                      End If

                                                      buttonSzukajPrinter.Enabled = True

                                                      For Each btn As Button In buttonList
                                                          If btn Is sender Then
                                                              btn.Enabled = True
                                                          Else
                                                              btn.Enabled = True
                                                          End If
                                                      Next

                                                      ' ###### AUTO ###### JEDNO AKTYWNE ###### SEKCJA 1 ###### STOP

                                                      ' ###### AUTO ###### WIELE AKTYWNE ###### SEKCJA 4 ###### START
                                                  ElseIf btnAuto = True AndAlso wieleActive = True AndAlso sekcjaNr4 = True Then

                                                      buttonSzukajPrinter.Enabled = False
                                                      AdresIpSekcjaNr1.Enabled = False
                                                      AdresIpSekcjaNr2.Enabled = False
                                                      AdresIpSekcjaNr3.Enabled = False

                                                      AdresIpSekcjaNr1.Text = maxIpBytes(0)
                                                      AdresIpSekcjaNr1.Visible = False

                                                      AdresIpSekcjaNr2.Text = maxIpBytes(1)
                                                      AdresIpSekcjaNr2.Visible = False

                                                      AdresIpSekcjaNr3.Text = maxIpBytes(2)
                                                      AdresIpSekcjaNr3.Visible = False

                                                      progressBar.Visible = True
                                                      progressLabel.Visible = True

                                                      Dim tasks As New List(Of Task)()
                                                      Dim lockObject As New Object()
                                                      Dim range As Integer = (maxIpBytes(3) - minIpBytes(3))
                                                      progressBar.Minimum = 1
                                                      progressBar.Maximum = range
                                                      progressBar.Value = 1
                                                      progressBar.Step = 1

                                                      AddHandler TaskScheduler.UnobservedTaskException, Sub(evSender, args)
                                                                                                            ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                            args.SetObserved()
                                                                                                            args.Exception.Handle(Function(ex) True)
                                                                                                        End Sub

                                                      AddHandler TaskScheduler.Current.UnobservedTaskException, Sub(evSender, args)
                                                                                                                    ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                    args.SetObserved()
                                                                                                                    args.Exception.Handle(Function(ex) True)
                                                                                                                End Sub

                                                      AddHandler TaskScheduler.Default.UnobservedTaskException, Sub(evSender, args)
                                                                                                                    ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                    args.SetObserved()
                                                                                                                    args.Exception.Handle(Function(ex) True)
                                                                                                                End Sub

                                                      AddHandler TaskScheduler.FromCurrentSynchronizationContext.UnobservedTaskException, Sub(evSender, args)
                                                                                                                                              ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                                              args.SetObserved()
                                                                                                                                              args.Exception.Handle(Function(ex) True)
                                                                                                                                          End Sub

                                                      AddHandler TaskScheduler.Default.FromCurrentSynchronizationContext.UnobservedTaskException, Sub(evSender, args)
                                                                                                                                                      ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                                                      args.SetObserved()
                                                                                                                                                      args.Exception.Handle(Function(ex) True)
                                                                                                                                                  End Sub

                                                      AddHandler TaskScheduler.Default.FromCurrentSynchronizationContext.UnobservedTaskException, Sub(evSender, args)
                                                                                                                                                      ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                                                      args.SetObserved()
                                                                                                                                                      args.Exception.Handle(Function(ex) True)
                                                                                                                                                  End Sub

                                                      Dim lockObject1 As New Object()
                                                      Dim printerFound As Boolean = False
                                                      Dim iloscTotal As Integer = 0
                                                      Dim iloscWystepujeSystem As Integer = 0
                                                      Dim iloscWystepujeInnyAdress As Integer = 0

                                                      For a As Integer = Convert.ToInt32(AdresIpSekcjaNr1.Text) To Convert.ToInt32(AdresIpSekcjaNr1.Text)
                                                          For b As Integer = Convert.ToInt32(AdresIpSekcjaNr2.Text) To Convert.ToInt32(AdresIpSekcjaNr2.Text)
                                                              For c As Integer = Convert.ToInt32(AdresIpSekcjaNr3.Text) To Convert.ToInt32(AdresIpSekcjaNr3.Text)
                                                                  For d As Integer = minIpBytes(3) To maxIpBytes(3)

                                                                      Dim printerIP_1 As Integer = a
                                                                      Dim printerIP_2 As Integer = b
                                                                      Dim printerIP_3 As Integer = c
                                                                      Dim printerIP_4 As Integer = d

                                                                      Dim task As Task = Task.Run(Async Sub()
                                                                                                      Try
                                                                                                          Dim Printer_IP = $"{printerIP_1}.{printerIP_2}.{printerIP_3}.{printerIP_4}"
                                                                                                          Dim printerInfo As PrinterInfo = GetPrinterInfo(Printer_IP)
                                                                                                          SyncLock lockObject1
                                                                                                              detailsForm.Invoke(Sub()

                                                                                                                                     If printerInfo IsNot Nothing AndAlso Not String.IsNullOrEmpty(printerInfo.SerialNumber) Then
                                                                                                                                         If File.Exists(filePath) Then
                                                                                                                                             Dim readJson As String = File.ReadAllText(filePath)

                                                                                                                                             ' Parsowanie JSON do listy obiektów Dane
                                                                                                                                             Dim existingDevices As List(Of Dane) = JsonConvert.DeserializeObject(Of List(Of Dane))(readJson)
                                                                                                                                             iloscTotal += 1

                                                                                                                                             Dim jestSerial As Boolean = False
                                                                                                                                             Dim nieMaAdres As Boolean = False

                                                                                                                                             Dim wierszDodany As Boolean = False
                                                                                                                                             Dim istniejeWpliku As Boolean = False

                                                                                                                                             For Each dane In existingDevices
                                                                                                                                                 If dane.SerialNumber = printerInfo.SerialNumber Then
                                                                                                                                                     jestSerial = True
                                                                                                                                                     If dane.AdresIp <> Printer_IP Then
                                                                                                                                                         nieMaAdres = True
                                                                                                                                                         iloscWystepujeInnyAdress += 1
                                                                                                                                                     End If
                                                                                                                                                 End If
                                                                                                                                                 If dane.SerialNumber = printerInfo.SerialNumber AndAlso dane.AdresIp = Printer_IP Then
                                                                                                                                                     iloscWystepujeSystem += 1
                                                                                                                                                 End If
                                                                                                                                             Next

                                                                                                                                             ' Warunek 1: Drukarka istnieje z innym adresem IP
                                                                                                                                             If jestSerial AndAlso nieMaAdres Then
                                                                                                                                                 Dim newRow3 As DataRow = dataTable1.NewRow()
                                                                                                                                                 newRow3("Adres") = Printer_IP
                                                                                                                                                 newRow3("Nazwa hosta") = printerInfo.Hostname
                                                                                                                                                 newRow3("Urządzenie") = printerInfo.MarkaModel
                                                                                                                                                 newRow3("Nr seryjny") = printerInfo.SerialNumber
                                                                                                                                                 newRow3("MAC") = printerInfo.MAC
                                                                                                                                                 newRow3("Istnieje") = ChrW(&H2022)
                                                                                                                                                 ' Dodanie wiersza do DataTable
                                                                                                                                                 dataTable1.Rows.Add(newRow3)

                                                                                                                                                 wierszDodany = True
                                                                                                                                                 istniejeWpliku = True

                                                                                                                                                 ' Warunek 2: Drukarka nie istnieje w pliku JSON
                                                                                                                                             ElseIf Not jestSerial Then
                                                                                                                                                 Dim newRow3 As DataRow = dataTable1.NewRow()
                                                                                                                                                 newRow3("Adres") = Printer_IP
                                                                                                                                                 newRow3("Nazwa hosta") = printerInfo.Hostname
                                                                                                                                                 newRow3("Urządzenie") = printerInfo.MarkaModel
                                                                                                                                                 newRow3("Nr seryjny") = printerInfo.SerialNumber
                                                                                                                                                 newRow3("MAC") = printerInfo.MAC
                                                                                                                                                 newRow3("Istnieje") = "" ' Domyślna wartość

                                                                                                                                                 ' Dodanie wiersza bez dodatkowych kryteriów
                                                                                                                                                 dataTable1.Rows.Add(newRow3)

                                                                                                                                                 wierszDodany = True
                                                                                                                                             End If

                                                                                                                                             ' Przypisanie DataTable jako źródła danych dla DataGridView
                                                                                                                                             If wierszDodany Then
                                                                                                                                                 DataGridView2.DataSource = dataTable1
                                                                                                                                                 DataGridView2.Visible = True

                                                                                                                                                 ' Konfiguracja checkboxa w nagłówku
                                                                                                                                                 Dim headerCellLocation As System.Drawing.Point = DataGridView2.GetCellDisplayRectangle(0, -1, True).Location
                                                                                                                                                 headerCheckBox.Location = New System.Drawing.Point(headerCellLocation.X + 8, headerCellLocation.Y + 2)
                                                                                                                                                 headerCheckBox.BackColor = Color.White
                                                                                                                                                 headerCheckBox.Size = New System.Drawing.Size(20, 20)

                                                                                                                                                 If Not DataGridView2.Columns.Contains("checkBoxColumn") Then
                                                                                                                                                     AddHandler headerCheckBox.Click, AddressOf HeaderCheckBox_Clicked
                                                                                                                                                     DataGridView2.Controls.Add(headerCheckBox)

                                                                                                                                                     Dim checkBoxColumn As DataGridViewCheckBoxColumn = New DataGridViewCheckBoxColumn()
                                                                                                                                                     checkBoxColumn.HeaderText = ""
                                                                                                                                                     checkBoxColumn.Width = 30
                                                                                                                                                     checkBoxColumn.Name = "checkBoxColumn"
                                                                                                                                                     DataGridView2.Columns.Insert(0, checkBoxColumn)
                                                                                                                                                 End If
                                                                                                                                             End If
                                                                                                                                         End If

                                                                                                                                         If Not File.Exists(filePath) Then

                                                                                                                                             DataGridView2.Visible = True

                                                                                                                                             iloscTotal += 1

                                                                                                                                             Dim newRow3 As DataRow = dataTable1.NewRow()
                                                                                                                                             newRow3("Adres") = Printer_IP
                                                                                                                                             newRow3("Nazwa hosta") = printerInfo.Hostname
                                                                                                                                             newRow3("Urządzenie") = printerInfo.MarkaModel
                                                                                                                                             newRow3("Nr seryjny") = printerInfo.SerialNumber
                                                                                                                                             newRow3("MAC") = printerInfo.MAC
                                                                                                                                             newRow3("Istnieje") = ""
                                                                                                                                             dataTable1.Rows.Add(newRow3)

                                                                                                                                             Dim newDane As New List(Of Dane)()
                                                                                                                                             Dim dane As New Dane()
                                                                                                                                             dane.AdresIp = Printer_IP
                                                                                                                                             dane.Hostname = printerInfo.Hostname
                                                                                                                                             dane.Urzadzenie = printerInfo.MarkaModel
                                                                                                                                             dane.SerialNumber = printerInfo.SerialNumber

                                                                                                                                             newDane.Add(dane)

                                                                                                                                             Dim headerCellLocation As System.Drawing.Point = DataGridView2.GetCellDisplayRectangle(0, -1, True).Location
                                                                                                                                             headerCheckBox.Location = New System.Drawing.Point(headerCellLocation.X + 8, headerCellLocation.Y + 2)
                                                                                                                                             headerCheckBox.BackColor = Color.White
                                                                                                                                             headerCheckBox.Size = New System.Drawing.Size(20, 20)

                                                                                                                                             If Not DataGridView2.Columns.Contains("checkBoxColumn") Then
                                                                                                                                                 AddHandler headerCheckBox.Click, AddressOf HeaderCheckBox_Clicked
                                                                                                                                                 DataGridView2.Controls.Add(headerCheckBox)

                                                                                                                                                 Dim checkBoxColumn As DataGridViewCheckBoxColumn = New DataGridViewCheckBoxColumn()
                                                                                                                                                 checkBoxColumn.HeaderText = ""
                                                                                                                                                 checkBoxColumn.Width = 30
                                                                                                                                                 checkBoxColumn.Name = "checkBoxColumn"
                                                                                                                                                 DataGridView2.Columns.Insert(0, checkBoxColumn)
                                                                                                                                             End If

                                                                                                                                             AddHandler DataGridView2.CellContentClick, AddressOf DataGridView_CellClick

                                                                                                                                         End If
                                                                                                                                     End If

                                                                                                                                 End Sub)
                                                                                                          End SyncLock
                                                                                                      Catch ex As Exception
                                                                                                          ' Obsługa błędów
                                                                                                      End Try

                                                                                                      If detailsForm.IsHandleCreated Then
                                                                                                          detailsForm.Invoke(Sub()
                                                                                                                                 progressBar.PerformStep()
                                                                                                                                 progressLabel.Text = $"{(progressBar.Value / progressBar.Maximum * 100):F0}%"
                                                                                                                             End Sub)
                                                                                                      Else
                                                                                                          ' Opcjonalnie możesz poczekać, aż uchwyt zostanie utworzony
                                                                                                          AddHandler detailsForm.HandleCreated, Sub()
                                                                                                                                                    detailsForm.Invoke(Sub()
                                                                                                                                                                           progressBar.PerformStep()
                                                                                                                                                                       End Sub)
                                                                                                                                                End Sub
                                                                                                      End If

                                                                                                  End Sub)

                                                                      SyncLock lockObject
                                                                          tasks.Add(task)
                                                                      End SyncLock

                                                                  Next
                                                              Next
                                                          Next
                                                      Next

                                                      ' Oczekiwanie na zakończenie wszystkich zadań
                                                      Await Task.WhenAll(tasks.ToArray())
                                                      ' Kolejne 3 sekundy
                                                      Await Task.Delay(3000)

                                                      progressBar.Visible = False
                                                      progressLabel.Visible = False
                                                      progressLabel.Text = "0%"
                                                      labelWyszukiwanieZakończone.Visible = True

                                                      Dim jakaRoznica As Integer = iloscTotal - (iloscWystepujeSystem + iloscWystepujeInnyAdress)

                                                      znalezionoTotal.Visible = True
                                                      znalezionoWystepujaSystem.Visible = True
                                                      znalezionoNieWystepujaSystem.Visible = True
                                                      znalezionoInnyAdres.Visible = True

                                                      znalezionoTotal.Text = "Wszystkie znalezione urządzenia: " & iloscTotal
                                                      znalezionoWystepujaSystem.Text = "Występuje w systemie: " & iloscWystepujeSystem
                                                      znalezionoInnyAdres.Text = "Występuje w systemie pod innym adresem: " & iloscWystepujeInnyAdress
                                                      znalezionoNieWystepujaSystem.Text = "Nie występuje w systemie: " & jakaRoznica

                                                      If DataGridView2.Rows.Count > 0 Then
                                                          labelListaZawiera.Visible = True
                                                          buttonZapisz.Visible = True
                                                      ElseIf DataGridView2.Rows.Count = 0 AndAlso iloscTotal > 0 Then
                                                          labelListaNieZawiera.Visible = True
                                                          buttonZapisz.Visible = False
                                                      Else
                                                          labelListaBrak.Visible = True
                                                          buttonZapisz.Visible = False
                                                      End If

                                                      buttonSzukajPrinter.Enabled = True

                                                      For Each btn As Button In buttonList
                                                          If btn Is sender Then
                                                              btn.Enabled = True
                                                          Else
                                                              btn.Enabled = True
                                                          End If
                                                      Next

                                                      For Each radioButton In radioButtons
                                                          radioButton.Enabled = True
                                                      Next

                                                      ' ###### AUTO ###### WIELE AKTYWNE ###### SEKCJA 4 ###### STOP


                                                      ' ###### AUTO ###### WIELE AKTYWNE ###### SEKCJA 3 ###### START
                                                  ElseIf btnAuto = True AndAlso wieleActive = True AndAlso sekcjaNr3 = True Then

                                                      labelZakres1.Visible = False
                                                      buttonSzukajPrinter.Enabled = False
                                                      AdresIpSekcjaNr1.Enabled = False
                                                      AdresIpSekcjaNr2.Enabled = False
                                                      AdresIpSekcjaNr3.Enabled = False
                                                      AdresIpSekcjaNr3.BackColor = Color.FromArgb(217, 217, 217)
                                                      AdresIpSekcjaNr1.Visible = True
                                                      AdresIpSekcjaNr2.Visible = True
                                                      AdresIpSekcjaNr3.Visible = True
                                                      AdresIpSekcjaNr4.Visible = True
                                                      progressBar.Visible = True
                                                      progressLabel.Visible = True

                                                      Dim tasks As New List(Of Task)()
                                                      Dim lockObject As New Object()
                                                      Dim range As Integer = (maxIpBytes(3) - minIpBytes(3) - 20)
                                                      progressBar.Minimum = 1
                                                      progressBar.Maximum = range
                                                      progressBar.Value = 1
                                                      progressBar.Step = 1

                                                      AddHandler TaskScheduler.UnobservedTaskException, Sub(evSender, args)
                                                                                                            ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                            args.SetObserved()
                                                                                                            args.Exception.Handle(Function(ex) True)
                                                                                                        End Sub

                                                      AddHandler TaskScheduler.Current.UnobservedTaskException, Sub(evSender, args)
                                                                                                                    ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                    args.SetObserved()
                                                                                                                    args.Exception.Handle(Function(ex) True)
                                                                                                                End Sub

                                                      AddHandler TaskScheduler.Default.UnobservedTaskException, Sub(evSender, args)
                                                                                                                    ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                    args.SetObserved()
                                                                                                                    args.Exception.Handle(Function(ex) True)
                                                                                                                End Sub

                                                      AddHandler TaskScheduler.FromCurrentSynchronizationContext.UnobservedTaskException, Sub(evSender, args)
                                                                                                                                              ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                                              args.SetObserved()
                                                                                                                                              args.Exception.Handle(Function(ex) True)
                                                                                                                                          End Sub

                                                      AddHandler TaskScheduler.Default.FromCurrentSynchronizationContext.UnobservedTaskException, Sub(evSender, args)
                                                                                                                                                      ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                                                      args.SetObserved()
                                                                                                                                                      args.Exception.Handle(Function(ex) True)
                                                                                                                                                  End Sub

                                                      AddHandler TaskScheduler.Default.FromCurrentSynchronizationContext.UnobservedTaskException, Sub(evSender, args)
                                                                                                                                                      ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                                                      args.SetObserved()
                                                                                                                                                      args.Exception.Handle(Function(ex) True)
                                                                                                                                                  End Sub

                                                      Dim lockObject1 As New Object()
                                                      Dim printerFound As Boolean = False
                                                      Dim iloscTotal As Integer = 0
                                                      Dim iloscWystepujeSystem As Integer = 0
                                                      Dim iloscWystepujeInnyAdress As Integer = 0

                                                      For a As Integer = Convert.ToInt32(AdresIpSekcjaNr1.Text) To Convert.ToInt32(AdresIpSekcjaNr1.Text)
                                                          For b As Integer = Convert.ToInt32(AdresIpSekcjaNr2.Text) To Convert.ToInt32(AdresIpSekcjaNr2.Text)
                                                              For c As Integer = Convert.ToInt32(AdresIpSekcjaNr3.Text) To Convert.ToInt32(AdresIpSekcjaNr3.Text)
                                                                  For d As Integer = minIpBytes(3) To maxIpBytes(3)

                                                                      Dim printerIP_1 As Integer = a
                                                                      Dim printerIP_2 As Integer = b
                                                                      Dim printerIP_3 As Integer = c
                                                                      Dim printerIP_4 As Integer = d

                                                                      Dim task As Task = Task.Run(Async Sub()
                                                                                                      Try
                                                                                                          Dim Printer_IP = $"{printerIP_1}.{printerIP_2}.{printerIP_3}.{printerIP_4}"
                                                                                                          Dim printerInfo As PrinterInfo = GetPrinterInfo(Printer_IP)
                                                                                                          SyncLock lockObject1
                                                                                                              detailsForm.Invoke(Sub()

                                                                                                                                     If printerInfo IsNot Nothing AndAlso Not String.IsNullOrEmpty(printerInfo.SerialNumber) Then
                                                                                                                                         If File.Exists(filePath) Then
                                                                                                                                             Dim readJson As String = File.ReadAllText(filePath)

                                                                                                                                             ' Parsowanie JSON do listy obiektów Dane
                                                                                                                                             Dim existingDevices As List(Of Dane) = JsonConvert.DeserializeObject(Of List(Of Dane))(readJson)
                                                                                                                                             iloscTotal += 1

                                                                                                                                             Dim jestSerial As Boolean = False
                                                                                                                                             Dim nieMaAdres As Boolean = False

                                                                                                                                             Dim wierszDodany As Boolean = False
                                                                                                                                             Dim istniejeWpliku As Boolean = False

                                                                                                                                             For Each dane In existingDevices
                                                                                                                                                 If dane.SerialNumber = printerInfo.SerialNumber Then
                                                                                                                                                     jestSerial = True
                                                                                                                                                     If dane.AdresIp <> Printer_IP Then
                                                                                                                                                         nieMaAdres = True
                                                                                                                                                         iloscWystepujeInnyAdress += 1
                                                                                                                                                     End If
                                                                                                                                                 End If
                                                                                                                                                 If dane.SerialNumber = printerInfo.SerialNumber AndAlso dane.AdresIp = Printer_IP Then
                                                                                                                                                     iloscWystepujeSystem += 1
                                                                                                                                                 End If
                                                                                                                                             Next

                                                                                                                                             ' Warunek 1: Drukarka istnieje z innym adresem IP
                                                                                                                                             If jestSerial AndAlso nieMaAdres Then
                                                                                                                                                 Dim newRow3 As DataRow = dataTable1.NewRow()
                                                                                                                                                 newRow3("Adres") = Printer_IP
                                                                                                                                                 newRow3("Nazwa hosta") = printerInfo.Hostname
                                                                                                                                                 newRow3("Urządzenie") = printerInfo.MarkaModel
                                                                                                                                                 newRow3("Nr seryjny") = printerInfo.SerialNumber
                                                                                                                                                 newRow3("MAC") = printerInfo.MAC
                                                                                                                                                 newRow3("Istnieje") = ChrW(&H2022)
                                                                                                                                                 ' Dodanie wiersza do DataTable
                                                                                                                                                 dataTable1.Rows.Add(newRow3)

                                                                                                                                                 wierszDodany = True
                                                                                                                                                 istniejeWpliku = True

                                                                                                                                                 ' Warunek 2: Drukarka nie istnieje w pliku JSON
                                                                                                                                             ElseIf Not jestSerial Then
                                                                                                                                                 Dim newRow3 As DataRow = dataTable1.NewRow()
                                                                                                                                                 newRow3("Adres") = Printer_IP
                                                                                                                                                 newRow3("Nazwa hosta") = printerInfo.Hostname
                                                                                                                                                 newRow3("Urządzenie") = printerInfo.MarkaModel
                                                                                                                                                 newRow3("Nr seryjny") = printerInfo.SerialNumber
                                                                                                                                                 newRow3("MAC") = printerInfo.MAC
                                                                                                                                                 newRow3("Istnieje") = "" ' Domyślna wartość

                                                                                                                                                 ' Dodanie wiersza bez dodatkowych kryteriów
                                                                                                                                                 dataTable1.Rows.Add(newRow3)

                                                                                                                                                 wierszDodany = True
                                                                                                                                             End If

                                                                                                                                             ' Przypisanie DataTable jako źródła danych dla DataGridView
                                                                                                                                             If wierszDodany Then
                                                                                                                                                 DataGridView2.DataSource = dataTable1
                                                                                                                                                 DataGridView2.Visible = True

                                                                                                                                                 ' Konfiguracja checkboxa w nagłówku
                                                                                                                                                 Dim headerCellLocation As System.Drawing.Point = DataGridView2.GetCellDisplayRectangle(0, -1, True).Location
                                                                                                                                                 headerCheckBox.Location = New System.Drawing.Point(headerCellLocation.X + 8, headerCellLocation.Y + 2)
                                                                                                                                                 headerCheckBox.BackColor = Color.White
                                                                                                                                                 headerCheckBox.Size = New System.Drawing.Size(20, 20)

                                                                                                                                                 If Not DataGridView2.Columns.Contains("checkBoxColumn") Then
                                                                                                                                                     AddHandler headerCheckBox.Click, AddressOf HeaderCheckBox_Clicked
                                                                                                                                                     DataGridView2.Controls.Add(headerCheckBox)

                                                                                                                                                     Dim checkBoxColumn As DataGridViewCheckBoxColumn = New DataGridViewCheckBoxColumn()
                                                                                                                                                     checkBoxColumn.HeaderText = ""
                                                                                                                                                     checkBoxColumn.Width = 30
                                                                                                                                                     checkBoxColumn.Name = "checkBoxColumn"
                                                                                                                                                     DataGridView2.Columns.Insert(0, checkBoxColumn)
                                                                                                                                                 End If
                                                                                                                                             End If
                                                                                                                                         End If

                                                                                                                                         If Not File.Exists(filePath) Then

                                                                                                                                             DataGridView2.Visible = True

                                                                                                                                             iloscTotal += 1

                                                                                                                                             Dim newRow3 As DataRow = dataTable1.NewRow()
                                                                                                                                             newRow3("Adres") = Printer_IP
                                                                                                                                             newRow3("Nazwa hosta") = printerInfo.Hostname
                                                                                                                                             newRow3("Urządzenie") = printerInfo.MarkaModel
                                                                                                                                             newRow3("Nr seryjny") = printerInfo.SerialNumber
                                                                                                                                             newRow3("MAC") = printerInfo.MAC
                                                                                                                                             newRow3("Istnieje") = ""
                                                                                                                                             dataTable1.Rows.Add(newRow3)

                                                                                                                                             Dim newDane As New List(Of Dane)()
                                                                                                                                             Dim dane As New Dane()
                                                                                                                                             dane.AdresIp = Printer_IP
                                                                                                                                             dane.Hostname = printerInfo.Hostname
                                                                                                                                             dane.Urzadzenie = printerInfo.MarkaModel
                                                                                                                                             dane.SerialNumber = printerInfo.SerialNumber

                                                                                                                                             newDane.Add(dane)

                                                                                                                                             Dim headerCellLocation As System.Drawing.Point = DataGridView2.GetCellDisplayRectangle(0, -1, True).Location
                                                                                                                                             headerCheckBox.Location = New System.Drawing.Point(headerCellLocation.X + 8, headerCellLocation.Y + 2)
                                                                                                                                             headerCheckBox.BackColor = Color.White
                                                                                                                                             headerCheckBox.Size = New System.Drawing.Size(20, 20)

                                                                                                                                             If Not DataGridView2.Columns.Contains("checkBoxColumn") Then
                                                                                                                                                 AddHandler headerCheckBox.Click, AddressOf HeaderCheckBox_Clicked
                                                                                                                                                 DataGridView2.Controls.Add(headerCheckBox)

                                                                                                                                                 Dim checkBoxColumn As DataGridViewCheckBoxColumn = New DataGridViewCheckBoxColumn()
                                                                                                                                                 checkBoxColumn.HeaderText = ""
                                                                                                                                                 checkBoxColumn.Width = 30
                                                                                                                                                 checkBoxColumn.Name = "checkBoxColumn"
                                                                                                                                                 DataGridView2.Columns.Insert(0, checkBoxColumn)
                                                                                                                                             End If

                                                                                                                                             AddHandler DataGridView2.CellContentClick, AddressOf DataGridView_CellClick

                                                                                                                                         End If
                                                                                                                                     End If

                                                                                                                                 End Sub)
                                                                                                          End SyncLock
                                                                                                      Catch ex As Exception
                                                                                                          ' Obsługa błędów
                                                                                                      End Try

                                                                                                      If detailsForm.IsHandleCreated Then
                                                                                                          detailsForm.Invoke(Sub()
                                                                                                                                 progressBar.PerformStep()
                                                                                                                                 progressLabel.Text = $"{(progressBar.Value / progressBar.Maximum * 100):F0}%"
                                                                                                                             End Sub)
                                                                                                      Else
                                                                                                          ' Opcjonalnie możesz poczekać, aż uchwyt zostanie utworzony
                                                                                                          AddHandler detailsForm.HandleCreated, Sub()
                                                                                                                                                    detailsForm.Invoke(Sub()
                                                                                                                                                                           progressBar.PerformStep()
                                                                                                                                                                       End Sub)
                                                                                                                                                End Sub
                                                                                                      End If

                                                                                                  End Sub)

                                                                      SyncLock lockObject
                                                                          tasks.Add(task)
                                                                      End SyncLock

                                                                  Next
                                                              Next
                                                          Next
                                                      Next

                                                      ' Oczekiwanie na zakończenie wszystkich zadań
                                                      Await Task.WhenAll(tasks.ToArray())
                                                      ' Kolejne 3 sekundy
                                                      Await Task.Delay(3000)

                                                      AdresIpSekcjaNr3.Enabled = True
                                                      AdresIpSekcjaNr3.BackColor = Color.FromArgb(204, 255, 153)

                                                      progressBar.Visible = False
                                                      progressLabel.Visible = False
                                                      progressLabel.Text = "0%"
                                                      labelWyszukiwanieZakończone.Visible = True

                                                      Dim jakaRoznica As Integer = iloscTotal - (iloscWystepujeSystem + iloscWystepujeInnyAdress)

                                                      znalezionoTotal.Visible = True
                                                      znalezionoWystepujaSystem.Visible = True
                                                      znalezionoNieWystepujaSystem.Visible = True
                                                      znalezionoInnyAdres.Visible = True

                                                      znalezionoTotal.Text = "Wszystkie znalezione urządzenia: " & iloscTotal
                                                      znalezionoWystepujaSystem.Text = "Występuje w systemie: " & iloscWystepujeSystem
                                                      znalezionoInnyAdres.Text = "Występuje w systemie pod innym adresem: " & iloscWystepujeInnyAdress
                                                      znalezionoNieWystepujaSystem.Text = "Nie występuje w systemie: " & jakaRoznica

                                                      If DataGridView2.Rows.Count > 0 Then
                                                          labelListaZawiera.Visible = True
                                                          buttonZapisz.Visible = True
                                                      ElseIf DataGridView2.Rows.Count = 0 AndAlso iloscTotal > 0 Then
                                                          labelListaNieZawiera.Visible = True
                                                          buttonZapisz.Visible = False
                                                      Else
                                                          labelListaBrak.Visible = True
                                                          buttonZapisz.Visible = False
                                                      End If

                                                      buttonSzukajPrinter.Enabled = True

                                                      For Each btn As Button In buttonList
                                                          If btn Is sender Then
                                                              btn.Enabled = True
                                                          Else
                                                              btn.Enabled = True
                                                          End If
                                                      Next

                                                      For Each radioButton In radioButtons
                                                          radioButton.Enabled = True
                                                      Next


                                                      ' ###### AUTO ###### WIELE AKTYWNE ###### SEKCJA 3 ###### STOP

                                                      ' ###### AUTO ###### WIELE AKTYWNE ###### SEKCJA 2 ###### START
                                                  ElseIf btnAuto = True AndAlso wieleActive = True AndAlso sekcjaNr2 = True Then

                                                      buttonSzukajPrinter.Enabled = False

                                                      AdresIpSekcjaNr2.Enabled = False
                                                      AdresIpSekcjaNr2.BackColor = Color.FromArgb(217, 217, 217)
                                                      AdresIpSekcjaNr3.Enabled = False
                                                      AdresIpSekcjaNr3.BackColor = Color.FromArgb(217, 217, 217)

                                                      progressBar.Visible = True
                                                      progressLabel.Visible = True

                                                      Dim tasks As New List(Of Task)()
                                                      Dim lockObject As New Object()
                                                      Dim range As Integer = (maxIpBytes(3) - minIpBytes(3) - 20)
                                                      progressBar.Minimum = 1
                                                      progressBar.Maximum = range
                                                      progressBar.Value = 1
                                                      progressBar.Step = 1

                                                      AddHandler TaskScheduler.UnobservedTaskException, Sub(evSender, args)
                                                                                                            ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                            args.SetObserved()
                                                                                                            args.Exception.Handle(Function(ex) True)
                                                                                                        End Sub

                                                      AddHandler TaskScheduler.Current.UnobservedTaskException, Sub(evSender, args)
                                                                                                                    ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                    args.SetObserved()
                                                                                                                    args.Exception.Handle(Function(ex) True)
                                                                                                                End Sub

                                                      AddHandler TaskScheduler.Default.UnobservedTaskException, Sub(evSender, args)
                                                                                                                    ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                    args.SetObserved()
                                                                                                                    args.Exception.Handle(Function(ex) True)
                                                                                                                End Sub

                                                      AddHandler TaskScheduler.FromCurrentSynchronizationContext.UnobservedTaskException, Sub(evSender, args)
                                                                                                                                              ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                                              args.SetObserved()
                                                                                                                                              args.Exception.Handle(Function(ex) True)
                                                                                                                                          End Sub

                                                      AddHandler TaskScheduler.Default.FromCurrentSynchronizationContext.UnobservedTaskException, Sub(evSender, args)
                                                                                                                                                      ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                                                      args.SetObserved()
                                                                                                                                                      args.Exception.Handle(Function(ex) True)
                                                                                                                                                  End Sub

                                                      AddHandler TaskScheduler.Default.FromCurrentSynchronizationContext.UnobservedTaskException, Sub(evSender, args)
                                                                                                                                                      ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                                                      args.SetObserved()
                                                                                                                                                      args.Exception.Handle(Function(ex) True)
                                                                                                                                                  End Sub

                                                      Dim lockObject1 As New Object()
                                                      Dim printerFound As Boolean = False
                                                      Dim iloscTotal As Integer = 0
                                                      Dim iloscWystepujeSystem As Integer = 0
                                                      Dim iloscWystepujeInnyAdress As Integer = 0

                                                      For a As Integer = Convert.ToInt32(AdresIpSekcjaNr1.Text) To Convert.ToInt32(AdresIpSekcjaNr1.Text)
                                                          For b As Integer = Convert.ToInt32(AdresIpSekcjaNr2.Text) To Convert.ToInt32(AdresIpSekcjaNr2.Text)
                                                              For c As Integer = Convert.ToInt32(AdresIpSekcjaNr3.Text) To Convert.ToInt32(AdresIpSekcjaNr3.Text)
                                                                  For d As Integer = minIpBytes(3) To maxIpBytes(3)

                                                                      Dim printerIP_1 As Integer = a
                                                                      Dim printerIP_2 As Integer = b
                                                                      Dim printerIP_3 As Integer = c
                                                                      Dim printerIP_4 As Integer = d

                                                                      Dim task As Task = Task.Run(Async Sub()
                                                                                                      Try
                                                                                                          Dim Printer_IP = $"{printerIP_1}.{printerIP_2}.{printerIP_3}.{printerIP_4}"
                                                                                                          Dim printerInfo As PrinterInfo = GetPrinterInfo(Printer_IP)
                                                                                                          SyncLock lockObject1
                                                                                                              detailsForm.Invoke(Sub()

                                                                                                                                     If printerInfo IsNot Nothing AndAlso Not String.IsNullOrEmpty(printerInfo.SerialNumber) Then
                                                                                                                                         If File.Exists(filePath) Then
                                                                                                                                             Dim readJson As String = File.ReadAllText(filePath)

                                                                                                                                             ' Parsowanie JSON do listy obiektów Dane
                                                                                                                                             Dim existingDevices As List(Of Dane) = JsonConvert.DeserializeObject(Of List(Of Dane))(readJson)
                                                                                                                                             iloscTotal += 1

                                                                                                                                             Dim jestSerial As Boolean = False
                                                                                                                                             Dim nieMaAdres As Boolean = False

                                                                                                                                             Dim wierszDodany As Boolean = False
                                                                                                                                             Dim istniejeWpliku As Boolean = False

                                                                                                                                             For Each dane In existingDevices
                                                                                                                                                 If dane.SerialNumber = printerInfo.SerialNumber Then
                                                                                                                                                     jestSerial = True
                                                                                                                                                     If dane.AdresIp <> Printer_IP Then
                                                                                                                                                         nieMaAdres = True
                                                                                                                                                         iloscWystepujeInnyAdress += 1
                                                                                                                                                     End If
                                                                                                                                                 End If
                                                                                                                                                 If dane.SerialNumber = printerInfo.SerialNumber AndAlso dane.AdresIp = Printer_IP Then
                                                                                                                                                     iloscWystepujeSystem += 1
                                                                                                                                                 End If
                                                                                                                                             Next

                                                                                                                                             ' Warunek 1: Drukarka istnieje z innym adresem IP
                                                                                                                                             If jestSerial AndAlso nieMaAdres Then
                                                                                                                                                 Dim newRow3 As DataRow = dataTable1.NewRow()
                                                                                                                                                 newRow3("Adres") = Printer_IP
                                                                                                                                                 newRow3("Nazwa hosta") = printerInfo.Hostname
                                                                                                                                                 newRow3("Urządzenie") = printerInfo.MarkaModel
                                                                                                                                                 newRow3("Nr seryjny") = printerInfo.SerialNumber
                                                                                                                                                 newRow3("MAC") = printerInfo.MAC
                                                                                                                                                 newRow3("Istnieje") = ChrW(&H2022)
                                                                                                                                                 ' Dodanie wiersza do DataTable
                                                                                                                                                 dataTable1.Rows.Add(newRow3)

                                                                                                                                                 wierszDodany = True
                                                                                                                                                 istniejeWpliku = True

                                                                                                                                                 ' Warunek 2: Drukarka nie istnieje w pliku JSON
                                                                                                                                             ElseIf Not jestSerial Then
                                                                                                                                                 Dim newRow3 As DataRow = dataTable1.NewRow()
                                                                                                                                                 newRow3("Adres") = Printer_IP
                                                                                                                                                 newRow3("Nazwa hosta") = printerInfo.Hostname
                                                                                                                                                 newRow3("Urządzenie") = printerInfo.MarkaModel
                                                                                                                                                 newRow3("Nr seryjny") = printerInfo.SerialNumber
                                                                                                                                                 newRow3("MAC") = printerInfo.MAC
                                                                                                                                                 newRow3("Istnieje") = "" ' Domyślna wartość

                                                                                                                                                 ' Dodanie wiersza bez dodatkowych kryteriów
                                                                                                                                                 dataTable1.Rows.Add(newRow3)

                                                                                                                                                 wierszDodany = True
                                                                                                                                             End If

                                                                                                                                             ' Przypisanie DataTable jako źródła danych dla DataGridView
                                                                                                                                             If wierszDodany Then
                                                                                                                                                 DataGridView2.DataSource = dataTable1
                                                                                                                                                 DataGridView2.Visible = True

                                                                                                                                                 ' Konfiguracja checkboxa w nagłówku
                                                                                                                                                 Dim headerCellLocation As System.Drawing.Point = DataGridView2.GetCellDisplayRectangle(0, -1, True).Location
                                                                                                                                                 headerCheckBox.Location = New System.Drawing.Point(headerCellLocation.X + 8, headerCellLocation.Y + 2)
                                                                                                                                                 headerCheckBox.BackColor = Color.White
                                                                                                                                                 headerCheckBox.Size = New System.Drawing.Size(20, 20)

                                                                                                                                                 If Not DataGridView2.Columns.Contains("checkBoxColumn") Then
                                                                                                                                                     AddHandler headerCheckBox.Click, AddressOf HeaderCheckBox_Clicked
                                                                                                                                                     DataGridView2.Controls.Add(headerCheckBox)

                                                                                                                                                     Dim checkBoxColumn As DataGridViewCheckBoxColumn = New DataGridViewCheckBoxColumn()
                                                                                                                                                     checkBoxColumn.HeaderText = ""
                                                                                                                                                     checkBoxColumn.Width = 30
                                                                                                                                                     checkBoxColumn.Name = "checkBoxColumn"
                                                                                                                                                     DataGridView2.Columns.Insert(0, checkBoxColumn)
                                                                                                                                                 End If
                                                                                                                                             End If
                                                                                                                                         End If

                                                                                                                                         If Not File.Exists(filePath) Then

                                                                                                                                             DataGridView2.Visible = True

                                                                                                                                             iloscTotal += 1

                                                                                                                                             Dim newRow3 As DataRow = dataTable1.NewRow()
                                                                                                                                             newRow3("Adres") = Printer_IP
                                                                                                                                             newRow3("Nazwa hosta") = printerInfo.Hostname
                                                                                                                                             newRow3("Urządzenie") = printerInfo.MarkaModel
                                                                                                                                             newRow3("Nr seryjny") = printerInfo.SerialNumber
                                                                                                                                             newRow3("MAC") = printerInfo.MAC
                                                                                                                                             newRow3("Istnieje") = ""
                                                                                                                                             dataTable1.Rows.Add(newRow3)

                                                                                                                                             Dim newDane As New List(Of Dane)()
                                                                                                                                             Dim dane As New Dane()
                                                                                                                                             dane.AdresIp = Printer_IP
                                                                                                                                             dane.Hostname = printerInfo.Hostname
                                                                                                                                             dane.Urzadzenie = printerInfo.MarkaModel
                                                                                                                                             dane.SerialNumber = printerInfo.SerialNumber

                                                                                                                                             newDane.Add(dane)

                                                                                                                                             Dim headerCellLocation As System.Drawing.Point = DataGridView2.GetCellDisplayRectangle(0, -1, True).Location
                                                                                                                                             headerCheckBox.Location = New System.Drawing.Point(headerCellLocation.X + 8, headerCellLocation.Y + 2)
                                                                                                                                             headerCheckBox.BackColor = Color.White
                                                                                                                                             headerCheckBox.Size = New System.Drawing.Size(20, 20)

                                                                                                                                             If Not DataGridView2.Columns.Contains("checkBoxColumn") Then
                                                                                                                                                 AddHandler headerCheckBox.Click, AddressOf HeaderCheckBox_Clicked
                                                                                                                                                 DataGridView2.Controls.Add(headerCheckBox)

                                                                                                                                                 Dim checkBoxColumn As DataGridViewCheckBoxColumn = New DataGridViewCheckBoxColumn()
                                                                                                                                                 checkBoxColumn.HeaderText = ""
                                                                                                                                                 checkBoxColumn.Width = 30
                                                                                                                                                 checkBoxColumn.Name = "checkBoxColumn"
                                                                                                                                                 DataGridView2.Columns.Insert(0, checkBoxColumn)
                                                                                                                                             End If

                                                                                                                                             AddHandler DataGridView2.CellContentClick, AddressOf DataGridView_CellClick

                                                                                                                                         End If
                                                                                                                                     End If

                                                                                                                                 End Sub)
                                                                                                          End SyncLock
                                                                                                      Catch ex As Exception
                                                                                                          ' Obsługa błędów
                                                                                                      End Try

                                                                                                      If detailsForm.IsHandleCreated Then
                                                                                                          detailsForm.Invoke(Sub()
                                                                                                                                 progressBar.PerformStep()
                                                                                                                                 progressLabel.Text = $"{(progressBar.Value / progressBar.Maximum * 100):F0}%"
                                                                                                                             End Sub)
                                                                                                      Else
                                                                                                          ' Opcjonalnie możesz poczekać, aż uchwyt zostanie utworzony
                                                                                                          AddHandler detailsForm.HandleCreated, Sub()
                                                                                                                                                    detailsForm.Invoke(Sub()
                                                                                                                                                                           progressBar.PerformStep()
                                                                                                                                                                       End Sub)
                                                                                                                                                End Sub
                                                                                                      End If

                                                                                                  End Sub)

                                                                      SyncLock lockObject
                                                                          tasks.Add(task)
                                                                      End SyncLock

                                                                  Next
                                                              Next
                                                          Next
                                                      Next

                                                      ' Oczekiwanie na zakończenie wszystkich zadań
                                                      Await Task.WhenAll(tasks.ToArray())
                                                      ' Kolejne 3 sekundy
                                                      Await Task.Delay(3000)
                                                      AdresIpSekcjaNr2.BackColor = Color.FromArgb(204, 255, 153)
                                                      AdresIpSekcjaNr2.Enabled = True
                                                      AdresIpSekcjaNr3.BackColor = Color.FromArgb(204, 255, 153)
                                                      AdresIpSekcjaNr3.Enabled = True

                                                      progressBar.Visible = False
                                                      progressLabel.Visible = False
                                                      progressLabel.Text = "0%"
                                                      labelWyszukiwanieZakończone.Visible = True

                                                      Dim jakaRoznica As Integer = iloscTotal - (iloscWystepujeSystem + iloscWystepujeInnyAdress)

                                                      znalezionoTotal.Visible = True
                                                      znalezionoWystepujaSystem.Visible = True
                                                      znalezionoNieWystepujaSystem.Visible = True
                                                      znalezionoInnyAdres.Visible = True

                                                      znalezionoTotal.Text = "Wszystkie znalezione urządzenia: " & iloscTotal
                                                      znalezionoWystepujaSystem.Text = "Występuje w systemie: " & iloscWystepujeSystem
                                                      znalezionoInnyAdres.Text = "Występuje w systemie pod innym adresem: " & iloscWystepujeInnyAdress
                                                      znalezionoNieWystepujaSystem.Text = "Nie występuje w systemie: " & jakaRoznica

                                                      If DataGridView2.Rows.Count > 0 Then
                                                          labelListaZawiera.Visible = True
                                                          buttonZapisz.Visible = True
                                                      ElseIf DataGridView2.Rows.Count = 0 AndAlso iloscTotal > 0 Then
                                                          labelListaNieZawiera.Visible = True
                                                          buttonZapisz.Visible = False
                                                      Else
                                                          labelListaBrak.Visible = True
                                                          buttonZapisz.Visible = False
                                                      End If

                                                      buttonSzukajPrinter.Enabled = True

                                                      For Each btn As Button In buttonList
                                                          If btn Is sender Then
                                                              btn.Enabled = True
                                                          Else
                                                              btn.Enabled = True
                                                          End If
                                                      Next

                                                      For Each radioButton In radioButtons
                                                          radioButton.Enabled = True
                                                      Next


                                                      ' ###### AUTO ###### WIELE AKTYWNE ###### SEKCJA 2 ###### STOP

                                                      ' ###### AUTO ###### WIELE AKTYWNE ###### SEKCJA 1 ###### START
                                                  ElseIf btnAuto = True AndAlso wieleActive = True AndAlso sekcjaNr1 = True Then

                                                      buttonSzukajPrinter.Enabled = False
                                                      AdresIpSekcjaNr1.Enabled = False
                                                      AdresIpSekcjaNr1.BackColor = Color.FromArgb(217, 217, 217)
                                                      AdresIpSekcjaNr2.Enabled = False
                                                      AdresIpSekcjaNr2.BackColor = Color.FromArgb(217, 217, 217)
                                                      AdresIpSekcjaNr3.Enabled = False
                                                      AdresIpSekcjaNr3.BackColor = Color.FromArgb(217, 217, 217)

                                                      progressBar.Visible = True
                                                      progressLabel.Visible = True

                                                      Dim tasks As New List(Of Task)()
                                                      Dim lockObject As New Object()
                                                      Dim range As Integer = (maxIpBytes(3) - minIpBytes(3) - 20)
                                                      progressBar.Minimum = 1
                                                      progressBar.Maximum = range
                                                      progressBar.Value = 1
                                                      progressBar.Step = 1

                                                      AddHandler TaskScheduler.UnobservedTaskException, Sub(evSender, args)
                                                                                                            ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                            args.SetObserved()
                                                                                                            args.Exception.Handle(Function(ex) True)
                                                                                                        End Sub

                                                      AddHandler TaskScheduler.Current.UnobservedTaskException, Sub(evSender, args)
                                                                                                                    ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                    args.SetObserved()
                                                                                                                    args.Exception.Handle(Function(ex) True)
                                                                                                                End Sub

                                                      AddHandler TaskScheduler.Default.UnobservedTaskException, Sub(evSender, args)
                                                                                                                    ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                    args.SetObserved()
                                                                                                                    args.Exception.Handle(Function(ex) True)
                                                                                                                End Sub

                                                      AddHandler TaskScheduler.FromCurrentSynchronizationContext.UnobservedTaskException, Sub(evSender, args)
                                                                                                                                              ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                                              args.SetObserved()
                                                                                                                                              args.Exception.Handle(Function(ex) True)
                                                                                                                                          End Sub

                                                      AddHandler TaskScheduler.Default.FromCurrentSynchronizationContext.UnobservedTaskException, Sub(evSender, args)
                                                                                                                                                      ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                                                      args.SetObserved()
                                                                                                                                                      args.Exception.Handle(Function(ex) True)
                                                                                                                                                  End Sub

                                                      AddHandler TaskScheduler.Default.FromCurrentSynchronizationContext.UnobservedTaskException, Sub(evSender, args)
                                                                                                                                                      ' Obsłuż wyjątki, jeśli wystąpią
                                                                                                                                                      args.SetObserved()
                                                                                                                                                      args.Exception.Handle(Function(ex) True)
                                                                                                                                                  End Sub

                                                      Dim lockObject1 As New Object()
                                                      Dim printerFound As Boolean = False
                                                      Dim iloscTotal As Integer = 0
                                                      Dim iloscWystepujeSystem As Integer = 0
                                                      Dim iloscWystepujeInnyAdress As Integer = 0

                                                      For a As Integer = Convert.ToInt32(AdresIpSekcjaNr1.Text) To Convert.ToInt32(AdresIpSekcjaNr1.Text)
                                                          For b As Integer = Convert.ToInt32(AdresIpSekcjaNr2.Text) To Convert.ToInt32(AdresIpSekcjaNr2.Text)
                                                              For c As Integer = Convert.ToInt32(AdresIpSekcjaNr3.Text) To Convert.ToInt32(AdresIpSekcjaNr3.Text)
                                                                  For d As Integer = minIpBytes(3) To maxIpBytes(3)

                                                                      Dim printerIP_1 As Integer = a
                                                                      Dim printerIP_2 As Integer = b
                                                                      Dim printerIP_3 As Integer = c
                                                                      Dim printerIP_4 As Integer = d

                                                                      Dim task As Task = Task.Run(Async Sub()
                                                                                                      Try
                                                                                                          Dim Printer_IP = $"{printerIP_1}.{printerIP_2}.{printerIP_3}.{printerIP_4}"
                                                                                                          Dim printerInfo As PrinterInfo = GetPrinterInfo(Printer_IP)
                                                                                                          SyncLock lockObject1
                                                                                                              detailsForm.Invoke(Sub()

                                                                                                                                     If printerInfo IsNot Nothing AndAlso Not String.IsNullOrEmpty(printerInfo.SerialNumber) Then
                                                                                                                                         If File.Exists(filePath) Then
                                                                                                                                             Dim readJson As String = File.ReadAllText(filePath)

                                                                                                                                             ' Parsowanie JSON do listy obiektów Dane
                                                                                                                                             Dim existingDevices As List(Of Dane) = JsonConvert.DeserializeObject(Of List(Of Dane))(readJson)
                                                                                                                                             iloscTotal += 1

                                                                                                                                             Dim jestSerial As Boolean = False
                                                                                                                                             Dim nieMaAdres As Boolean = False

                                                                                                                                             Dim wierszDodany As Boolean = False
                                                                                                                                             Dim istniejeWpliku As Boolean = False

                                                                                                                                             For Each dane In existingDevices
                                                                                                                                                 If dane.SerialNumber = printerInfo.SerialNumber Then
                                                                                                                                                     jestSerial = True
                                                                                                                                                     If dane.AdresIp <> Printer_IP Then
                                                                                                                                                         nieMaAdres = True
                                                                                                                                                         iloscWystepujeInnyAdress += 1
                                                                                                                                                     End If
                                                                                                                                                 End If
                                                                                                                                                 If dane.SerialNumber = printerInfo.SerialNumber AndAlso dane.AdresIp = Printer_IP Then
                                                                                                                                                     iloscWystepujeSystem += 1
                                                                                                                                                 End If
                                                                                                                                             Next

                                                                                                                                             ' Warunek 1: Drukarka istnieje z innym adresem IP
                                                                                                                                             If jestSerial AndAlso nieMaAdres Then
                                                                                                                                                 Dim newRow3 As DataRow = dataTable1.NewRow()
                                                                                                                                                 newRow3("Adres") = Printer_IP
                                                                                                                                                 newRow3("Nazwa hosta") = printerInfo.Hostname
                                                                                                                                                 newRow3("Urządzenie") = printerInfo.MarkaModel
                                                                                                                                                 newRow3("Nr seryjny") = printerInfo.SerialNumber
                                                                                                                                                 newRow3("MAC") = printerInfo.MAC
                                                                                                                                                 newRow3("Istnieje") = ChrW(&H2022)
                                                                                                                                                 ' Dodanie wiersza do DataTable
                                                                                                                                                 dataTable1.Rows.Add(newRow3)

                                                                                                                                                 wierszDodany = True
                                                                                                                                                 istniejeWpliku = True

                                                                                                                                                 ' Warunek 2: Drukarka nie istnieje w pliku JSON
                                                                                                                                             ElseIf Not jestSerial Then
                                                                                                                                                 Dim newRow3 As DataRow = dataTable1.NewRow()
                                                                                                                                                 newRow3("Adres") = Printer_IP
                                                                                                                                                 newRow3("Nazwa hosta") = printerInfo.Hostname
                                                                                                                                                 newRow3("Urządzenie") = printerInfo.MarkaModel
                                                                                                                                                 newRow3("Nr seryjny") = printerInfo.SerialNumber
                                                                                                                                                 newRow3("MAC") = printerInfo.MAC
                                                                                                                                                 newRow3("Istnieje") = "" ' Domyślna wartość

                                                                                                                                                 ' Dodanie wiersza bez dodatkowych kryteriów
                                                                                                                                                 dataTable1.Rows.Add(newRow3)

                                                                                                                                                 wierszDodany = True
                                                                                                                                             End If

                                                                                                                                             ' Przypisanie DataTable jako źródła danych dla DataGridView
                                                                                                                                             If wierszDodany Then
                                                                                                                                                 DataGridView2.DataSource = dataTable1
                                                                                                                                                 DataGridView2.Visible = True

                                                                                                                                                 ' Konfiguracja checkboxa w nagłówku
                                                                                                                                                 Dim headerCellLocation As System.Drawing.Point = DataGridView2.GetCellDisplayRectangle(0, -1, True).Location
                                                                                                                                                 headerCheckBox.Location = New System.Drawing.Point(headerCellLocation.X + 8, headerCellLocation.Y + 2)
                                                                                                                                                 headerCheckBox.BackColor = Color.White
                                                                                                                                                 headerCheckBox.Size = New System.Drawing.Size(20, 20)

                                                                                                                                                 If Not DataGridView2.Columns.Contains("checkBoxColumn") Then
                                                                                                                                                     AddHandler headerCheckBox.Click, AddressOf HeaderCheckBox_Clicked
                                                                                                                                                     DataGridView2.Controls.Add(headerCheckBox)

                                                                                                                                                     Dim checkBoxColumn As DataGridViewCheckBoxColumn = New DataGridViewCheckBoxColumn()
                                                                                                                                                     checkBoxColumn.HeaderText = ""
                                                                                                                                                     checkBoxColumn.Width = 30
                                                                                                                                                     checkBoxColumn.Name = "checkBoxColumn"
                                                                                                                                                     DataGridView2.Columns.Insert(0, checkBoxColumn)
                                                                                                                                                 End If
                                                                                                                                             End If
                                                                                                                                         End If

                                                                                                                                         If Not File.Exists(filePath) Then

                                                                                                                                             DataGridView2.Visible = True

                                                                                                                                             iloscTotal += 1

                                                                                                                                             Dim newRow3 As DataRow = dataTable1.NewRow()
                                                                                                                                             newRow3("Adres") = Printer_IP
                                                                                                                                             newRow3("Nazwa hosta") = printerInfo.Hostname
                                                                                                                                             newRow3("Urządzenie") = printerInfo.MarkaModel
                                                                                                                                             newRow3("Nr seryjny") = printerInfo.SerialNumber
                                                                                                                                             newRow3("MAC") = printerInfo.MAC
                                                                                                                                             newRow3("Istnieje") = ""
                                                                                                                                             dataTable1.Rows.Add(newRow3)

                                                                                                                                             Dim newDane As New List(Of Dane)()
                                                                                                                                             Dim dane As New Dane()
                                                                                                                                             dane.AdresIp = Printer_IP
                                                                                                                                             dane.Hostname = printerInfo.Hostname
                                                                                                                                             dane.Urzadzenie = printerInfo.MarkaModel
                                                                                                                                             dane.SerialNumber = printerInfo.SerialNumber

                                                                                                                                             newDane.Add(dane)

                                                                                                                                             Dim headerCellLocation As System.Drawing.Point = DataGridView2.GetCellDisplayRectangle(0, -1, True).Location
                                                                                                                                             headerCheckBox.Location = New System.Drawing.Point(headerCellLocation.X + 8, headerCellLocation.Y + 2)
                                                                                                                                             headerCheckBox.BackColor = Color.White
                                                                                                                                             headerCheckBox.Size = New System.Drawing.Size(20, 20)

                                                                                                                                             If Not DataGridView2.Columns.Contains("checkBoxColumn") Then
                                                                                                                                                 AddHandler headerCheckBox.Click, AddressOf HeaderCheckBox_Clicked
                                                                                                                                                 DataGridView2.Controls.Add(headerCheckBox)

                                                                                                                                                 Dim checkBoxColumn As DataGridViewCheckBoxColumn = New DataGridViewCheckBoxColumn()
                                                                                                                                                 checkBoxColumn.HeaderText = ""
                                                                                                                                                 checkBoxColumn.Width = 30
                                                                                                                                                 checkBoxColumn.Name = "checkBoxColumn"
                                                                                                                                                 DataGridView2.Columns.Insert(0, checkBoxColumn)
                                                                                                                                             End If

                                                                                                                                             AddHandler DataGridView2.CellContentClick, AddressOf DataGridView_CellClick

                                                                                                                                         End If
                                                                                                                                     End If

                                                                                                                                 End Sub)
                                                                                                          End SyncLock
                                                                                                      Catch ex As Exception
                                                                                                          ' Obsługa błędów
                                                                                                      End Try

                                                                                                      If detailsForm.IsHandleCreated Then
                                                                                                          detailsForm.Invoke(Sub()
                                                                                                                                 progressBar.PerformStep()
                                                                                                                                 progressLabel.Text = $"{(progressBar.Value / progressBar.Maximum * 100):F0}%"
                                                                                                                             End Sub)
                                                                                                      Else
                                                                                                          ' Opcjonalnie możesz poczekać, aż uchwyt zostanie utworzony
                                                                                                          AddHandler detailsForm.HandleCreated, Sub()
                                                                                                                                                    detailsForm.Invoke(Sub()
                                                                                                                                                                           progressBar.PerformStep()
                                                                                                                                                                       End Sub)
                                                                                                                                                End Sub
                                                                                                      End If

                                                                                                  End Sub)

                                                                      SyncLock lockObject
                                                                          tasks.Add(task)
                                                                      End SyncLock

                                                                  Next
                                                              Next
                                                          Next
                                                      Next

                                                      ' Oczekiwanie na zakończenie wszystkich zadań
                                                      Await Task.WhenAll(tasks.ToArray())
                                                      ' Kolejne 3 sekundy
                                                      Await Task.Delay(3000)
                                                      AdresIpSekcjaNr1.BackColor = Color.FromArgb(204, 255, 153)
                                                      AdresIpSekcjaNr1.Enabled = True
                                                      AdresIpSekcjaNr2.BackColor = Color.FromArgb(204, 255, 153)
                                                      AdresIpSekcjaNr2.Enabled = True
                                                      AdresIpSekcjaNr3.BackColor = Color.FromArgb(204, 255, 153)
                                                      AdresIpSekcjaNr3.Enabled = True

                                                      progressBar.Visible = False
                                                      progressLabel.Visible = False
                                                      progressLabel.Text = "0%"
                                                      labelWyszukiwanieZakończone.Visible = True

                                                      Dim jakaRoznica As Integer = iloscTotal - (iloscWystepujeSystem + iloscWystepujeInnyAdress)

                                                      znalezionoTotal.Visible = True
                                                      znalezionoWystepujaSystem.Visible = True
                                                      znalezionoNieWystepujaSystem.Visible = True
                                                      znalezionoInnyAdres.Visible = True

                                                      znalezionoTotal.Text = "Wszystkie znalezione urządzenia: " & iloscTotal
                                                      znalezionoWystepujaSystem.Text = "Występuje w systemie: " & iloscWystepujeSystem
                                                      znalezionoInnyAdres.Text = "Występuje w systemie pod innym adresem: " & iloscWystepujeInnyAdress
                                                      znalezionoNieWystepujaSystem.Text = "Nie występuje w systemie: " & jakaRoznica

                                                      If DataGridView2.Rows.Count > 0 Then
                                                          labelListaZawiera.Visible = True
                                                          buttonZapisz.Visible = True
                                                      ElseIf DataGridView2.Rows.Count = 0 AndAlso iloscTotal > 0 Then
                                                          labelListaNieZawiera.Visible = True
                                                          buttonZapisz.Visible = False
                                                      Else
                                                          labelListaBrak.Visible = True
                                                          buttonZapisz.Visible = False
                                                      End If

                                                      buttonSzukajPrinter.Enabled = True

                                                      For Each btn As Button In buttonList
                                                          If btn Is sender Then
                                                              btn.Enabled = True
                                                          Else
                                                              btn.Enabled = True
                                                          End If
                                                      Next

                                                      For Each radioButton In radioButtons
                                                          radioButton.Enabled = True
                                                      Next


                                                      ' ###### AUTO ###### WIELE AKTYWNE ###### SEKCJA 1 ###### STOP

                                                  End If
                                              End Sub




        Select Case tabIndex

            Case 1

                ramkaSzukajUrzadzenSkanuj.Visible = True
                ramkaDostepneSieci.Visible = True
                buttonZapisz.Visible = False
            Case 2

                btnManual = True

                buttonZapisz.Visible = False
                ramkaSzukajUrzadzenSkanuj.Visible = False
                ramkaDostepneSieci.Visible = False
                ramkaDanePodsieci.Visible = True
                ramkaDanePodsieci.Size = New System.Drawing.Size((contentPanel.Width - 20), 220)
                ramkaDanePodsieci.Location = New Drawing.Point(10, 10)
                AdresIpSekcjaNr1.Visible = True
                AdresIpSekcjaNr2.Visible = True
                AdresIpSekcjaNr3.Visible = True
                AdresIpSekcjaNr4.Visible = True

                Dim spacing2 As Integer = 30
                Dim startX2 As Integer = ((ramkaDanePodsieci.Width - (50 * 4 + spacing2 * 3)) \ 2)

                AdresIpSekcjaNr1.Location = New System.Drawing.Point(startX2, 95)
                AdresIpSekcjaNr2.Location = New System.Drawing.Point(startX2 + 50 + spacing2, 95)
                AdresIpSekcjaNr3.Location = New System.Drawing.Point(startX2 + (50 + spacing2) * 2, 95)
                AdresIpSekcjaNr4.Location = New System.Drawing.Point(startX2 + (50 + spacing2) * 3, 95)
                AdresIpSekcjaNr1.BackColor = Color.FromArgb(204, 255, 153)
                AdresIpSekcjaNr2.BackColor = Color.FromArgb(204, 255, 153)
                AdresIpSekcjaNr3.BackColor = Color.FromArgb(204, 255, 153)
                AdresIpSekcjaNr4.BackColor = Color.FromArgb(217, 217, 217)

                labelZakres1a.Visible = True
                labelZakres1a.Location = New System.Drawing.Point((ramkaDanePodsieci.Width - labelZakres1a.Width) / 2, 150)

                ramkaDanePodsieci.Controls.Add(buttonSzukajPrinter)
                ramkaDanePodsieci.Controls.Add(progressBar)
                ramkaDanePodsieci.Controls.Add(progressLabel)
                ramkaDanePodsieci.Controls.Add(labelWyszukiwanieZakończone)

                Dim startXButton As Integer = AdresIpSekcjaNr4.Location.X + AdresIpSekcjaNr4.Width + spacing2
                buttonSzukajPrinter.Location = New System.Drawing.Point(startXButton + 20, AdresIpSekcjaNr4.Location.Y)

                progressBar.Location = New System.Drawing.Point((ramkaDanePodsieci.Width - progressBar.Width) \ 2, 40)
                progressLabel.Location = New System.Drawing.Point((ramkaDanePodsieci.Width - progressLabel.Width) \ 2, 20)
                labelWyszukiwanieZakończone.Location = New System.Drawing.Point((ramkaDanePodsieci.Width - labelWyszukiwanieZakończone.Width) \ 2, 40)


                AddHandler AdresIpSekcjaNr1.TextChanged, Sub(sender7 As Object, e7 As EventArgs)
                                                             If AdresIpSekcjaNr1.Text.Length > 0 And AdresIpSekcjaNr2.Text.Length > 0 And AdresIpSekcjaNr3.Text.Length > 0 Then
                                                                 buttonSzukajPrinter.Enabled = True
                                                             Else
                                                                 buttonSzukajPrinter.Enabled = False
                                                             End If
                                                         End Sub
                AddHandler AdresIpSekcjaNr2.TextChanged, Sub(sender7 As Object, e7 As EventArgs)
                                                             If AdresIpSekcjaNr1.Text.Length > 0 And AdresIpSekcjaNr2.Text.Length > 0 And AdresIpSekcjaNr3.Text.Length > 0 Then
                                                                 buttonSzukajPrinter.Enabled = True
                                                             Else
                                                                 buttonSzukajPrinter.Enabled = False
                                                             End If
                                                         End Sub
                AddHandler AdresIpSekcjaNr3.TextChanged, Sub(sender8 As Object, e8 As EventArgs)
                                                             If AdresIpSekcjaNr1.Text.Length > 0 And AdresIpSekcjaNr2.Text.Length > 0 And AdresIpSekcjaNr3.Text.Length > 0 Then
                                                                 buttonSzukajPrinter.Enabled = True
                                                             Else
                                                                 buttonSzukajPrinter.Enabled = False

                                                             End If
                                                         End Sub


        End Select
        ' Zmiana tła panelu bocznego na biały po kliknięciu przycisku
        contentPanel.BackColor = Color.White

        ' Ponowne rysowanie panelu bocznego, aby border nie kolidował z aktywnym przyciskiem
        contentPanel.Invalidate() ' Wywołanie ponownego rysowania panelu bocznego
    End Sub

    ' ODCZYT URZĄDZEŃ
    Private Sub btnRefresh_Click(sender As Object, e As EventArgs) Handles btnRefresh.Click
        UpdateDataInTable()
    End Sub

    ' Private Async Sub btnRefresh_Click(sender As Object, e As EventArgs) Handles btnRefresh.Click
    '    Await UpdateDataInTable()
    ' End Sub



    ' WSPÓLNE ZMIENNE USTAWIENIA/NARZĘDZIA
    Dim currentActiveButton As Button = Nothing
    Dim kolorOkna As Color = Color.FromArgb(235, 235, 224)
    Dim kolorButtons As Color = Color.FromArgb(235, 235, 224)
    Dim kolorBorder As Color = Color.FromArgb(204, 204, 204)
    Dim buttonZapisz_Ustawienia As New Button()

    ' NARZĘDZIA ### START 
    Private Sub btnTools_Click(sender As Object, e As EventArgs) Handles btnTools.Click

        btnTools.BackColor = Color.White

        'Resetowanie combobox bo sie dublowało podczas kolejnych włąceń ustawień
        comboHoursPierwszyOdczyt.Items.Clear()
        comboMinutesPierwszyOdczyt.Items.Clear()

        'Wczytaj ustawienia programu
        settings = LoadSettings()
        ' Otwórz formularz ustawień jako "dziecko" głównego formularza

        ' Tworzymy nowe okno (formularz) z ustawieniami
        Dim detailsForm_Narzedzia As New Form()
        detailsForm_Narzedzia.Text = "Narzędzia"
        detailsForm_Narzedzia.StartPosition = FormStartPosition.CenterParent
        detailsForm_Narzedzia.AutoSize = False
        detailsForm_Narzedzia.Width = 900
        detailsForm_Narzedzia.Height = 700
        detailsForm_Narzedzia.MaximizeBox = False
        detailsForm_Narzedzia.FormBorderStyle = FormBorderStyle.FixedDialog
        detailsForm_Narzedzia.BackColor = kolorOkna
        detailsForm_Narzedzia.Owner = Me
        ' Tworzymy boczny panel, który ma zmieniać tło po kliknięciu na przyciski
        Dim contentPanel As New Panel()
        contentPanel.BackColor = Color.FromArgb(204, 204, 179)
        contentPanel.Location = New System.Drawing.Point(211, 20) ' Ustawiamy panel 5px od prawej strony przycisków
        contentPanel.Size = New System.Drawing.Size(detailsForm_Narzedzia.Width - 245, detailsForm_Narzedzia.Height - 130) ' Dostosowujemy rozmiar panelu

        ' Dodajemy panel do formularza
        detailsForm_Narzedzia.Controls.Add(contentPanel)

        ' Panel dolny dla przycisków "Zapisz" i "Zakończ"
        Dim panelBottom As New Panel()
        panelBottom.BackColor = kolorOkna
        panelBottom.Size = New System.Drawing.Size(detailsForm_Narzedzia.Width, 60)
        panelBottom.Dock = DockStyle.Bottom

        ' Dodaj przyciski do dolnego panelu
        AddBottomButtons_Narzedzia(panelBottom, detailsForm_Narzedzia)

        ' Dodaj panel dolny do formularza
        detailsForm_Narzedzia.Controls.Add(panelBottom)

        AddHandler detailsForm_Narzedzia.FormClosed, AddressOf OnDetailsFormClosed

        ' Wywołujemy funkcję tworzącą zakładki (przyciski)
        CreateTabs_Narzedzia(detailsForm_Narzedzia, contentPanel)

        ' Wyświetlamy formularz jako dialog modalny (blokujący)
        detailsForm_Narzedzia.ShowDialog()
    End Sub

    Private Sub AddBottomButtons_Narzedzia(panelBottom As Panel, detailsForm_Narzedzia As Form)
        ' Dodaj przycisk "Zapisz"
        Dim buttonZapisz As New Button()
        buttonZapisz.Text = "Zapisz"
        buttonZapisz.Size = New System.Drawing.Size(90, 32)
        buttonZapisz.BackColor = Color.FromArgb(0, 68, 102)
        buttonZapisz.ForeColor = Color.FromArgb(242, 242, 242)
        buttonZapisz.Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
        buttonZapisz.FlatAppearance.BorderSize = 0
        buttonZapisz.FlatStyle = FlatStyle.Flat
        buttonZapisz.Anchor = AnchorStyles.None
        buttonZapisz.Visible = False

        Dim buttonAnuluj As New Button()
        buttonAnuluj.Text = "Zakończ"
        buttonAnuluj.Size = New System.Drawing.Size(90, 32)
        buttonAnuluj.BackColor = Color.FromArgb(0, 68, 102)
        buttonAnuluj.ForeColor = Color.FromArgb(242, 242, 242)
        buttonAnuluj.Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
        buttonAnuluj.FlatAppearance.BorderSize = 0
        buttonAnuluj.FlatStyle = FlatStyle.Flat
        buttonAnuluj.Anchor = AnchorStyles.None

        panelBottom.Controls.Add(buttonZapisz)
        panelBottom.Controls.Add(buttonAnuluj)

        buttonZapisz.Location = New System.Drawing.Point((panelBottom.Width - buttonZapisz.Width - buttonAnuluj.Width - 10) * 0.7, 10)
        buttonAnuluj.Location = New System.Drawing.Point(buttonZapisz.Location.X + buttonZapisz.Width + 10, 10)

        AddHandler buttonAnuluj.Click, Sub(sender As Object, e As EventArgs)
                                           detailsForm_Narzedzia.Close()
                                           settings = LoadSettings()
                                       End Sub

    End Sub

    ' Obsługa kliknięcia na przycisk (ustawienie aktywnego przycisku i zmiana tła w panelu)
    Private Sub HandleButtonClick_Narzedzia(sender As Object, contentPanel As Panel, tabIndex As Integer)

        Dim btn As Button = DirectCast(sender, Button)

        ' Resetowanie koloru i borderu poprzedniego aktywnego przycisku
        If currentActiveButton IsNot Nothing Then
            currentActiveButton.BackColor = kolorButtons
            currentActiveButton.Size = New System.Drawing.Size(200, 30) ' Przywracamy pierwotny rozmiar
            currentActiveButton.FlatAppearance.BorderSize = 1 ' Stała szerokość borderu
            currentActiveButton.FlatAppearance.BorderColor = kolorBorder ' Oryginalny kolor borderu
        End If

        ' Ustawienie nowego aktywnego przycisku
        currentActiveButton = btn
        currentActiveButton.BackColor = Color.White
        currentActiveButton.Size = New System.Drawing.Size(220, 30) ' Zwiększamy szerokość
        currentActiveButton.FlatStyle = FlatStyle.Flat ' Ustawienie stylu na Flat

        ' Ustawienie obramowania na aktywny przycisk
        currentActiveButton.FlatAppearance.BorderSize = 0 ' Wyłączanie domyślnego obramowania

        ' Zdarzenie do ręcznego rysowania krawędzi
        AddHandler currentActiveButton.Paint, AddressOf DrawButtonBorder

        ' Czyszczenie panelu przed dodaniem nowych kontrolek
        contentPanel.Controls.Clear()
        ' W zależności od indeksu zakładki dodajemy różne kontrolki
        Select Case tabIndex
            Case 1
                ' CASE 1 - SYNCHRONIZACJA DANYCH - START
                Dim ramkaSynchronizacjaDanych As New GroupBox()
                ramkaSynchronizacjaDanych.Text = "Synchronizacja danych urządzeń"
                ramkaSynchronizacjaDanych.Size = New System.Drawing.Size(contentPanel.Width - 20, 140)
                ramkaSynchronizacjaDanych.Location = New System.Drawing.Point(10, 10)
                ramkaSynchronizacjaDanych.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Bold)

                Dim textSynchronizacjaDanych As New Label()
                textSynchronizacjaDanych.Text = "Narzędzie przeszukuje wszystkie sieci wykryte w dostępnych interfejsach oraz wskazanych w ustawieniach (Ustawienia/Połączenia sieciowe/Alternatywne podsieci)" & vbCrLf & vbCrLf & "Synchronizacja polega na porównaniu znalezionych w sieci numerów seryjnych urządzeń z zapisanymi w systemie i aktualizacja pozostałych danych jeżeli występują różnice" & vbCrLf & vbCrLf & "Narzędzie jest dostępne tylko gdy automatyczny odczyt danych z urządzeń jest włączony"
                textSynchronizacjaDanych.Location = New System.Drawing.Point(10, 20)
                textSynchronizacjaDanych.AutoSize = False
                textSynchronizacjaDanych.Size = New System.Drawing.Size(ramkaSynchronizacjaDanych.Width - 30, 100)
                textSynchronizacjaDanych.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Regular)

                Dim ramkaSynchronizacjaDanychWykonaj As New GroupBox()
                ramkaSynchronizacjaDanychWykonaj.Text = "Wykonaj synchronizację"
                ramkaSynchronizacjaDanychWykonaj.Size = New System.Drawing.Size(contentPanel.Width - 20, 340)
                ramkaSynchronizacjaDanychWykonaj.Location = New System.Drawing.Point(10, ramkaSynchronizacjaDanych.Height + 20)
                ramkaSynchronizacjaDanychWykonaj.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Bold)

                Dim progressBar As New ProgressBar()
                progressBar.Location = New System.Drawing.Point(10, 120)
                progressBar.Size = New System.Drawing.Size(contentPanel.Width - 40, 20)
                progressBar.Minimum = 0
                progressBar.Maximum = 100
                progressBar.Value = 0

                ' Tworzymy etykietę statusu
                Dim LabelStatus As New Label()
                LabelStatus.Text = "Status: Oczekiwanie"
                LabelStatus.Location = New System.Drawing.Point(10, 150)
                LabelStatus.AutoSize = True

                Dim iloscSynchro As New Label()
                iloscSynchro.Text = "Ilość urządzeń wymagająca aktualizacji: "
                iloscSynchro.Location = New System.Drawing.Point(10, 180)
                iloscSynchro.AutoSize = True
                iloscSynchro.Visible = False

                Dim buttonSynchronizuj As New Button()
                buttonSynchronizuj.Text = "Synchronizuj"
                buttonSynchronizuj.Size = New System.Drawing.Size(100, 28)
                buttonSynchronizuj.BackColor = Color.FromArgb(0, 68, 102)
                buttonSynchronizuj.ForeColor = Color.FromArgb(242, 242, 242)
                buttonSynchronizuj.Font = New System.Drawing.Font("Calibri", 11.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                buttonSynchronizuj.FlatAppearance.BorderSize = 0
                buttonSynchronizuj.FlatStyle = FlatStyle.Flat
                buttonSynchronizuj.Anchor = AnchorStyles.None
                buttonSynchronizuj.Location = New System.Drawing.Point(10, 30)

                If settings.sposobOdczytuAuto Then
                    buttonSynchronizuj.Enabled = True
                ElseIf settings.sposobOdczytuManual Then
                    buttonSynchronizuj.Enabled = False
                End If

                AddHandler buttonSynchronizuj.Click, Sub(senderobj As Object, e As EventArgs)
                                                         SynchronizacjaDanychUrzadzen(LabelStatus, progressBar, iloscSynchro)
                                                         buttonSynchronizuj.Enabled = False
                                                     End Sub

                contentPanel.Controls.Add(ramkaSynchronizacjaDanych)
                contentPanel.Controls.Add(ramkaSynchronizacjaDanychWykonaj)
                ramkaSynchronizacjaDanych.Controls.Add(textSynchronizacjaDanych)
                ramkaSynchronizacjaDanychWykonaj.Controls.Add(buttonSynchronizuj)
                ramkaSynchronizacjaDanychWykonaj.Controls.Add(progressBar)
                ramkaSynchronizacjaDanychWykonaj.Controls.Add(LabelStatus)
                ramkaSynchronizacjaDanychWykonaj.Controls.Add(iloscSynchro)

                 ' CASE 1 - SYNCHRONIZACJA DANYCH - STOP

            Case 2

                ' CASE 2 - RAPORTY - START

                Dim ramkaRaportyRodzajPliku As New GroupBox()
                ramkaRaportyRodzajPliku.Text = "Format pliku"
                ramkaRaportyRodzajPliku.Size = New System.Drawing.Size(contentPanel.Width - 20, 60)
                ramkaRaportyRodzajPliku.Location = New System.Drawing.Point(10, 10)
                ramkaRaportyRodzajPliku.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Bold)

                Dim radio1_RaportExcel As New RadioButton()
                radio1_RaportExcel.Text = ".xlsx"
                radio1_RaportExcel.Location = New System.Drawing.Point(10, 25)
                radio1_RaportExcel.AutoSize = True
                radio1_RaportExcel.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Regular)

                Dim radio2_RaportPdf As New RadioButton()
                radio2_RaportPdf.Text = ".pdf"
                radio2_RaportPdf.Location = New System.Drawing.Point(70, 25)
                radio2_RaportPdf.AutoSize = True
                radio2_RaportPdf.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Regular)

                Dim ramkaRaportyJakieKolumny As New GroupBox()
                ramkaRaportyJakieKolumny.Text = "Kolumny uwzględnione w raporcie"
                ramkaRaportyJakieKolumny.Size = New System.Drawing.Size(contentPanel.Width - 20, 180)
                ramkaRaportyJakieKolumny.Location = New System.Drawing.Point(10, ramkaRaportyRodzajPliku.Height + 30)
                ramkaRaportyJakieKolumny.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Bold)

                ' Lista nazw kolumn
                Dim columnNames As String() = {
    "Adres", "Nazwa hosta", "Urządzenie", "Nr seryjny", "MAC",
    "Miejsce postoju", "Dodatkowe informacje", "Licznik M", "Licznik K",
    "%BK", "%Y", "%M", "%C"
}

                ' Lista nazw kolumn, które mają być zaznaczone na starcie
                Dim defaultChecked As New List(Of String)() From {
    "Urządzenie", "Nr seryjny",
    "Miejsce postoju", "Dodatkowe informacje", "Licznik M", "Licznik K"
}

                Dim checkBoxes As New List(Of CheckBox)()
                Dim startY As Integer = 25
                Dim columnIndex As Integer = 0

                ' Generowanie checkboxów
                For Each columnName In columnNames
                    Dim checkBox As New CheckBox()
                    checkBox.Text = columnName
                    checkBox.Location = New System.Drawing.Point(10 + (columnIndex Mod 3) * 150, startY + (columnIndex \ 3) * 25)
                    checkBox.AutoSize = True
                    checkBox.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Regular)

                    ' Zaznacz checkbox, jeśli jego nazwa znajduje się na liście zaznaczonych kolumn
                    If defaultChecked.Contains(columnName) Then
                        checkBox.Checked = True
                    Else
                        checkBox.Checked = False
                    End If

                    ' Dodaj checkbox do listy i do kontenera
                    checkBoxes.Add(checkBox)
                    ramkaRaportyJakieKolumny.Controls.Add(checkBox)
                    columnIndex += 1
                Next

                Dim ramkaRaportyAkcja As New GroupBox()
                ramkaRaportyAkcja.Text = "Akcja"
                ramkaRaportyAkcja.Size = New System.Drawing.Size(contentPanel.Width - 20, 60)
                ramkaRaportyAkcja.Location = New System.Drawing.Point(10, ramkaRaportyRodzajPliku.Height + ramkaRaportyJakieKolumny.Height + 50)
                ramkaRaportyAkcja.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Bold)

                Dim checkBoxZapiszRaport As New CheckBox()
                checkBoxZapiszRaport.Text = "Zapisz raport"
                checkBoxZapiszRaport.Location = New System.Drawing.Point(10, 25)
                checkBoxZapiszRaport.AutoSize = True
                checkBoxZapiszRaport.Checked = True
                checkBoxZapiszRaport.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Regular)

                Dim checkBoxWyswietlRaport As New CheckBox()
                checkBoxWyswietlRaport.Text = "Wyświetl raport"
                checkBoxWyswietlRaport.Location = New System.Drawing.Point(120, 25)
                checkBoxWyswietlRaport.AutoSize = True
                checkBoxWyswietlRaport.Checked = True
                checkBoxWyswietlRaport.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Regular)

                ' Przycisk Wykonaj
                Dim buttonWykonaj As New Button()
                buttonWykonaj.Text = "Wykonaj"
                buttonWykonaj.Size = New System.Drawing.Size(100, 28)
                buttonWykonaj.BackColor = Color.FromArgb(0, 68, 102)
                buttonWykonaj.ForeColor = Color.FromArgb(242, 242, 242)
                buttonWykonaj.Font = New System.Drawing.Font("Calibri", 11.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                buttonWykonaj.FlatAppearance.BorderSize = 0
                buttonWykonaj.FlatStyle = FlatStyle.Flat
                buttonWykonaj.Anchor = AnchorStyles.None
                buttonWykonaj.Location = New System.Drawing.Point(10, contentPanel.Height - 190)

                ' Dodanie elementów do panelu
                contentPanel.Controls.Add(ramkaRaportyRodzajPliku)
                contentPanel.Controls.Add(ramkaRaportyJakieKolumny)
                contentPanel.Controls.Add(ramkaRaportyAkcja)
                ramkaRaportyRodzajPliku.Controls.Add(radio1_RaportExcel)
                ramkaRaportyRodzajPliku.Controls.Add(radio2_RaportPdf)
                ramkaRaportyAkcja.Controls.Add(checkBoxZapiszRaport)
                ramkaRaportyAkcja.Controls.Add(checkBoxWyswietlRaport)
                contentPanel.Controls.Add(buttonWykonaj)

                ' Obsługa przycisku "Wykonaj"
                AddHandler buttonWykonaj.Click, Sub(senderobj As Object, e As EventArgs)
                                                    ' Pobranie zaznaczonych kolumn
                                                    Dim selectedColumns As New List(Of String)()
                                                    For Each checkBox In checkBoxes
                                                        If checkBox.Checked Then
                                                            selectedColumns.Add(checkBox.Text)
                                                        End If
                                                    Next

                                                    ' Sprawdzenie formatu pliku (Excel lub PDF)
                                                    Dim filePath As String = String.Empty
                                                    Dim fileExtension As String = ""

                                                    If radio1_RaportExcel.Checked Then
                                                        fileExtension = ".xlsx"
                                                    ElseIf radio2_RaportPdf.Checked Then
                                                        fileExtension = ".pdf"
                                                    Else
                                                        MessageBox.Show("Wybierz format pliku!", "Błąd", MessageBoxButtons.OK, MessageBoxIcon.Warning)
                                                        Return
                                                    End If

                                                    ' Tworzenie unikalnego znacznika czasu
                                                    Dim timeStamp As String = DateTime.Now.ToString("yyyyMMdd_HHmmss")

                                                    ' Zmienne do przechowywania ścieżek plików
                                                    Dim tempFilePath As String = System.IO.Path.Combine(System.IO.Path.GetTempPath(), $"Raport_{timeStamp}{fileExtension}")
                                                    Dim saveFilePath As String = ""

                                                    If checkBoxZapiszRaport.Checked Then
                                                        ' Okno zapisu pliku
                                                        Using saveFileDialog As New SaveFileDialog()
                                                            saveFileDialog.Filter = $"Pliki {fileExtension} (*{fileExtension})|*{fileExtension}"
                                                            If saveFileDialog.ShowDialog() = DialogResult.OK Then
                                                                saveFilePath = saveFileDialog.FileName

                                                                ' Eksport do odpowiedniego formatu
                                                                If radio1_RaportExcel.Checked Then
                                                                    ExportToExcel(DataGridView1, saveFilePath, selectedColumns)
                                                                ElseIf radio2_RaportPdf.Checked Then
                                                                    ExportToPDF(DataGridView1, saveFilePath, selectedColumns)
                                                                End If

                                                                ' Jeśli wyświetlanie jest zaznaczone, otwórz plik z zapisanej lokalizacji
                                                                If checkBoxWyswietlRaport.Checked Then
                                                                    Process.Start(saveFilePath)
                                                                Else
                                                                    MessageBox.Show("Raport zapisany w lokalizacji: " & saveFilePath, "Zapisano", MessageBoxButtons.OK, MessageBoxIcon.Information)
                                                                    'CustomMessageBox.Show("Raport zapisany w lokalizacji: " & saveFilePath, "Zapisano", MessageBoxIcon.Information)
                                                                End If
                                                            End If
                                                        End Using
                                                    End If

                                                    If checkBoxWyswietlRaport.Checked And Not checkBoxZapiszRaport.Checked Then
                                                        ' Tylko wyświetl raport, zapisz do folderu tymczasowego z unikalną nazwą
                                                        If radio1_RaportExcel.Checked Then
                                                            ExportToExcel(DataGridView1, tempFilePath, selectedColumns)
                                                        ElseIf radio2_RaportPdf.Checked Then
                                                            ExportToPDF(DataGridView1, tempFilePath, selectedColumns)
                                                        End If

                                                        ' Otwórz plik z folderu tymczasowego
                                                        Process.Start(tempFilePath)
                                                    End If
                                                End Sub

                ' CASE 2 - RAPORTY - STOP

            Case 3


        End Select

        ' Zmiana tła panelu bocznego na biały po kliknięciu przycisku
        contentPanel.BackColor = Color.White

        ' Ponowne rysowanie panelu bocznego, aby border nie kolidował z aktywnym przyciskiem
        contentPanel.Invalidate() ' Wywołanie ponownego rysowania panelu bocznego
    End Sub

    ' Tworzymy przyciski (zakładki) w pionie
    Private Sub CreateTabs_Narzedzia(detailsForm_Narzedzia As Form, contentPanel As Panel)
        ' Tworzymy trzy przykładowe przyciski (zakładki)
        Dim button1 As New Button()
        Dim button2 As New Button()
        Dim button3 As New Button()
        Dim button4 As New Button()

        ' Ustawienia przycisków z dłuższymi etykietami
        SetupButton(button1, "Synchronizacja danych", 10, 20)
        SetupButton(button2, "Raport listy urządzeń", 10, 52)
        SetupButton(button3, "Słowniki", 10, 84)
        SetupButton(button4, "Import/eksport", 10, 116)

        ' Dodajemy obsługę zdarzeń MouseEnter, MouseLeave i Click do każdego przycisku
        AddHandler button1.MouseEnter, Sub(sender As Object, e As EventArgs) HandleButtonHover(sender, e)
        AddHandler button1.MouseLeave, Sub(sender As Object, e As EventArgs) HandleButtonLeave(sender, e)
        AddHandler button1.Click, Sub(sender As Object, e As EventArgs) HandleButtonClick_Narzedzia(sender, contentPanel, 1)

        AddHandler button2.MouseEnter, Sub(sender As Object, e As EventArgs) HandleButtonHover(sender, e)
        AddHandler button2.MouseLeave, Sub(sender As Object, e As EventArgs) HandleButtonLeave(sender, e)
        AddHandler button2.Click, Sub(sender As Object, e As EventArgs) HandleButtonClick_Narzedzia(sender, contentPanel, 2)

        AddHandler button3.MouseEnter, Sub(sender As Object, e As EventArgs) HandleButtonHover(sender, e)
        AddHandler button3.MouseLeave, Sub(sender As Object, e As EventArgs) HandleButtonLeave(sender, e)
        AddHandler button3.Click, Sub(sender As Object, e As EventArgs) HandleButtonClick_Narzedzia(sender, contentPanel, 3)

        AddHandler button4.MouseEnter, Sub(sender As Object, e As EventArgs) HandleButtonHover(sender, e)
        AddHandler button4.MouseLeave, Sub(sender As Object, e As EventArgs) HandleButtonLeave(sender, e)
        AddHandler button4.Click, Sub(sender As Object, e As EventArgs) HandleButtonClick_Narzedzia(sender, contentPanel, 4)

        ' Dodanie przycisków do nowego formularza (detailsForm)
        detailsForm_Narzedzia.Controls.Add(button1)
        detailsForm_Narzedzia.Controls.Add(button2)
        detailsForm_Narzedzia.Controls.Add(button3)
        detailsForm_Narzedzia.Controls.Add(button4)

        ' Dodanie separatorów między przyciskami
        Dim separator1 As New Panel()
        separator1.BackColor = kolorBorder ' Separator między przyciskami
        separator1.Size = New System.Drawing.Size(200, 2)
        separator1.Location = New System.Drawing.Point(10, 50)

        Dim separator2 As New Panel()
        separator2.BackColor = kolorBorder
        separator2.Size = New System.Drawing.Size(200, 2)
        separator2.Location = New System.Drawing.Point(10, 82)

        Dim separator3 As New Panel()
        separator3.BackColor = kolorBorder
        separator3.Size = New System.Drawing.Size(200, 2)
        separator3.Location = New System.Drawing.Point(10, 114)

        ' Dodajemy separatory do formularza
        detailsForm_Narzedzia.Controls.Add(separator1)
        detailsForm_Narzedzia.Controls.Add(separator2)
        detailsForm_Narzedzia.Controls.Add(separator3)
        ' Wywołujemy funkcję kliknięcia dla pierwszego przycisku, aby był domyślnie aktywny
        HandleButtonClick_Narzedzia(button1, contentPanel, 1)

        ' Dodanie obsługi zdarzenia Paint do panelu bocznego w celu rysowania borderu
        AddHandler contentPanel.Paint, AddressOf DrawPanelBorder
    End Sub

    ' NARZĘDZIA ### STOP

    ' USTAWIENIA ### START
    Private Sub btnUstawienia_Click(sender As Object, e As EventArgs) Handles btnUstawienia.Click

        btnUstawienia.BackColor = Color.White

        'Resetowanie combobox bo sie dublowało podczas kolejnych włąceń ustawień
        comboHoursPierwszyOdczyt.Items.Clear()
        comboMinutesPierwszyOdczyt.Items.Clear()

        'Wczytaj ustawienia programu
        settings = LoadSettings()

        'Wczytaj dane połączenia z bazą
        connect = LoadConnectData()

        ' Tworzymy nowe okno (formularz) z ustawieniami
        Dim detailsForm As New Form()
        detailsForm.Text = "Ustawienia"
        detailsForm.StartPosition = FormStartPosition.CenterParent
        detailsForm.AutoSize = False
        detailsForm.Width = 900
        detailsForm.Height = 700
        detailsForm.MaximizeBox = False
        detailsForm.FormBorderStyle = FormBorderStyle.FixedDialog
        detailsForm.BackColor = kolorOkna
        detailsForm.Owner = Me
        ' Tworzymy boczny panel, który ma zmieniać tło po kliknięciu na przyciski
        Dim contentPanel As New Panel()
        contentPanel.BackColor = Color.FromArgb(204, 204, 179)
        contentPanel.Location = New System.Drawing.Point(211, 20) ' Ustawiamy panel 5px od prawej strony przycisków
        contentPanel.Size = New System.Drawing.Size(detailsForm.Width - 245, detailsForm.Height - 130) ' Dostosowujemy rozmiar panelu

        ' Dodajemy panel do formularza
        detailsForm.Controls.Add(contentPanel)

        ' Panel dolny dla przycisków "Zapisz" i "Zakończ"
        Dim panelBottom As New Panel()
        panelBottom.BackColor = kolorOkna
        panelBottom.Size = New System.Drawing.Size(detailsForm.Width, 60)
        panelBottom.Dock = DockStyle.Bottom

        ' Dodaj przyciski do dolnego panelu
        AddBottomButtons(panelBottom, detailsForm)

        ' Dodaj panel dolny do formularza
        detailsForm.Controls.Add(panelBottom)

        AddHandler detailsForm.FormClosed, AddressOf OnDetailsFormClosed

        ' Wywołujemy funkcję tworzącą zakładki (przyciski)
        CreateTabs(detailsForm, contentPanel)

        ' Wyświetlamy formularz jako dialog modalny (blokujący)
        detailsForm.ShowDialog()
    End Sub

    Private Sub AddBottomButtons(panelBottom As Panel, detailsForm As Form)
        ' Usuwanie istniejących zdarzeń (jeśli były wcześniej dodane)
        RemoveHandler buttonZapisz_Ustawienia.Click, Nothing

        ' Konfiguracja przycisku "Zapisz"
        buttonZapisz_Ustawienia.Text = "Zapisz"
        buttonZapisz_Ustawienia.Size = New System.Drawing.Size(90, 32)
        buttonZapisz_Ustawienia.BackColor = Color.FromArgb(0, 68, 102)
        buttonZapisz_Ustawienia.ForeColor = Color.FromArgb(242, 242, 242)
        buttonZapisz_Ustawienia.Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
        buttonZapisz_Ustawienia.FlatAppearance.BorderSize = 0
        buttonZapisz_Ustawienia.FlatStyle = FlatStyle.Flat
        buttonZapisz_Ustawienia.Anchor = AnchorStyles.None
        buttonZapisz_Ustawienia.Enabled = False

        ' Tworzenie przycisku "Zakończ"
        Dim buttonAnuluj As New Button()
        buttonAnuluj.Text = "Zakończ"
        buttonAnuluj.Size = New System.Drawing.Size(90, 32)
        buttonAnuluj.BackColor = Color.FromArgb(0, 68, 102)
        buttonAnuluj.ForeColor = Color.FromArgb(242, 242, 242)
        buttonAnuluj.Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
        buttonAnuluj.FlatAppearance.BorderSize = 0
        buttonAnuluj.FlatStyle = FlatStyle.Flat
        buttonAnuluj.Anchor = AnchorStyles.None

        ' Dodanie przycisków do panelu dolnego
        panelBottom.Controls.Add(buttonZapisz_Ustawienia)
        panelBottom.Controls.Add(buttonAnuluj)

        ' Ustawienie lokalizacji przycisków
        buttonZapisz_Ustawienia.Location = New System.Drawing.Point((panelBottom.Width - buttonZapisz_Ustawienia.Width - buttonAnuluj.Width - 10) * 0.7, 10)
        buttonAnuluj.Location = New System.Drawing.Point(buttonZapisz_Ustawienia.Location.X + buttonZapisz_Ustawienia.Width + 10, 10)

        ' Obraz ikony błędu
        Dim errorIcon As System.Drawing.Image = My.Resources._error

        ' Usuń poprzednie zdarzenia przed dodaniem nowego (jeśli były wcześniej przypisane)
        RemoveHandler buttonZapisz_Ustawienia.Click, AddressOf buttonZapisz_Ustawienia_Click

        ' Dodaj nowe zdarzenie tylko raz
        AddHandler buttonZapisz_Ustawienia.Click, AddressOf buttonZapisz_Ustawienia_Click

        ' Dodaj obsługę zdarzenia dla przycisku "Zakończ"
        AddHandler buttonAnuluj.Click, Sub(sender As Object, e As EventArgs)
                                           detailsForm.Close()
                                           comboHoursPierwszyOdczyt.Items.Clear()
                                           settings = LoadSettings()
                                       End Sub
    End Sub

    ' Przykładowa funkcja obsługująca kliknięcie "Zapisz" (przypisana jako `AddressOf` w AddBottomButtons)
    Private Sub buttonZapisz_Ustawienia_Click(sender As Object, e As EventArgs)

        Dim errorIcon As System.Drawing.Image = My.Resources._error

        connect.connectToServerHost = PolaczenieSerwerHostDane.Text
        connect.connectToServerUsername = PolaczenieSerwerUsernameDane.Text
        connect.connectToServerPassword = PolaczenieSerwerPasswordDane.Text
        connect.connectToServerDatabase = PolaczenieSerwerDatabaseDane.Text
        connect.connectToServerKlient = PolaczenieSerwerClientDane.Text

        ' Sprawdzenie, czy wszystkie wymagane pola są uzupełnione, a `PolaczenieSerwerClientDane.Text` jest puste
        If Not String.IsNullOrWhiteSpace(PolaczenieSerwerHostDane.Text) AndAlso
           Not String.IsNullOrWhiteSpace(PolaczenieSerwerUsernameDane.Text) AndAlso
           Not String.IsNullOrWhiteSpace(PolaczenieSerwerPasswordDane.Text) AndAlso
            Not String.IsNullOrWhiteSpace(PolaczenieSerwerDatabaseDane.Text) AndAlso
            String.IsNullOrWhiteSpace(PolaczenieSerwerClientDane.Text) Then

            CustomMessageBox.Show("Wprowadzono dane do połączenia z bazą danych. Proszę wprowadzić nazwę klienta. ", "Alert", errorIcon)

        ElseIf Not String.IsNullOrWhiteSpace(PolaczenieSerwerHostDane.Text) AndAlso
          Not String.IsNullOrWhiteSpace(PolaczenieSerwerUsernameDane.Text) AndAlso
          Not String.IsNullOrWhiteSpace(PolaczenieSerwerPasswordDane.Text) AndAlso
          Not String.IsNullOrWhiteSpace(PolaczenieSerwerDatabaseDane.Text) AndAlso
          Not String.IsNullOrWhiteSpace(PolaczenieSerwerClientDane.Text) Then

            PolaczenieSerwerClientDane.Enabled = False
            SaveConnectData(connect)
            SaveSettings(settings)
            buttonZapisz_Ustawienia.Enabled = False
        Else

            SaveSettings(settings)
            buttonZapisz_Ustawienia.Enabled = False
        End If

    End Sub


    ' Obsługa kliknięcia na przycisk (ustawienie aktywnego przycisku i zmiana tła w panelu)
    Private Sub HandleButtonClick(sender As Object, contentPanel As Panel, tabIndex As Integer)

        Dim btn As Button = DirectCast(sender, Button)

        ' Resetowanie koloru i borderu poprzedniego aktywnego przycisku
        If currentActiveButton IsNot Nothing Then
            currentActiveButton.BackColor = kolorButtons
            currentActiveButton.Size = New System.Drawing.Size(200, 30) ' Przywracamy pierwotny rozmiar
            currentActiveButton.FlatAppearance.BorderSize = 1 ' Stała szerokość borderu
            currentActiveButton.FlatAppearance.BorderColor = kolorBorder ' Oryginalny kolor borderu
        End If

        ' Ustawienie nowego aktywnego przycisku
        currentActiveButton = btn
        currentActiveButton.BackColor = Color.White
        currentActiveButton.Size = New System.Drawing.Size(220, 30) ' Zwiększamy szerokość
        currentActiveButton.FlatStyle = FlatStyle.Flat ' Ustawienie stylu na Flat

        ' Ustawienie obramowania na aktywny przycisk
        currentActiveButton.FlatAppearance.BorderSize = 0 ' Wyłączanie domyślnego obramowania

        ' Zdarzenie do ręcznego rysowania krawędzi
        AddHandler currentActiveButton.Paint, AddressOf DrawButtonBorder

        ' Czyszczenie panelu przed dodaniem nowych kontrolek
        contentPanel.Controls.Clear()
        ' W zależności od indeksu zakładki dodajemy różne kontrolki
        Select Case tabIndex
            Case 1
                ' CASE 1 - POŁĄCZENIE Z SERWEREM - START
                Dim ramkaPolaczenieSerwer As New GroupBox()
                ramkaPolaczenieSerwer.Text = "Dane do połączenia z bazą danych na serwerze"
                ramkaPolaczenieSerwer.Size = New System.Drawing.Size(contentPanel.Width - 20, 300)
                ramkaPolaczenieSerwer.Location = New System.Drawing.Point(10, 10)
                ramkaPolaczenieSerwer.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Bold)

                Dim textPolaczenieSerwerHost As New Label()
                textPolaczenieSerwerHost.Text = "Host:"
                textPolaczenieSerwerHost.Location = New System.Drawing.Point(10, 50)
                textPolaczenieSerwerHost.Size = New System.Drawing.Size(120, 30)
                textPolaczenieSerwerHost.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Regular)
                textPolaczenieSerwerHost.TextAlign = ContentAlignment.MiddleRight

                Dim textPolaczenieSerwerUsername As New Label()
                textPolaczenieSerwerUsername.Text = "Użytkownik:"
                textPolaczenieSerwerUsername.Location = New System.Drawing.Point(10, 85)
                textPolaczenieSerwerUsername.Size = New System.Drawing.Size(120, 30)
                textPolaczenieSerwerUsername.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Regular)
                textPolaczenieSerwerUsername.TextAlign = ContentAlignment.MiddleRight

                Dim textPolaczenieSerwerPassword As New Label()
                textPolaczenieSerwerPassword.Text = "Hasło:"
                textPolaczenieSerwerPassword.Location = New System.Drawing.Point(10, 120)
                textPolaczenieSerwerPassword.Size = New System.Drawing.Size(120, 30)
                textPolaczenieSerwerPassword.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Regular)
                textPolaczenieSerwerPassword.TextAlign = ContentAlignment.MiddleRight

                Dim textPolaczenieSerwerDatabase As New Label()
                textPolaczenieSerwerDatabase.Text = "Nazwa bazy danych:"
                textPolaczenieSerwerDatabase.Location = New System.Drawing.Point(10, 155)
                textPolaczenieSerwerDatabase.Size = New System.Drawing.Size(120, 30)
                textPolaczenieSerwerDatabase.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Regular)
                textPolaczenieSerwerDatabase.TextAlign = ContentAlignment.MiddleRight

                With PolaczenieSerwerHostDane
                    .Location = New System.Drawing.Point(140, 53)
                    .Font = New System.Drawing.Font("Calibri", 10.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                    .Width = 280
                    .Height = 30
                    .ForeColor = Color.Black
                End With

                With PolaczenieSerwerUsernameDane
                    .Location = New System.Drawing.Point(140, 88)
                    .Font = New System.Drawing.Font("Calibri", 10.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                    .Width = 280
                    .Height = 25
                    .ForeColor = Color.Black
                End With

                With PolaczenieSerwerPasswordDane
                    .Location = New System.Drawing.Point(140, 123)
                    .Font = New System.Drawing.Font("Calibri", 10.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                    .Width = 280
                    .Height = 30
                    .ForeColor = Color.Black
                    .PasswordChar = "●"
                End With

                With PolaczenieSerwerDatabaseDane
                    .Location = New System.Drawing.Point(140, 158)
                    .Font = New System.Drawing.Font("Calibri", 10.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                    .Width = 280
                    .Height = 30
                    .ForeColor = Color.Black
                End With

                Dim buttonTestPolaczenia As New Button()
                With buttonTestPolaczenia
                    .Text = "Test połączenia"
                    .Size = New System.Drawing.Size(130, 28)
                    .BackColor = Color.FromArgb(0, 68, 102)
                    .ForeColor = Color.FromArgb(242, 242, 242)
                    .Font = New System.Drawing.Font("Calibri", 11.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                    .FlatAppearance.BorderSize = 0
                    .FlatStyle = FlatStyle.Flat
                    .Anchor = AnchorStyles.None
                    .Location = New System.Drawing.Point(10, 240)
                End With



                AddHandler PolaczenieSerwerHostDane.TextChanged, Sub(senderObj As Object, eArgs As EventArgs)
                                                                     buttonZapisz_Ustawienia.Enabled = True
                                                                 End Sub
                AddHandler PolaczenieSerwerUsernameDane.TextChanged, Sub(senderObj As Object, eArgs As EventArgs)
                                                                         buttonZapisz_Ustawienia.Enabled = True
                                                                     End Sub
                AddHandler PolaczenieSerwerPasswordDane.TextChanged, Sub(senderObj As Object, eArgs As EventArgs)
                                                                         buttonZapisz_Ustawienia.Enabled = True
                                                                     End Sub
                AddHandler PolaczenieSerwerDatabaseDane.TextChanged, Sub(senderObj As Object, eArgs As EventArgs)
                                                                         buttonZapisz_Ustawienia.Enabled = True
                                                                     End Sub


                ' Obsługa kliknięcia przycisku "Test połączenia"
                AddHandler buttonTestPolaczenia.Click, Sub(senderobj As Object, e As EventArgs)

                                                           Dim okIcon As System.Drawing.Image = My.Resources.okIcon
                                                           Dim errorIcon As System.Drawing.Image = My.Resources._error
                                                           Thread.CurrentThread.CurrentCulture = New CultureInfo("pl-PL")
                                                           Thread.CurrentThread.CurrentUICulture = New CultureInfo("pl-PL")
                                                           Try
                                                               ' Tworzenie connection string z ustawionym kodowaniem UTF8
                                                               Dim connectionString As String = $"Host={PolaczenieSerwerHostDane.Text};Username={PolaczenieSerwerUsernameDane.Text};Password={PolaczenieSerwerPasswordDane.Text};Database={PolaczenieSerwerDatabaseDane.Text};Encoding=UTF8"

                                                               ' Sprawdzenie połączenia z bazą danych PostgreSQL
                                                               Using conn As New NpgsqlConnection(connectionString)
                                                                   conn.Open()
                                                                   ' Wyświetlenie komunikatu o sukcesie
                                                                   CustomMessageBox.Show("Pomyślnie połączono z bazą danych " & PolaczenieSerwerDatabaseDane.Text, "Info", okIcon)
                                                                   conn.Close()
                                                               End Using

                                                           Catch ex As NpgsqlException
                                                               ' Przechwycenie błędu PostgreSQL
                                                               Dim errorMessage As String

                                                               ' Obsługa różnych błędów na podstawie komunikatu `ex.Message`
                                                               If ex.Message.Contains("28P01") Then
                                                                   ' Kod błędu 28P01: Niepoprawne dane logowania
                                                                   errorMessage = "Błąd autoryzacji: Niepoprawna nazwa użytkownika lub hasło."
                                                               ElseIf ex.Message.Contains("3D000") Then
                                                                   ' Kod błędu 3D000: Baza danych nie istnieje
                                                                   errorMessage = "Baza danych " & PolaczenieSerwerDatabaseDane.Text & " nie istnieje."
                                                               ElseIf ex.Message.Contains("could not translate host name") OrElse ex.Message.Contains("no such host") Then
                                                                   ' Obsługa błędów związanych z nieznanym hostem
                                                                   errorMessage = "Nieznany host: Sprawdź poprawność adresu serwera lub ustawienia sieciowe."
                                                               Else
                                                                   ' Domyślny komunikat dla innych błędów
                                                                   errorMessage = $"Wystąpił błąd bazy danych: {ex.Message}"
                                                               End If

                                                               ' Wyświetlenie komunikatu o błędzie
                                                               CustomMessageBox.Show($"Nie udało się połączyć z bazą danych. {errorMessage}", "Błąd połączenia", errorIcon)

                                                           Catch ex As SocketException
                                                               ' Przechwycenie błędu sieciowego (np. nieznany host)
                                                               Dim socketErrorMessage As String = $"Błąd połączenia z bazą danych: {ex.Message}"

                                                               ' Wyświetlenie komunikatu o błędzie hosta
                                                               CustomMessageBox.Show(socketErrorMessage, "Błąd połączenia:", errorIcon)

                                                           Catch ex As Exception
                                                               ' Obsługa innych błędów (np. błędów aplikacji)
                                                               Dim generalErrorMessage As String = $"Błąd połączenia z bazą danych: {ex.Message}"

                                                               ' Wyświetlenie komunikatu o błędzie
                                                               CustomMessageBox.Show(generalErrorMessage, "Błąd połączenia", errorIcon)

                                                           End Try
                                                       End Sub


                Dim ramkaPolaczenieSerwerKlient As New GroupBox()
                ramkaPolaczenieSerwerKlient.Text = "Dane klienta"
                ramkaPolaczenieSerwerKlient.Size = New System.Drawing.Size(contentPanel.Width - 20, 150)
                ramkaPolaczenieSerwerKlient.Location = New System.Drawing.Point(10, ramkaPolaczenieSerwer.Height + 20)
                ramkaPolaczenieSerwerKlient.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Bold)

                Dim textPolaczenieSerwerKlient As New Label()
                textPolaczenieSerwerKlient.Text = "Nazwa klienta:"
                textPolaczenieSerwerKlient.Location = New System.Drawing.Point(10, 50)
                textPolaczenieSerwerKlient.Size = New System.Drawing.Size(120, 30)
                textPolaczenieSerwerKlient.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Regular)
                textPolaczenieSerwerKlient.TextAlign = ContentAlignment.MiddleRight


                With PolaczenieSerwerClientDane
                    .Location = New System.Drawing.Point(140, 53)
                    .Font = New System.Drawing.Font("Calibri", 10.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                    .Width = 280
                    .Height = 30
                    .ForeColor = Color.Black
                End With



                Dim textPolaczenieSerwerKlientUwagi As New Label()
                textPolaczenieSerwerKlientUwagi.Text = "Uwaga! Ustawienie jest jednorazowe i nie będzie możliwości jego zmiany po zapisie"
                textPolaczenieSerwerKlientUwagi.Location = New System.Drawing.Point(10, 110)
                textPolaczenieSerwerKlientUwagi.Size = New System.Drawing.Size(500, 30)
                textPolaczenieSerwerKlientUwagi.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Bold)

                'ODCZYT DANYCH
                PolaczenieSerwerHostDane.Text = connect.connectToServerHost
                PolaczenieSerwerUsernameDane.Text = connect.connectToServerUsername
                PolaczenieSerwerPasswordDane.Text = connect.connectToServerPassword
                PolaczenieSerwerDatabaseDane.Text = connect.connectToServerDatabase
                PolaczenieSerwerClientDane.Text = connect.connectToServerKlient

                If String.IsNullOrWhiteSpace(connect.connectToServerKlient) Then
                    PolaczenieSerwerClientDane.Enabled = True
                Else
                    PolaczenieSerwerClientDane.Enabled = False
                End If

                AddHandler PolaczenieSerwerClientDane.TextChanged, Sub(senderObj As Object, eArgs As EventArgs)
                                                                       buttonZapisz_Ustawienia.Enabled = True
                                                                   End Sub

                contentPanel.Controls.Add(ramkaPolaczenieSerwer)
                contentPanel.Controls.Add(ramkaPolaczenieSerwerKlient)
                ramkaPolaczenieSerwer.Controls.Add(textPolaczenieSerwerHost)
                ramkaPolaczenieSerwer.Controls.Add(textPolaczenieSerwerUsername)
                ramkaPolaczenieSerwer.Controls.Add(textPolaczenieSerwerPassword)
                ramkaPolaczenieSerwer.Controls.Add(textPolaczenieSerwerDatabase)
                ramkaPolaczenieSerwer.Controls.Add(PolaczenieSerwerHostDane)
                ramkaPolaczenieSerwer.Controls.Add(PolaczenieSerwerUsernameDane)
                ramkaPolaczenieSerwer.Controls.Add(PolaczenieSerwerPasswordDane)
                ramkaPolaczenieSerwer.Controls.Add(PolaczenieSerwerDatabaseDane)
                ramkaPolaczenieSerwer.Controls.Add(buttonTestPolaczenia)
                ramkaPolaczenieSerwerKlient.Controls.Add(textPolaczenieSerwerKlient)
                ramkaPolaczenieSerwerKlient.Controls.Add(PolaczenieSerwerClientDane)
                ramkaPolaczenieSerwerKlient.Controls.Add(textPolaczenieSerwerKlientUwagi)
                ' CASE 1 - POŁĄCZENIE Z SERWEREM - STOP

            Case 2
                ' CASE 2 - SPOSÓB ODCZYTU - START
                Dim ramkaSposobOdczytu As New GroupBox()
                ramkaSposobOdczytu.Text = "Sposób odczytu danych z urządzeń"
                ramkaSposobOdczytu.Size = New System.Drawing.Size(contentPanel.Width - 20, 140)
                ramkaSposobOdczytu.Location = New System.Drawing.Point(10, 10)
                ramkaSposobOdczytu.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Bold)

                radio1_SposobOdczytuZmieniaj.Text = "Zmieniaj dane urządzenia jeśli nie są aktualne"
                radio1_SposobOdczytuZmieniaj.Location = New System.Drawing.Point(10, ramkaSposobOdczytu.Location.Y + 10)
                radio1_SposobOdczytuZmieniaj.AutoSize = True
                radio1_SposobOdczytuZmieniaj.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Regular)

                radio2_SposobOdczytuNieZmieniaj.Text = "Nie zmieniaj danych jeśli nie są aktualne"
                radio2_SposobOdczytuNieZmieniaj.Location = New System.Drawing.Point(10, radio1_SposobOdczytuZmieniaj.Location.Y + 20)
                radio2_SposobOdczytuNieZmieniaj.AutoSize = True
                radio2_SposobOdczytuNieZmieniaj.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Regular)

                Dim textSposobOdczytuSkanowanie As New Label()
                textSposobOdczytuSkanowanie.Text = "Podczas skanowania urządzeń:"
                textSposobOdczytuSkanowanie.Location = New System.Drawing.Point(10, radio2_SposobOdczytuNieZmieniaj.Location.Y + 35)
                textSposobOdczytuSkanowanie.AutoSize = True
                textSposobOdczytuSkanowanie.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Regular)

                Dim textSposobOdczytuOpcja1 As New Label()
                textSposobOdczytuOpcja1.Text = "Opcja 1: Jeśli dla danego numeru seryjnego zmienił się IP/hostname nastąpi aktualizacja w systemie"
                textSposobOdczytuOpcja1.Location = New System.Drawing.Point(10, textSposobOdczytuSkanowanie.Location.Y + 20)
                textSposobOdczytuOpcja1.AutoSize = True
                textSposobOdczytuOpcja1.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Regular)

                Dim textSposobOdczytuOpcja2 As New Label()
                textSposobOdczytuOpcja2.Text = "Opcja 2: Odczyt danych następuje jeśli IP/hostname wraz z numerem seryjnym są zgodne co zapisane w systemie."
                textSposobOdczytuOpcja2.Location = New System.Drawing.Point(10, textSposobOdczytuOpcja1.Location.Y + 20)
                textSposobOdczytuOpcja2.AutoSize = True
                textSposobOdczytuOpcja2.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Regular)

                contentPanel.Controls.Add(ramkaSposobOdczytu)
                ramkaSposobOdczytu.Controls.Add(radio1_SposobOdczytuZmieniaj)
                ramkaSposobOdczytu.Controls.Add(radio2_SposobOdczytuNieZmieniaj)
                ramkaSposobOdczytu.Controls.Add(textSposobOdczytuOpcja1)
                ramkaSposobOdczytu.Controls.Add(textSposobOdczytuOpcja2)
                ramkaSposobOdczytu.Controls.Add(textSposobOdczytuSkanowanie)

                'ODCZYT USTAWIEŃ PROGRMU
                If settings.sposobOdczytuAuto Then
                    radio1_SposobOdczytuZmieniaj.Checked = True
                    radio2_SposobOdczytuNieZmieniaj.Checked = False
                ElseIf settings.sposobOdczytuManual Then
                    radio2_SposobOdczytuNieZmieniaj.Checked = True
                    radio1_SposobOdczytuZmieniaj.Checked = False
                End If

                ' Obsługa zmiany wartości w ustawieniach
                AddHandler radio1_SposobOdczytuZmieniaj.CheckedChanged, Sub(senderObj As Object, eArgs As EventArgs)
                                                                            settings.sposobOdczytuAuto = radio1_SposobOdczytuZmieniaj.Checked
                                                                            settings.sposobOdczytuManual = Not radio1_SposobOdczytuZmieniaj.Checked
                                                                            buttonZapisz_Ustawienia.Enabled = True
                                                                        End Sub

                AddHandler radio2_SposobOdczytuNieZmieniaj.CheckedChanged, Sub(senderObj As Object, eArgs As EventArgs)
                                                                               settings.sposobOdczytuManual = radio2_SposobOdczytuNieZmieniaj.Checked
                                                                               settings.sposobOdczytuAuto = Not radio2_SposobOdczytuNieZmieniaj.Checked
                                                                               buttonZapisz_Ustawienia.Enabled = True
                                                                           End Sub
                ' CASE 2 - SPOSÓB ODCZYTU - STOP

                ' CASE 2 - ODCZYT AUTOMATYCZNY/RĘCZNY - START
                Dim ramkaOdczytAutoManual As New GroupBox()
                ramkaOdczytAutoManual.Text = "Odczyt automatyczny/manualny"
                ramkaOdczytAutoManual.Size = New System.Drawing.Size(contentPanel.Width - 20, 80)
                ramkaOdczytAutoManual.Location = New System.Drawing.Point(10, ramkaSposobOdczytu.Height + 20)
                ramkaOdczytAutoManual.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Bold)

                radio1_OdczytAuto.Text = "Automatyczny oraz manualny odczyt danych z urządzeń"
                radio1_OdczytAuto.Location = New System.Drawing.Point(10, 20)
                radio1_OdczytAuto.AutoSize = True
                radio1_OdczytAuto.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Regular)

                radio2_OdczytManual.Text = "Odczyt danych z urządzeń tylko manualny"
                radio2_OdczytManual.Location = New System.Drawing.Point(10, radio1_OdczytAuto.Location.Y + 20)
                radio2_OdczytManual.AutoSize = True
                radio2_OdczytManual.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Regular)

                contentPanel.Controls.Add(ramkaOdczytAutoManual)
                ramkaOdczytAutoManual.Controls.Add(radio1_OdczytAuto)
                ramkaOdczytAutoManual.Controls.Add(radio2_OdczytManual)

                'ODCZYT USTAWIEŃ PROGRMU
                If settings.odczytAuto Then
                    radio1_OdczytAuto.Checked = True
                ElseIf settings.odczytManual Then
                    radio2_OdczytManual.Checked = True
                End If

                ' Obsługa zmiany wartości w ustawieniach
                AddHandler radio1_OdczytAuto.CheckedChanged, Sub(senderObj As Object, eArgs As EventArgs)
                                                                 settings.odczytAuto = radio1_OdczytAuto.Checked
                                                                 settings.odczytManual = Not radio1_OdczytAuto.Checked
                                                                 buttonZapisz_Ustawienia.Enabled = True
                                                             End Sub

                AddHandler radio2_OdczytManual.CheckedChanged, Sub(senderObj As Object, eArgs As EventArgs)
                                                                   settings.odczytManual = radio2_OdczytManual.Checked
                                                                   settings.odczytAuto = Not radio2_OdczytManual.Checked
                                                                   buttonZapisz_Ustawienia.Enabled = True
                                                               End Sub

                ' CASE 2 - ODCZYT AUTOMATYCZNY/RĘCZNY - STOP


                ' CASE 2 - CZĘSTOTLIWOŚĆ I HARMONOGRAM - START
                Dim ramkaOdczytScheduler As New GroupBox()
                ramkaOdczytScheduler.Text = "Częstotliwość automatycznego odczytu"
                ramkaOdczytScheduler.Size = New System.Drawing.Size(contentPanel.Width - 20, 120)
                ramkaOdczytScheduler.Location = New System.Drawing.Point(10, ramkaSposobOdczytu.Height + ramkaOdczytAutoManual.Height + 30)
                ramkaOdczytScheduler.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Bold)

                Dim textIloscOdczytow As New Label()
                textIloscOdczytow.Text = "Co ile godzin odczyt:"
                textIloscOdczytow.Location = New System.Drawing.Point(10, 25)
                textIloscOdczytow.AutoSize = True
                textIloscOdczytow.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Regular)

                numericUpDownIloscOdczytow.Minimum = 1
                numericUpDownIloscOdczytow.Maximum = 24
                numericUpDownIloscOdczytow.Location = New System.Drawing.Point(140, 23)
                numericUpDownIloscOdczytow.Size = New System.Drawing.Size(40, 22)
                numericUpDownIloscOdczytow.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Regular)
                numericUpDownIloscOdczytow.TextAlign = HorizontalAlignment.Center
                numericUpDownIloscOdczytow.ReadOnly = True

                Dim textPierwszyOdczyt As New Label()
                textPierwszyOdczyt.Text = "Pierwszy odczyt:"
                textPierwszyOdczyt.Location = New System.Drawing.Point(33, textIloscOdczytow.Location.Y + 35)
                textPierwszyOdczyt.AutoSize = True
                textPierwszyOdczyt.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Regular)


                comboHoursPierwszyOdczyt.DropDownStyle = ComboBoxStyle.DropDownList
                comboHoursPierwszyOdczyt.Location = New System.Drawing.Point(140, textPierwszyOdczyt.Location.Y - 3)
                comboHoursPierwszyOdczyt.Size = New System.Drawing.Size(45, 25)
                comboHoursPierwszyOdczyt.MaxDropDownItems = 15 'nie działa

                For i As Integer = 0 To 23
                    comboHoursPierwszyOdczyt.Items.Add(i.ToString("D2"))
                Next

                Dim colonLabel As New Label()
                colonLabel.Text = ":"
                colonLabel.AutoSize = True
                colonLabel.Location = New System.Drawing.Point(comboHoursPierwszyOdczyt.Right + 2, textPierwszyOdczyt.Location.Y)

                comboMinutesPierwszyOdczyt.DropDownStyle = ComboBoxStyle.DropDownList
                comboMinutesPierwszyOdczyt.Location = New System.Drawing.Point(colonLabel.Location.X + 10, textPierwszyOdczyt.Location.Y - 3)
                comboMinutesPierwszyOdczyt.Size = New System.Drawing.Size(45, 25)
                comboMinutesPierwszyOdczyt.MaxDropDownItems = 15 'nie działa

                For i As Integer = 0 To 59
                    comboMinutesPierwszyOdczyt.Items.Add(i.ToString("D2"))
                Next

                Dim textOdczytSchedulerUstawienie As New Label()
                textOdczytSchedulerUstawienie.Text = "Ustawienia działają tylko gdy automatyczny odczyt danych z urządzeń jest włączony"
                textOdczytSchedulerUstawienie.Location = New System.Drawing.Point(10, textPierwszyOdczyt.Location.Y + 35)
                textOdczytSchedulerUstawienie.AutoSize = True
                textOdczytSchedulerUstawienie.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Regular)

                contentPanel.Controls.Add(ramkaOdczytScheduler)
                ramkaOdczytScheduler.Controls.Add(textIloscOdczytow)
                ramkaOdczytScheduler.Controls.Add(numericUpDownIloscOdczytow)
                ramkaOdczytScheduler.Controls.Add(textPierwszyOdczyt)
                ramkaOdczytScheduler.Controls.Add(comboHoursPierwszyOdczyt)
                ramkaOdczytScheduler.Controls.Add(colonLabel)
                ramkaOdczytScheduler.Controls.Add(comboMinutesPierwszyOdczyt)
                ramkaOdczytScheduler.Controls.Add(textOdczytSchedulerUstawienie)

                'ODCZYT USTAWIEŃ PROGRMU
                numericUpDownIloscOdczytow.Value = settings.odczytIloscOdczytow
                comboHoursPierwszyOdczyt.SelectedIndex = settings.odczytHoursPierwszyOdczyt
                comboMinutesPierwszyOdczyt.SelectedIndex = settings.odczytMinutesPierwszyOdczyt

                ' Obsługa zmiany wartości w NumericUpDown
                AddHandler numericUpDownIloscOdczytow.ValueChanged, Sub(senderObj As Object, eArgs As EventArgs)
                                                                        settings.odczytIloscOdczytow = CInt(numericUpDownIloscOdczytow.Value)
                                                                        'ODCZYT USTAWIEŃ PROGRMU
                                                                        If settings.sposobOdczytuAuto Then
                                                                            buttonZapisz_Ustawienia.Enabled = True
                                                                        ElseIf settings.sposobOdczytuManual Then
                                                                            buttonZapisz_Ustawienia.Enabled = False
                                                                        End If
                                                                    End Sub

                ' Obsługa zmiany wartości w ComboBox (Godziny)
                AddHandler comboHoursPierwszyOdczyt.SelectedIndexChanged, Sub(senderObj As Object, eArgs As EventArgs)
                                                                              ' DAŁEM TAKIE ZABEZPIECZENIE BO SPORADYCZNIE PRZY TESTACH ZAPISYWAŁA SIĘ DZIWNA GODZINA, NIE WIEM CZEMU
                                                                              If comboHoursPierwszyOdczyt.SelectedIndex >= 0 AndAlso comboHoursPierwszyOdczyt.SelectedIndex <= 23 Then
                                                                                  settings.odczytHoursPierwszyOdczyt = comboHoursPierwszyOdczyt.SelectedIndex
                                                                              End If
                                                                              'ODCZYT USTAWIEŃ PROGRMU
                                                                              If settings.sposobOdczytuAuto Then
                                                                                  buttonZapisz_Ustawienia.Enabled = True
                                                                              ElseIf settings.sposobOdczytuManual Then
                                                                                  buttonZapisz_Ustawienia.Enabled = False
                                                                              End If
                                                                          End Sub

                ' Obsługa zmiany wartości w ComboBox (Minuty)
                AddHandler comboMinutesPierwszyOdczyt.SelectedIndexChanged, Sub(senderObj As Object, eArgs As EventArgs)
                                                                                ' DAŁEM TAKIE ZABEZPIECZENIE BO SPORADYCZNIE PRZY TESTACH ZAPISYWAŁA SIĘ DZIWNA GODZINA, NIE WIEM CZEMU
                                                                                If comboMinutesPierwszyOdczyt.SelectedIndex >= 0 AndAlso comboMinutesPierwszyOdczyt.SelectedIndex <= 59 Then
                                                                                    settings.odczytMinutesPierwszyOdczyt = comboMinutesPierwszyOdczyt.SelectedIndex
                                                                                End If
                                                                                'ODCZYT USTAWIEŃ PROGRMU
                                                                                If settings.sposobOdczytuAuto Then
                                                                                    buttonZapisz_Ustawienia.Enabled = True
                                                                                ElseIf settings.sposobOdczytuManual Then
                                                                                    buttonZapisz_Ustawienia.Enabled = False
                                                                                End If
                                                                            End Sub


                ' CASE 2 - CZĘSTOTLIWOŚĆ I HARMONOGRAM - STOP
            Case 3
                ' CASE 3 - ALTERNATYWNE PODSIECI - START

                Dim ramkaPolaczeniaSieciowe As New GroupBox()
                ramkaPolaczeniaSieciowe.Text = "Alternatywne podsieci"
                ramkaPolaczeniaSieciowe.Size = New System.Drawing.Size(contentPanel.Width - 20, 300)
                ramkaPolaczeniaSieciowe.Location = New System.Drawing.Point(10, 10)
                ramkaPolaczeniaSieciowe.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Bold)
                ramkaPolaczeniaSieciowe.Name = "ramkaPolaczeniaSieciowe" ' Nadanie nazwy

                Dim textnetworkAlternatywnaPodsiec1 As New Label()
                textnetworkAlternatywnaPodsiec1.Text = "Możliwość dodania maksymalnie 5 podsieci w formacie x.x.x.0"
                textnetworkAlternatywnaPodsiec1.Location = New System.Drawing.Point(10, 20)
                textnetworkAlternatywnaPodsiec1.AutoSize = True
                textnetworkAlternatywnaPodsiec1.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Regular)

                Dim textnetworkAlternatywnaPodsiec2 As New Label()
                textnetworkAlternatywnaPodsiec2.Text = "Przykładowa podsieć: 10.10.150.0"
                textnetworkAlternatywnaPodsiec2.Location = New System.Drawing.Point(10, 40)
                textnetworkAlternatywnaPodsiec2.AutoSize = True
                textnetworkAlternatywnaPodsiec2.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Regular)

                Dim networkAlternatywnaPodsiecTabela As New DataGridView
                networkAlternatywnaPodsiecTabela.Name = "dgvAddresses" ' Nadanie nazwy
                networkAlternatywnaPodsiecTabela.Size = New System.Drawing.Size(102, 134)
                networkAlternatywnaPodsiecTabela.Location = New System.Drawing.Point(10, 80)
                networkAlternatywnaPodsiecTabela.ColumnCount = 1
                networkAlternatywnaPodsiecTabela.RowCount = 6
                networkAlternatywnaPodsiecTabela.AllowUserToAddRows = False
                networkAlternatywnaPodsiecTabela.AllowUserToResizeColumns = False
                networkAlternatywnaPodsiecTabela.ClipboardCopyMode = System.Windows.Forms.DataGridViewClipboardCopyMode.EnableWithoutHeaderText
                networkAlternatywnaPodsiecTabela.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize
                networkAlternatywnaPodsiecTabela.RowHeadersVisible = False

                Dim textnetworkAlternatywnaPodsiec3 As New Label()
                textnetworkAlternatywnaPodsiec3.Text = "Ustawienie umożliwia:"
                textnetworkAlternatywnaPodsiec3.Location = New System.Drawing.Point(10, networkAlternatywnaPodsiecTabela.Location.Y + 160)
                textnetworkAlternatywnaPodsiec3.AutoSize = True
                textnetworkAlternatywnaPodsiec3.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Bold)

                Dim textnetworkAlternatywnaPodsiec4 As New Label()
                textnetworkAlternatywnaPodsiec4.Text = "Automatyczne przeszukiwanie wskazanych podsieci, które nie występują w dostępnych interfejsach sieciowych"
                textnetworkAlternatywnaPodsiec4.Location = New System.Drawing.Point(10, textnetworkAlternatywnaPodsiec3.Location.Y + 20)
                textnetworkAlternatywnaPodsiec4.AutoSize = True
                textnetworkAlternatywnaPodsiec4.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Regular)

                networkAlternatywnaPodsiecTabela.Columns(0).Name = "Adres sieci"

                ramkaPolaczeniaSieciowe.Controls.Add(textnetworkAlternatywnaPodsiec1)
                ramkaPolaczeniaSieciowe.Controls.Add(textnetworkAlternatywnaPodsiec2)
                ramkaPolaczeniaSieciowe.Controls.Add(textnetworkAlternatywnaPodsiec3)
                ramkaPolaczeniaSieciowe.Controls.Add(textnetworkAlternatywnaPodsiec4)
                ramkaPolaczeniaSieciowe.Controls.Add(networkAlternatywnaPodsiecTabela)
                contentPanel.Controls.Add(ramkaPolaczeniaSieciowe)

                Dim kolumna As DataGridViewColumn = networkAlternatywnaPodsiecTabela.Columns("Adres sieci")
                networkAlternatywnaPodsiecTabela.Sort(kolumna, System.ComponentModel.ListSortDirection.Descending)
                networkAlternatywnaPodsiecTabela.ColumnHeadersHeight = 30
                networkAlternatywnaPodsiecTabela.ColumnHeadersDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter
                networkAlternatywnaPodsiecTabela.ColumnHeadersDefaultCellStyle.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Bold)
                networkAlternatywnaPodsiecTabela.ColumnHeadersDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter
                networkAlternatywnaPodsiecTabela.CellBorderStyle = DataGridViewCellBorderStyle.SingleHorizontal
                networkAlternatywnaPodsiecTabela.BackgroundColor = Color.FromArgb(242, 242, 242)
                networkAlternatywnaPodsiecTabela.Columns("Adres sieci").DefaultCellStyle.Font = New System.Drawing.Font("Calibri", 9)
                networkAlternatywnaPodsiecTabela.Columns("Adres sieci").Width = 100
                networkAlternatywnaPodsiecTabela.RowTemplate.Height = 15



                'ODCZYT USTAWIEŃ PROGRMU
                For i As Integer = 0 To Math.Min(networkAlternatywnaPodsiecTabela.RowCount - 1, settings.siecAlternatywnaPodsiec.Count - 1)
                    Dim entry As NetworkEntries = settings.siecAlternatywnaPodsiec(i)

                    ' Wstaw wartości do istniejących wierszy
                    networkAlternatywnaPodsiecTabela.Rows(i).Cells(0).Value = entry.AddressIP

                Next

                ' Dodanie obsługi zdarzenia CellValueChanged dla całego DataGridView
                AddHandler networkAlternatywnaPodsiecTabela.CellValueChanged, Sub(senderGrid As Object, eGrid As DataGridViewCellEventArgs)
                                                                                  ' Sprawdzamy, czy zmiana dotyczy prawidłowej komórki
                                                                                  If eGrid.RowIndex >= 0 AndAlso eGrid.ColumnIndex >= 0 Then
                                                                                      ' Pobieramy wiersz, który został zmieniony
                                                                                      Dim updatedRow As DataGridViewRow = networkAlternatywnaPodsiecTabela.Rows(eGrid.RowIndex)

                                                                                      ' Pobieramy wartości z komórek w zmienionym wierszu
                                                                                      Dim addressIP As String = If(updatedRow.Cells(0).Value IsNot Nothing, updatedRow.Cells(0).Value.ToString(), String.Empty)

                                                                                      ' Sprawdzamy, czy wszystkie komórki w wierszu są puste
                                                                                      If String.IsNullOrWhiteSpace(addressIP) Then
                                                                                          ' Usuń wpis z listy ustawień, jeśli wiersz jest pusty
                                                                                          If eGrid.RowIndex < settings.siecAlternatywnaPodsiec.Count Then
                                                                                              settings.siecAlternatywnaPodsiec.RemoveAt(eGrid.RowIndex)
                                                                                          End If
                                                                                      Else
                                                                                          ' Jeśli wiersz nie jest pusty, zaktualizuj lub dodaj wpis
                                                                                          If eGrid.RowIndex < settings.siecAlternatywnaPodsiec.Count Then
                                                                                              ' Aktualizujemy istniejący wpis
                                                                                              Dim existingEntry = settings.siecAlternatywnaPodsiec(eGrid.RowIndex)
                                                                                              existingEntry.AddressIP = addressIP

                                                                                          Else
                                                                                              ' Jeśli indeks przekracza listę, dodaj nowy wpis (np. jeśli użytkownik ręcznie dodał wiersz)
                                                                                              settings.siecAlternatywnaPodsiec.Add(New NetworkEntries With {
                                                                                                  .AddressIP = addressIP
                                                                                              })
                                                                                          End If
                                                                                      End If
                                                                                  End If

                                                                                  'ODCZYT USTAWIEŃ PROGRMU
                                                                                  If settings.sposobOdczytuAuto Then
                                                                                      buttonZapisz_Ustawienia.Enabled = True
                                                                                  ElseIf settings.sposobOdczytuManual Then
                                                                                      buttonZapisz_Ustawienia.Enabled = False
                                                                                  End If

                                                                              End Sub


                ' CASE 3 - ALTERNATYWNE PODSIECI - STOP

            Case 4

                ' CASE 4 - SŁOWNIKI - START

                Dim ramkaSlowniki As New GroupBox()
                ramkaSlowniki.Text = "Słowniki definiowane"
                ramkaSlowniki.Size = New System.Drawing.Size(contentPanel.Width - 20, 130)
                ramkaSlowniki.Location = New System.Drawing.Point(10, 10)
                ramkaSlowniki.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Bold)

                check_SlownikMiejscePostoju_On_Off.Text = "Włącz obsługę słownika 'Miejsce postoju'"
                check_SlownikMiejscePostoju_On_Off.Location = New System.Drawing.Point(10, 20)
                check_SlownikMiejscePostoju_On_Off.AutoSize = True
                check_SlownikMiejscePostoju_On_Off.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Regular)

                check_SlownikDodatkoweInfo_On_Off.Text = "Włącz obsługę słownika 'Dodatkowe informacje'"
                check_SlownikDodatkoweInfo_On_Off.Location = New System.Drawing.Point(10, check_SlownikMiejscePostoju_On_Off.Location.Y + 20)
                check_SlownikDodatkoweInfo_On_Off.AutoSize = True
                check_SlownikDodatkoweInfo_On_Off.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Regular)

                Dim textSłowniki As New Label()
                textSłowniki.Text = "Funkcjonalność pozwala na tworzenie własnych definicji słownikowych dla kategorii Miejsce postoju oraz Dodatkowe informacje" & vbCrLf & vbCrLf & "Włączenie opcji spowoduje dostępność słowników podczas dodawania oraz edycji urządzeń"
                textSłowniki.Location = New System.Drawing.Point(10, check_SlownikDodatkoweInfo_On_Off.Location.Y + 25)
                textSłowniki.AutoSize = False
                textSłowniki.Size = New System.Drawing.Size(ramkaSlowniki.Width - 30, 60)
                textSłowniki.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Regular)

                Dim ramkaSlownikiMiejscePostoju As New GroupBox()
                ramkaSlownikiMiejscePostoju.Text = "Słownik Miejsce postoju"
                ramkaSlownikiMiejscePostoju.Size = New System.Drawing.Size(contentPanel.Width - 20, 180)
                ramkaSlownikiMiejscePostoju.Location = New System.Drawing.Point(10, ramkaSlowniki.Height + 20)
                ramkaSlownikiMiejscePostoju.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Bold)

                Dim slownikMiejscePostojuTabela As New DataGridView
                slownikMiejscePostojuTabela.Size = New System.Drawing.Size(ramkaSlownikiMiejscePostoju.Width - 40, ramkaSlownikiMiejscePostoju.Height - 40)
                slownikMiejscePostojuTabela.Location = New System.Drawing.Point(20, 30)
                slownikMiejscePostojuTabela.ColumnCount = 1
                slownikMiejscePostojuTabela.RowCount = 5
                slownikMiejscePostojuTabela.AllowUserToResizeColumns = False
                slownikMiejscePostojuTabela.ClipboardCopyMode = System.Windows.Forms.DataGridViewClipboardCopyMode.EnableWithoutHeaderText
                slownikMiejscePostojuTabela.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize
                slownikMiejscePostojuTabela.RowHeadersVisible = False

                slownikMiejscePostojuTabela.Columns(0).Name = "Miejsce postoju"

                Dim kolumnaMiejsce As DataGridViewColumn = slownikMiejscePostojuTabela.Columns("Miejsce postoju")
                slownikMiejscePostojuTabela.Sort(kolumnaMiejsce, System.ComponentModel.ListSortDirection.Descending)
                slownikMiejscePostojuTabela.ColumnHeadersHeight = 30
                slownikMiejscePostojuTabela.ColumnHeadersDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter
                slownikMiejscePostojuTabela.ColumnHeadersDefaultCellStyle.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Bold)
                slownikMiejscePostojuTabela.ColumnHeadersDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter
                slownikMiejscePostojuTabela.CellBorderStyle = DataGridViewCellBorderStyle.SingleHorizontal
                slownikMiejscePostojuTabela.BackgroundColor = Color.FromArgb(242, 242, 242)
                slownikMiejscePostojuTabela.Columns("Miejsce postoju").DefaultCellStyle.Font = New System.Drawing.Font("Calibri", 9)
                slownikMiejscePostojuTabela.Columns("Miejsce postoju").Width = slownikMiejscePostojuTabela.Width - 2

                'ODCZYT USTAWIEŃ PROGRMU
                If settings.slownikMiejscePostojuON Then
                    check_SlownikMiejscePostoju_On_Off.Checked = True
                Else
                    check_SlownikMiejscePostoju_On_Off.Checked = False
                End If

                If settings.slownikDodatkoweInfoON Then
                    check_SlownikDodatkoweInfo_On_Off.Checked = True
                Else
                    check_SlownikDodatkoweInfo_On_Off.Checked = False
                End If

                For i As Integer = 0 To Math.Min(slownikMiejscePostojuTabela.RowCount - 1, settings.slownikMiejscePostoju.Count - 1)
                    Dim entry As slMiejPost = settings.slownikMiejscePostoju(i)

                    ' Wstaw wartości do istniejących wierszy
                    slownikMiejscePostojuTabela.Rows(i).Cells(0).Value = entry.MiejscePostoju

                Next

                AddHandler check_SlownikMiejscePostoju_On_Off.CheckedChanged, Sub(senderObj As Object, eArgs As EventArgs)
                                                                                  settings.slownikMiejscePostojuON = check_SlownikMiejscePostoju_On_Off.Checked
                                                                                  buttonZapisz_Ustawienia.Enabled = True
                                                                              End Sub

                AddHandler check_SlownikDodatkoweInfo_On_Off.CheckedChanged, Sub(senderObj As Object, eArgs As EventArgs)
                                                                                 settings.slownikDodatkoweInfoON = check_SlownikDodatkoweInfo_On_Off.Checked
                                                                                 buttonZapisz_Ustawienia.Enabled = True
                                                                             End Sub

                ' Dodanie obsługi zdarzenia CellValueChanged dla całego DataGridView
                AddHandler slownikMiejscePostojuTabela.CellValueChanged, Sub(senderGrid As Object, eGrid As DataGridViewCellEventArgs)
                                                                             ' Sprawdzamy, czy zmiana dotyczy prawidłowej komórki
                                                                             If eGrid.RowIndex >= 0 AndAlso eGrid.ColumnIndex >= 0 Then
                                                                                 ' Pobieramy wiersz, który został zmieniony
                                                                                 Dim updatedRow As DataGridViewRow = slownikMiejscePostojuTabela.Rows(eGrid.RowIndex)

                                                                                 ' Pobieramy wartości z komórek w zmienionym wierszu
                                                                                 Dim miejsce As String = If(updatedRow.Cells(0).Value IsNot Nothing, updatedRow.Cells(0).Value.ToString(), String.Empty)

                                                                                 ' Sprawdzamy, czy wszystkie komórki w wierszu są puste
                                                                                 If String.IsNullOrWhiteSpace(miejsce) Then
                                                                                     ' Usuń wpis z listy ustawień, jeśli wiersz jest pusty
                                                                                     If eGrid.RowIndex < settings.slownikMiejscePostoju.Count Then
                                                                                         settings.slownikMiejscePostoju.RemoveAt(eGrid.RowIndex)
                                                                                     End If
                                                                                 Else
                                                                                     ' Jeśli wiersz nie jest pusty, zaktualizuj lub dodaj wpis
                                                                                     If eGrid.RowIndex < settings.slownikMiejscePostoju.Count Then
                                                                                         ' Aktualizujemy istniejący wpis
                                                                                         Dim existingEntry = settings.slownikMiejscePostoju(eGrid.RowIndex)
                                                                                         existingEntry.MiejscePostoju = miejsce

                                                                                     Else
                                                                                         ' Jeśli indeks przekracza listę, dodaj nowy wpis (np. jeśli użytkownik ręcznie dodał wiersz)
                                                                                         settings.slownikMiejscePostoju.Add(New slMiejPost With {
                                                                                                  .MiejscePostoju = miejsce
                                                                                              })
                                                                                     End If
                                                                                 End If
                                                                             End If

                                                                             'ODCZYT USTAWIEŃ PROGRMU
                                                                             If settings.slownikMiejscePostojuON OrElse settings.slownikDodatkoweInfoON Then
                                                                                 buttonZapisz_Ustawienia.Enabled = True
                                                                             Else
                                                                                 buttonZapisz_Ustawienia.Enabled = False
                                                                             End If

                                                                         End Sub

                Dim ramkaSlownikiDaneDodatkowe As New GroupBox()
                ramkaSlownikiDaneDodatkowe.Text = "Słownik Dodatkowe informacje"
                ramkaSlownikiDaneDodatkowe.Size = New System.Drawing.Size(contentPanel.Width - 20, 180)
                ramkaSlownikiDaneDodatkowe.Location = New System.Drawing.Point(10, ramkaSlowniki.Height + ramkaSlownikiMiejscePostoju.Height + 40)
                ramkaSlownikiDaneDodatkowe.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Bold)

                Dim slownikDaneDodatkoweTabela As New DataGridView
                slownikDaneDodatkoweTabela.Size = New System.Drawing.Size(ramkaSlownikiDaneDodatkowe.Width - 40, ramkaSlownikiDaneDodatkowe.Height - 40)
                slownikDaneDodatkoweTabela.Location = New System.Drawing.Point(20, 30)
                slownikDaneDodatkoweTabela.ColumnCount = 1
                slownikDaneDodatkoweTabela.RowCount = 5
                slownikDaneDodatkoweTabela.AllowUserToResizeColumns = False
                slownikDaneDodatkoweTabela.ClipboardCopyMode = System.Windows.Forms.DataGridViewClipboardCopyMode.EnableWithoutHeaderText
                slownikDaneDodatkoweTabela.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize
                slownikDaneDodatkoweTabela.RowHeadersVisible = False

                slownikDaneDodatkoweTabela.Columns(0).Name = "Dodatkowe Informacje"

                Dim kolumnaDaneDodatkowe As DataGridViewColumn = slownikDaneDodatkoweTabela.Columns("Dodatkowe Informacje")
                slownikDaneDodatkoweTabela.Sort(kolumnaDaneDodatkowe, System.ComponentModel.ListSortDirection.Descending)
                slownikDaneDodatkoweTabela.ColumnHeadersHeight = 30
                slownikDaneDodatkoweTabela.ColumnHeadersDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter
                slownikDaneDodatkoweTabela.ColumnHeadersDefaultCellStyle.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Bold)
                slownikDaneDodatkoweTabela.ColumnHeadersDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter
                slownikDaneDodatkoweTabela.CellBorderStyle = DataGridViewCellBorderStyle.SingleHorizontal
                slownikDaneDodatkoweTabela.BackgroundColor = Color.FromArgb(242, 242, 242)
                slownikDaneDodatkoweTabela.Columns("Dodatkowe Informacje").DefaultCellStyle.Font = New System.Drawing.Font("Calibri", 9)
                slownikDaneDodatkoweTabela.Columns("Dodatkowe Informacje").Width = slownikDaneDodatkoweTabela.Width - 2

                'ODCZYT USTAWIEŃ PROGRMU
                For i As Integer = 0 To Math.Min(slownikDaneDodatkoweTabela.RowCount - 1, settings.slownikDodatkoweInformacje.Count - 1)
                    Dim entry As slDodInfo = settings.slownikDodatkoweInformacje(i)

                    ' Wstaw wartości do istniejących wierszy
                    slownikDaneDodatkoweTabela.Rows(i).Cells(0).Value = entry.DodatkoweInfo

                Next

                ' Dodanie obsługi zdarzenia CellValueChanged dla całego DataGridView
                AddHandler slownikDaneDodatkoweTabela.CellValueChanged, Sub(senderGrid As Object, eGrid As DataGridViewCellEventArgs)
                                                                            ' Sprawdzamy, czy zmiana dotyczy prawidłowej komórki
                                                                            If eGrid.RowIndex >= 0 AndAlso eGrid.ColumnIndex >= 0 Then
                                                                                ' Pobieramy wiersz, który został zmieniony
                                                                                Dim updatedRow As DataGridViewRow = slownikDaneDodatkoweTabela.Rows(eGrid.RowIndex)

                                                                                ' Pobieramy wartości z komórek w zmienionym wierszu
                                                                                Dim info As String = If(updatedRow.Cells(0).Value IsNot Nothing, updatedRow.Cells(0).Value.ToString(), String.Empty)

                                                                                ' Sprawdzamy, czy wszystkie komórki w wierszu są puste
                                                                                If String.IsNullOrWhiteSpace(info) Then
                                                                                    ' Usuń wpis z listy ustawień, jeśli wiersz jest pusty
                                                                                    If eGrid.RowIndex < settings.slownikDodatkoweInformacje.Count Then
                                                                                        settings.slownikDodatkoweInformacje.RemoveAt(eGrid.RowIndex)
                                                                                    End If
                                                                                Else
                                                                                    ' Jeśli wiersz nie jest pusty, zaktualizuj lub dodaj wpis
                                                                                    If eGrid.RowIndex < settings.slownikDodatkoweInformacje.Count Then
                                                                                        ' Aktualizujemy istniejący wpis
                                                                                        Dim existingEntry = settings.slownikDodatkoweInformacje(eGrid.RowIndex)
                                                                                        existingEntry.DodatkoweInfo = info

                                                                                    Else
                                                                                        ' Jeśli indeks przekracza listę, dodaj nowy wpis (np. jeśli użytkownik ręcznie dodał wiersz)
                                                                                        settings.slownikDodatkoweInformacje.Add(New slDodInfo With {
                                                                                                  .DodatkoweInfo = info
                                                                                              })
                                                                                    End If
                                                                                End If
                                                                            End If

                                                                            'ODCZYT USTAWIEŃ PROGRMU
                                                                            If settings.slownikMiejscePostojuON OrElse settings.slownikDodatkoweInfoON Then
                                                                                buttonZapisz_Ustawienia.Enabled = True
                                                                            Else
                                                                                buttonZapisz_Ustawienia.Enabled = False
                                                                            End If
                                                                        End Sub



                contentPanel.Controls.Add(ramkaSlowniki)
                contentPanel.Controls.Add(ramkaSlownikiMiejscePostoju)
                contentPanel.Controls.Add(ramkaSlownikiDaneDodatkowe)
                ramkaSlowniki.Controls.Add(textSłowniki)
                ramkaSlowniki.Controls.Add(check_SlownikMiejscePostoju_On_Off)
                ramkaSlowniki.Controls.Add(check_SlownikDodatkoweInfo_On_Off)
                ramkaSlownikiMiejscePostoju.Controls.Add(slownikMiejscePostojuTabela)
                ramkaSlownikiDaneDodatkowe.Controls.Add(slownikDaneDodatkoweTabela)

                ' CASE 4 - SŁOWNIKI - STOP
        End Select

        ' Zmiana tła panelu bocznego na biały po kliknięciu przycisku
        contentPanel.BackColor = Color.White

        ' Ponowne rysowanie panelu bocznego, aby border nie kolidował z aktywnym przyciskiem
        contentPanel.Invalidate() ' Wywołanie ponownego rysowania panelu bocznego
    End Sub

    ' Tworzymy przyciski (zakładki) w pionie
    Private Sub CreateTabs(detailsForm As Form, contentPanel As Panel)
        ' Tworzymy trzy przykładowe przyciski (zakładki)
        Dim button1 As New Button()
        Dim button2 As New Button()
        Dim button3 As New Button()
        Dim button4 As New Button()

        ' Ustawienia przycisków z dłuższymi etykietami
        SetupButton(button1, "Połączenie z serwerem", 10, 20)
        SetupButton(button2, "Odczyt danych z urządzeń", 10, 52)
        SetupButton(button3, "Połączenia sieciowe", 10, 84)
        SetupButton(button4, "Słowniki", 10, 116)

        ' Dodajemy obsługę zdarzeń MouseEnter, MouseLeave i Click do każdego przycisku
        AddHandler button1.MouseEnter, Sub(sender As Object, e As EventArgs) HandleButtonHover(sender, e)
        AddHandler button1.MouseLeave, Sub(sender As Object, e As EventArgs) HandleButtonLeave(sender, e)
        AddHandler button1.Click, Sub(sender As Object, e As EventArgs) HandleButtonClick(sender, contentPanel, 1)

        AddHandler button2.MouseEnter, Sub(sender As Object, e As EventArgs) HandleButtonHover(sender, e)
        AddHandler button2.MouseLeave, Sub(sender As Object, e As EventArgs) HandleButtonLeave(sender, e)
        AddHandler button2.Click, Sub(sender As Object, e As EventArgs) HandleButtonClick(sender, contentPanel, 2)

        AddHandler button3.MouseEnter, Sub(sender As Object, e As EventArgs) HandleButtonHover(sender, e)
        AddHandler button3.MouseLeave, Sub(sender As Object, e As EventArgs) HandleButtonLeave(sender, e)
        AddHandler button3.Click, Sub(sender As Object, e As EventArgs) HandleButtonClick(sender, contentPanel, 3)

        AddHandler button4.MouseEnter, Sub(sender As Object, e As EventArgs) HandleButtonHover(sender, e)
        AddHandler button4.MouseLeave, Sub(sender As Object, e As EventArgs) HandleButtonLeave(sender, e)
        AddHandler button4.Click, Sub(sender As Object, e As EventArgs) HandleButtonClick(sender, contentPanel, 4)

        ' Dodanie przycisków do nowego formularza (detailsForm)
        detailsForm.Controls.Add(button1)
        detailsForm.Controls.Add(button2)
        detailsForm.Controls.Add(button3)
        detailsForm.Controls.Add(button4)

        ' Dodanie separatorów między przyciskami
        Dim separator1 As New Panel()
        separator1.BackColor = kolorBorder ' Separator między przyciskami
        separator1.Size = New System.Drawing.Size(200, 2)
        separator1.Location = New System.Drawing.Point(10, 50)

        Dim separator2 As New Panel()
        separator2.BackColor = kolorBorder
        separator2.Size = New System.Drawing.Size(200, 2)
        separator2.Location = New System.Drawing.Point(10, 82)

        Dim separator3 As New Panel()
        separator3.BackColor = kolorBorder
        separator3.Size = New System.Drawing.Size(200, 2)
        separator3.Location = New System.Drawing.Point(10, 114)

        ' Dodajemy separatory do formularza
        detailsForm.Controls.Add(separator1)
        detailsForm.Controls.Add(separator2)
        detailsForm.Controls.Add(separator3)
        ' Wywołujemy funkcję kliknięcia dla pierwszego przycisku, aby był domyślnie aktywny
        HandleButtonClick(button1, contentPanel, 1)

        ' Dodanie obsługi zdarzenia Paint do panelu bocznego w celu rysowania borderu
        AddHandler contentPanel.Paint, AddressOf DrawPanelBorder
    End Sub

    ' USTAWIENIA ### STOP


    ' WSPÓLNE USTAWIENIA/NARZĘDZIA ### START

    ' Funkcja do konfiguracji przycisków
    Private Sub SetupButton(btn As Button, text As String, x As Integer, y As Integer)
        btn.Text = text
        btn.Size = New System.Drawing.Size(200, 30) ' Szerokość 200 pikseli, wysokość 30 pikseli
        btn.Location = New System.Drawing.Point(x, y)
        btn.BackColor = kolorButtons
        btn.FlatStyle = FlatStyle.Flat
        btn.FlatAppearance.BorderSize = 1
        btn.FlatAppearance.BorderColor = kolorBorder ' Delikatny szary border
        btn.FlatAppearance.MouseOverBackColor = Color.White
        btn.FlatAppearance.MouseDownBackColor = Color.White
        btn.Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Bold)
    End Sub

    ' Obsługa najechania myszą na przycisk (zmiana koloru)
    Private Sub HandleButtonHover(sender As Object, e As EventArgs)
        Dim btn As Button = DirectCast(sender, Button)
        If btn IsNot currentActiveButton Then
            btn.BackColor = Color.White
            btn.FlatAppearance.BorderColor = kolorBorder ' Delikatny border po najechaniu
        End If
    End Sub

    ' Obsługa odjechania myszą z przycisku (przywrócenie koloru)
    Private Sub HandleButtonLeave(sender As Object, e As EventArgs)
        Dim btn As Button = DirectCast(sender, Button)
        If btn IsNot currentActiveButton Then
            btn.BackColor = kolorButtons
            btn.FlatAppearance.BorderColor = kolorBorder ' Przywracamy border
        End If
    End Sub

    Private Sub DrawButtonBorder(sender As Object, e As PaintEventArgs)
        Dim btn As Button = DirectCast(sender, Button)
        Dim borderColor As Color = kolorBorder ' Kolor obramowania

        Using pen As New Pen(borderColor, 1)
            ' Rysowanie górnej krawędzi
            e.Graphics.DrawLine(pen, 0, 0, btn.Width - 1, 0)
            ' Rysowanie lewej krawędzi
            e.Graphics.DrawLine(pen, 0, 0, 0, btn.Height - 1)
            ' Rysowanie dolnej krawędzi
            e.Graphics.DrawLine(pen, 0, btn.Height - 1, btn.Width - 1, btn.Height - 1)
        End Using
    End Sub

    ' Funkcja odpowiedzialna za rysowanie borderu wokół panelu
    Private Sub DrawPanelBorder(sender As Object, e As PaintEventArgs)
        Dim panel As Panel = DirectCast(sender, Panel)
        Dim borderColor As Color = kolorBorder ' Twój kolor borderu

        ' Ustawienie pędzla do rysowania krawędzi
        Using pen As New Pen(borderColor)
            ' Rysowanie górnej, prawej i dolnej krawędzi borderu
            e.Graphics.DrawLine(pen, 0, 0, panel.Width - 1, 0) ' Górna krawędź
            e.Graphics.DrawLine(pen, panel.Width - 1, 0, panel.Width - 1, panel.Height - 1) ' Prawa krawędź
            e.Graphics.DrawLine(pen, 0, panel.Height - 1, panel.Width - 1, panel.Height - 1) ' Dolna krawędź

            ' Rysowanie lewej krawędzi
            If currentActiveButton IsNot Nothing Then
                ' Pozycja aktywnego przycisku
                Dim btnTop As Integer = currentActiveButton.Top - 20
                Dim btnBottom As Integer = btnTop + currentActiveButton.Height

                ' Rysowanie górnej części lewej krawędzi
                e.Graphics.DrawLine(pen, 0, 0, 0, btnTop)

                ' Rysowanie dolnej części lewej krawędzi
                e.Graphics.DrawLine(pen, 0, btnBottom, 0, panel.Height)

            End If
        End Using
    End Sub

    ' WSPÓLNE USTAWIENIA/NARZĘDZIA ### STOP

    ' Obsługa kliknięcia w komórkę w DataGridView2
    Private Sub DataGridView2_CellClick(sender As Object, e As DataGridViewCellEventArgs) Handles DataGridView2.CellClick
        ' Sprawdzenie, czy kliknięta komórka jest w kolumnie "Miejsce postoju"
        If e.ColumnIndex = DataGridView2.Columns("Miejsce postoju").Index AndAlso e.RowIndex >= 0 Then

            ' Tworzymy ComboBox z wartościami słownika
            Dim comboBox As New ComboBox()
            comboBox.DropDownStyle = ComboBoxStyle.DropDownList

            ' Wypełnienie ComboBox danymi ze słownika MiejscePostoju
            For Each pozycja As slMiejPost In settings.slownikMiejscePostoju
                comboBox.Items.Add(pozycja.MiejscePostoju)
            Next

            ' Ustawienie ComboBox w odpowiednim miejscu nad klikniętą komórką
            comboBox.Bounds = DataGridView2.GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, True)
            DataGridView2.Controls.Add(comboBox)

            ' Jeśli komórka zawiera już wartość, ustawiamy tę wartość jako wybraną w ComboBox
            If DataGridView2.CurrentCell.Value IsNot Nothing Then
                comboBox.SelectedItem = DataGridView2.CurrentCell.Value.ToString()
            End If

            ' Obsługa wyboru wartości przez użytkownika
            AddHandler comboBox.SelectedIndexChanged, Sub(s, args)
                                                          ' Zapisanie wybranej wartości w komórce
                                                          DataGridView2.CurrentCell.Value = comboBox.SelectedItem.ToString()

                                                          ' Usunięcie ComboBox po dokonaniu wyboru
                                                          DataGridView2.Controls.Remove(comboBox)
                                                      End Sub

            ' Ustawienie widoczności ComboBox i ustawienie focusu
            comboBox.Focus()
        End If
    End Sub

    ' STYL NAGŁÓWKÓW TABELI
    Private Sub FormatTableHeaders()
        ' Wyłącz domyślne style nagłówków, aby stylizacja była możliwa
        DataGridView1.EnableHeadersVisualStyles = False

        ' Ustawienie stylu nagłówków dla wszystkich kolumn
        DataGridView1.ColumnHeadersDefaultCellStyle.BackColor = Color.FromArgb(221, 221, 187)
        DataGridView1.ColumnHeadersDefaultCellStyle.ForeColor = Color.Black
        DataGridView1.ColumnHeadersDefaultCellStyle.Font = New System.Drawing.Font("Calibri", 12, FontStyle.Bold)
        DataGridView1.ColumnHeadersDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter

        ' Formatowanie nagłówków tonerów
        If DataGridView1.Columns.Contains("Toner BK") Then
            DataGridView1.Columns("Toner BK").HeaderCell.Style.BackColor = Color.Black
            DataGridView1.Columns("Toner BK").HeaderCell.Style.ForeColor = Color.White
        End If

        If DataGridView1.Columns.Contains("Toner Y") Then
            DataGridView1.Columns("Toner Y").HeaderCell.Style.BackColor = Color.Gold
            DataGridView1.Columns("Toner Y").HeaderCell.Style.ForeColor = Color.Black
        End If

        If DataGridView1.Columns.Contains("Toner M") Then
            DataGridView1.Columns("Toner M").HeaderCell.Style.BackColor = Color.Magenta
            DataGridView1.Columns("Toner M").HeaderCell.Style.ForeColor = Color.Black
        End If

        If DataGridView1.Columns.Contains("Toner C") Then
            DataGridView1.Columns("Toner C").HeaderCell.Style.BackColor = Color.Cyan
            DataGridView1.Columns("Toner C").HeaderCell.Style.ForeColor = Color.Black
        End If

        ' Ustawienia dla nagłówków
        DataGridView1.ColumnHeadersHeight = 40
        DataGridView1.ColumnHeadersDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter
        DataGridView1.ColumnHeadersDefaultCellStyle.Font = New System.Drawing.Font("Calibri", 12, System.Drawing.FontStyle.Bold)
        DataGridView1.RowHeadersVisible = False

    End Sub

    ' STYLISTYKA TABELI GŁÓWNEJ
    Private Sub DataGridView1_CellPainting(sender As Object, e As DataGridViewCellPaintingEventArgs) Handles DataGridView1.CellPainting
        Try
            ' Weryfikacja indeksów wiersza i kolumny
            If e.RowIndex < 0 OrElse e.ColumnIndex < 0 Then Exit Sub
            If DataGridView1 Is Nothing OrElse DataGridView1.Rows.Count = 0 OrElse DataGridView1.Columns.Count = 0 Then Exit Sub

            ' Pobranie bieżącej komórki i nazwy kolumny, z kontrolą Nothing
            Dim currentCell = DataGridView1.Rows(e.RowIndex).Cells(e.ColumnIndex)
            Dim currentColumn As String = DataGridView1.Columns(e.ColumnIndex).Name
            If currentCell Is Nothing Then
                Logger.Log($"Brak komórki w wierszu {e.RowIndex}, kolumnie {e.ColumnIndex}.")
                Exit Sub
            End If

            Dim cellValue As String = currentCell.Value?.ToString()
            If cellValue Is Nothing Then
                Logger.Log($"Brak wartości w komórce w wierszu {e.RowIndex}, kolumnie {e.ColumnIndex}.")
                Exit Sub
            End If

            ' Zmienna procentowa do sprawdzenia wartości i domyślne ustawienia kolorów
            Dim procentValue As Integer
            If Integer.TryParse(cellValue.Replace("%", ""), procentValue) Then
                Dim fillBrush As Brush = Brushes.Gray
                Dim backColor As Color = Color.White
                Dim textColor As Color = Color.Black

                ' Logika kolorowania zależnie od kolumny tonera
                Select Case currentColumn
                    Case "Toner BK"
                        textColor = Color.Gray
                        If lowTonerBk AndAlso procentValue <= 10 Then
                            fillBrush = Brushes.Black
                            If procentValue <= 5 Then
                                backColor = Color.FromArgb(252, 2, 2)
                                textColor = Color.White
                            Else
                                backColor = Color.FromArgb(255, 112, 77)
                                textColor = Color.Black
                            End If
                        Else
                            fillBrush = Brushes.Black
                        End If
                    Case "Toner Y"
                        If lowTonerY AndAlso procentValue <= 10 Then
                            fillBrush = Brushes.Gold
                            If procentValue <= 5 Then
                                backColor = Color.FromArgb(252, 2, 2)
                                textColor = Color.White
                            Else
                                backColor = Color.FromArgb(255, 112, 77)
                                textColor = Color.Black
                            End If
                        Else
                            fillBrush = Brushes.Gold
                        End If
                    Case "Toner M"
                        If lowTonerM AndAlso procentValue <= 10 Then
                            fillBrush = Brushes.Magenta
                            If procentValue <= 5 Then
                                backColor = Color.FromArgb(252, 2, 2)
                                textColor = Color.White
                            Else
                                backColor = Color.FromArgb(255, 112, 77)
                                textColor = Color.Black
                            End If
                        Else
                            fillBrush = Brushes.Magenta
                        End If
                    Case "Toner C"
                        If lowTonerC AndAlso procentValue <= 10 Then
                            fillBrush = Brushes.Cyan
                            If procentValue <= 5 Then
                                backColor = Color.FromArgb(252, 2, 2)
                                textColor = Color.White
                            Else
                                backColor = Color.FromArgb(255, 112, 77)
                                textColor = Color.Black
                            End If
                        Else
                            fillBrush = Brushes.Cyan
                        End If

                End Select

                ' Rysowanie tylko dla kolumn tonerów
                If {"Toner BK", "Toner Y", "Toner M", "Toner C"}.Contains(currentColumn) Then
                    e.Graphics.FillRectangle(New SolidBrush(backColor), e.CellBounds)
                    Dim progressWidth As Integer = CInt((procentValue / 100.0) * (e.CellBounds.Width - 1))
                    e.Graphics.FillRectangle(fillBrush, e.CellBounds.X, e.CellBounds.Y, progressWidth, e.CellBounds.Height - 1)

                    TextRenderer.DrawText(e.Graphics, cellValue, e.CellStyle.Font, e.CellBounds, textColor, TextFormatFlags.HorizontalCenter Or TextFormatFlags.VerticalCenter)
                    Using thinPen As New Pen(Color.LightGray, 0.5)
                        e.Graphics.DrawRectangle(thinPen, New System.Drawing.Rectangle(e.CellBounds.X, e.CellBounds.Y, e.CellBounds.Width - 1, e.CellBounds.Height - 1))
                    End Using
                    e.Handled = True
                End If
            End If

        Catch ex As Exception
            Logger.Log("Błąd w metodzie DataGridView1_CellPainting: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try
    End Sub


    Private Sub DataGridView1_CellFormatting(sender As Object, e As DataGridViewCellFormattingEventArgs) Handles DataGridView1.CellFormatting
        Try
            ' Weryfikacja indeksów wiersza i kolumny
            If e.RowIndex < 0 OrElse e.ColumnIndex < 0 Then Exit Sub
            If DataGridView1 Is Nothing OrElse DataGridView1.Rows.Count = 0 OrElse DataGridView1.Columns.Count = 0 Then Exit Sub

            ' Pobranie bieżącej komórki
            Dim currentCell As DataGridViewCell = DataGridView1.Rows(e.RowIndex).Cells(e.ColumnIndex)
            If currentCell Is Nothing OrElse currentCell.Value Is Nothing Then
                Logger.Log($"Komórka lub jej wartość jest 'Nothing' w wierszu {e.RowIndex}, kolumnie {e.ColumnIndex}.")
                Exit Sub
            End If

            ' Upewnij się, że e.CellStyle nie jest Nothing
            If e.CellStyle Is Nothing Then
                Logger.Log("e.CellStyle jest Nothing - ustawiam domyślny styl.")
                e.CellStyle = New DataGridViewCellStyle()
            End If

            ' Dalsza logika formatowania kolumny "Status" lub innych
            If currentCell.OwningColumn.Name = "Status" Then
                Dim statusValue As String = currentCell.Value.ToString()
                If statusValue = zielonaKropka Then
                    e.CellStyle.ForeColor = Color.FromArgb(0, 192, 0)
                    e.CellStyle.Font = New System.Drawing.Font("Calibri", 19, FontStyle.Bold)
                ElseIf statusValue = czerwonaKropka Then
                    e.CellStyle.ForeColor = Color.Red
                    e.CellStyle.Font = New System.Drawing.Font("Calibri", 24, FontStyle.Bold)
                End If
                e.CellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter
            End If

            ' Ogólne formatowanie dla innych kolumn
            Select Case currentCell.OwningColumn.Name
                Case "Adres", "Nr seryjny", "Miejsce postoju", "Urządzenie", "Nazwa hosta", "MAC", "Dodatkowe informacje"
                    e.CellStyle.Font = New System.Drawing.Font("Calibri", 10)
                Case "Licznik M", "Licznik K"
                    e.CellStyle.Font = New System.Drawing.Font("Calibri", 10)
                    e.CellStyle.Alignment = DataGridViewContentAlignment.MiddleRight
                Case "Toner BK", "Toner Y", "Toner M", "Toner C"
                    e.CellStyle.Font = New System.Drawing.Font(DataGridView1.Font, FontStyle.Bold)
                    e.CellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter
            End Select

            ' Stylizacja pustych komórek
            Dim columnsToCheck = {"Toner BK", "Toner Y", "Toner M", "Toner C", "Licznik M", "Licznik K"}
            If columnsToCheck.Contains(currentCell.OwningColumn.Name) Then
                Dim cellValue As Object = DataGridView1.Rows(e.RowIndex).Cells(currentCell.OwningColumn.Name).Value
                If cellValue Is Nothing OrElse cellValue.ToString() = "" Then
                    DataGridView1.Rows(e.RowIndex).Cells(currentCell.OwningColumn.Name).Style.BackColor = Color.FromArgb(203, 203, 203)
                End If
            End If

            ' Dostosowanie szerokości kolumn
            AdjustColumnWidths()

            ' Ustawienia wierszy i stylu siatki
            DataGridView1.RowTemplate.Height = 24
            DataGridView1.CellBorderStyle = DataGridViewCellBorderStyle.SingleHorizontal

        Catch ex As Exception
            Logger.Log("Błąd w metodzie DataGridView1_CellFormatting: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try
    End Sub

    ' Metoda AdjustColumnWidths również z kontrolą na DataGridView i Columns
    Private Sub AdjustColumnWidths()
        Try
            If DataGridView1 Is Nothing OrElse DataGridView1.Columns.Count = 0 Then Exit Sub

            Dim gridWidth = PanelTop.Width - PanelMenu.Width - PanelRight.Width
            If DataGridView1.Columns.Contains("Adres") Then DataGridView1.Columns("Adres").Width = CInt(gridWidth * 0.065)
            If DataGridView1.Columns.Contains("Nazwa hosta") Then DataGridView1.Columns("Nazwa hosta").Width = CInt(gridWidth * 0.1)
            If DataGridView1.Columns.Contains("Miejsce postoju") Then DataGridView1.Columns("Miejsce postoju").Width = CInt(gridWidth * 0.12)
            If DataGridView1.Columns.Contains("Urządzenie") Then DataGridView1.Columns("Urządzenie").Width = CInt(gridWidth * 0.143)
            If DataGridView1.Columns.Contains("Nr seryjny") Then DataGridView1.Columns("Nr seryjny").Width = CInt(gridWidth * 0.08)
            If DataGridView1.Columns.Contains("MAC") Then DataGridView1.Columns("MAC").Width = CInt(gridWidth * 0.1)
            If DataGridView1.Columns.Contains("Status") Then DataGridView1.Columns("Status").Width = CInt(gridWidth * 0.03)
            If DataGridView1.Columns.Contains("Dodatkowe informacje") Then DataGridView1.Columns("Dodatkowe informacje").Width = CInt(gridWidth * 0.12)
            If DataGridView1.Columns.Contains("Licznik M") Then DataGridView1.Columns("Licznik M").Width = CInt(gridWidth * 0.06)
            If DataGridView1.Columns.Contains("Licznik K") Then DataGridView1.Columns("Licznik K").Width = CInt(gridWidth * 0.06)
            If DataGridView1.Columns.Contains("Toner BK") Then DataGridView1.Columns("Toner BK").Width = CInt(gridWidth * 0.07)
            If DataGridView1.Columns.Contains("Toner Y") Then DataGridView1.Columns("Toner Y").Width = CInt(gridWidth * 0.07)
            If DataGridView1.Columns.Contains("Toner M") Then DataGridView1.Columns("Toner M").Width = CInt(gridWidth * 0.07)
            If DataGridView1.Columns.Contains("Toner C") Then DataGridView1.Columns("Toner C").Width = CInt(gridWidth * 0.07)

        Catch ex As Exception
            Logger.Log("Błąd w metodzie AdjustColumnWidths: " & ex.Message & vbCrLf & "StackTrace: " & ex.StackTrace)
        End Try
    End Sub


    ' INICJALIZACJA KOLUMN DLA GŁÓWNEJ TABELI
    Public Sub InitializeDataTable()
        dataTable = New DataTable()
        dataTable.Columns.Add("Adres", GetType(String))
        dataTable.Columns.Add("Nazwa hosta", GetType(String))
        dataTable.Columns.Add("Urządzenie", GetType(String))
        dataTable.Columns.Add("Nr seryjny", GetType(String))
        dataTable.Columns.Add("Miejsce postoju", GetType(String))
        dataTable.Columns.Add("Dodatkowe informacje", GetType(String))
        dataTable.Columns.Add("Status", GetType(String))
        dataTable.Columns.Add("MAC", GetType(String))
        dataTable.Columns.Add("Toner BK", GetType(String))
        dataTable.Columns.Add("Toner Y", GetType(String))
        dataTable.Columns.Add("Toner M", GetType(String))
        dataTable.Columns.Add("Toner C", GetType(String))
        dataTable.Columns.Add("Licznik M", GetType(String))
        dataTable.Columns.Add("Licznik K", GetType(String))
    End Sub

    ' ZAZNACZANIE/ODZNACZANIE WSZYSTKICH WIERSZY
    Private Sub HeaderCheckBox_Clicked(sender As Object, e As EventArgs)
        ' Sprawdź stan checkboxa w nagłówku
        Dim isChecked As Boolean = DirectCast(sender, CheckBox).Checked

        ' Iteruj przez wszystkie wiersze i ustaw stan checkboxa w każdej komórce zgodnie z wartością isChecked
        For Each row As DataGridViewRow In CType(headerCheckBox.Parent, DataGridView).Rows
            ' Sprawdzanie, czy wiersz nie jest wierszem nowym (jeśli DataGridView.AllowUserToAddRows jest True)
            If Not row.IsNewRow Then
                row.Cells("checkBoxColumn").Value = isChecked
            End If
        Next
    End Sub

    Private Sub DataGridView_CellClick(ByVal sender As Object, ByVal e As DataGridViewCellEventArgs)
        'Check to ensure that the row CheckBox is clicked.
        If e.RowIndex >= 0 AndAlso e.ColumnIndex = 0 Then

            'Loop to verify whether all row CheckBoxes are checked or not.
            Dim isChecked As Boolean = True
            For Each row As DataGridViewRow In DataGridView2.Rows
                If Convert.ToBoolean(row.Cells("checkBoxColumn").Value) = False Then
                    isChecked = False
                    Exit For
                End If
            Next

            headerCheckBox.Checked = isChecked
        End If
    End Sub

    ' FUNKCJA DO ZNAJDYWANIA ADRESU IP PO NAZWIE HOSTA
    Private Function GetLocalIPAddress() As System.Net.IPAddress
        Dim hostName As String = Dns.GetHostName()
        Dim ipHostEntry As IPHostEntry = Dns.GetHostEntry(hostName)

        For Each ipAddress As System.Net.IPAddress In ipHostEntry.AddressList
            If ipAddress.AddressFamily = AddressFamily.InterNetwork Then
                Return ipAddress
            End If
        Next

        Return Nothing
    End Function

    ' FUNKCJA DO POBIERANIA LICZBY WSZYSTKICH NUMERÓW SERYJNYCH W PLIKU JSON
    Public Function GetSerialNumberCount() As Integer

        ' Wczytaj istniejące dane z pliku JSON
        Dim existingData As New List(Of Dane)()
        If File.Exists(filePath) Then
            Dim readJson As String = File.ReadAllText(filePath)
            existingData = JsonConvert.DeserializeObject(Of List(Of Dane))(readJson)
        End If

        ' Policz elementy z niepustym numerem seryjnym
        Dim serialNumberCount As Integer = existingData.Where(Function(d) Not String.IsNullOrEmpty(d.SerialNumber)).Count()
        Return serialNumberCount
    End Function

    ' WYSZUKIWARKA W TABELI
    Private Sub TextBoxSzukajUrzadzenia_TextChanged(sender As Object, e As EventArgs) Handles TextBoxSzukajUrzadzenia.TextChanged
        Dim searchTerm As String = TextBoxSzukajUrzadzenia.Text.Trim()

        If Not String.IsNullOrEmpty(searchTerm) Then
            Dim filteredData As DataTable = originalDataSource.Clone()

            For Each row As DataRow In originalDataSource.Rows
                Dim rowVisible As Boolean = False

                For columnIndex As Integer = 0 To 4 ' SZUKAJ TYLKO W 4 PIERWSZYCH KOLUMNACH
                    Dim cellValue As String = row(columnIndex).ToString()

                    If cellValue.IndexOf(searchTerm, StringComparison.OrdinalIgnoreCase) >= 0 Then
                        rowVisible = True
                        Exit For
                    End If
                Next

                If rowVisible Then
                    filteredData.ImportRow(row)
                End If
            Next

            ' Sortowanie danych po pierwszej znalezionej kolumnie
            filteredData.DefaultView.Sort = "Adres ASC" ' Zamień "ColumnName" na nazwę kolumny do sortowania

            DataGridView1.DataSource = filteredData
        Else
            DataGridView1.DataSource = originalDataSource
        End If
    End Sub

    ' MENU ODCZYT DANYCH URZĄDZENIA
    Private Sub copyMenuItem5_Click(sender As Object, e As EventArgs) Handles copyMenuItem5.Click
        Dim selectedRow As DataGridViewRow = DataGridView1.CurrentRow

        If selectedRow IsNot Nothing Then
            Dim address As String = selectedRow.Cells("Adres").Value.ToString()
            Dim miejscePostoju As String = selectedRow.Cells("Miejsce postoju").Value.ToString()
            Dim hostname As String = selectedRow.Cells("Nazwa hosta").Value.ToString()
            Dim urzadzenie As String = selectedRow.Cells("Urządzenie").Value.ToString()
            Dim serialNumber As String = selectedRow.Cells("Nr seryjny").Value.ToString()
            Dim dodadkoweInfo As String = selectedRow.Cells("Dodatkowe informacje").Value.ToString()

            UpdateDataSinglePrinter(address, serial:=serialNumber, hostname:=hostname, miejscePostoju:=miejscePostoju, dodatkoweInfo:=dodadkoweInfo)
        End If
    End Sub

    ' MENU KOPIUJ KOMÓRKE
    Private Sub CopyMenuItem_Click(sender As Object, e As EventArgs)
        ' Obsługa zdarzenia kliknięcia w menu kontekstowe "Kopiuj"
        Dim selectedCell As DataGridViewCell = DataGridView1.SelectedCells(0)
        If selectedCell IsNot Nothing AndAlso selectedCell.Value IsNot Nothing Then
            Clipboard.SetText(selectedCell.Value.ToString())
        End If
    End Sub

    ' MENU OTWIERANIE USTAWIEŃ DRUKARKI W DOMYŚLNEJ PRZEGLĄDARCE
    Private Sub copyMenuItem1_Click(sender As Object, e As EventArgs) Handles copyMenuItem1.Click
        ' Sprawdź, czy Tag zawiera poprawny indeks wiersza
        If copyMenuItem1.Tag IsNot Nothing AndAlso TypeOf copyMenuItem1.Tag Is Integer Then
            Dim rowIndex As Integer = CInt(copyMenuItem1.Tag)

            ' Sprawdź, czy indeks wiersza mieści się w zakresie
            If rowIndex >= 0 AndAlso rowIndex < DataGridView1.Rows.Count Then
                ' Pobierz adres drukarki z wybranego wiersza
                Dim printerAddress As String = DataGridView1.Rows(rowIndex).Cells("Adres").Value.ToString()
                printerAddress = "http://" & printerAddress
                ' Otwórz adres URL w domyślnej przeglądarce
                Dim startInfo As New ProcessStartInfo()
                startInfo.UseShellExecute = True
                startInfo.FileName = printerAddress ' Adres URL
                startInfo.Verb = "open"

                Process.Start(startInfo)
            End If
        End If
    End Sub

    ' MENU UKŁAD KOLUMN
    Private Sub CopyMenuItem2_Click(sender As Object, e As EventArgs) Handles copyMenuItem2.Click

        ' Wczytaj ustawienia programu
        settings = LoadSettings()

        checkUstawieniaKolumnZapiszNaStale_On_Off.Checked = False
        checkUstawieniaKolumnPrzywrocDomyslne_On_Off.Checked = False

        ' Tworzenie nowego formularza "Narzędzia"
        Dim detailsForm As New Form()
        detailsForm.Text = "Ustawienia kolumn"
        detailsForm.StartPosition = FormStartPosition.CenterParent
        detailsForm.AutoSize = False
        detailsForm.Width = 700
        detailsForm.Height = 550
        detailsForm.MaximizeBox = False
        detailsForm.FormBorderStyle = FormBorderStyle.FixedDialog
        detailsForm.BackColor = kolorOkna
        detailsForm.Owner = Me

        ' Tworzenie panelu dla zawartości zakładek
        Dim contentPanel As New Panel()
        contentPanel.BackColor = Color.White
        contentPanel.Location = New System.Drawing.Point(141, 20)
        contentPanel.Size = New System.Drawing.Size(detailsForm.Width - 175, detailsForm.Height - 130)
        detailsForm.Controls.Add(contentPanel)

        ' Tworzenie dolnego panelu dla przycisków "Zapisz" i "Zakończ"
        Dim panelBottom As New Panel()
        panelBottom.BackColor = kolorOkna
        panelBottom.Size = New System.Drawing.Size(detailsForm.Width, 60)
        panelBottom.Dock = DockStyle.Bottom
        detailsForm.Controls.Add(panelBottom)

        Dim buttonZapisz As New Button()
        buttonZapisz.Text = "Zapisz"
        buttonZapisz.Size = New System.Drawing.Size(90, 32)
        buttonZapisz.BackColor = Color.FromArgb(0, 68, 102)
        buttonZapisz.ForeColor = Color.FromArgb(242, 242, 242)
        buttonZapisz.Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
        buttonZapisz.FlatAppearance.BorderSize = 0
        buttonZapisz.FlatStyle = FlatStyle.Flat
        buttonZapisz.Anchor = AnchorStyles.None
        buttonZapisz.Enabled = True

        Dim buttonAnuluj As New Button()
        buttonAnuluj.Text = "Zakończ"
        buttonAnuluj.Size = New System.Drawing.Size(90, 32)
        buttonAnuluj.BackColor = Color.FromArgb(0, 68, 102)
        buttonAnuluj.ForeColor = Color.FromArgb(242, 242, 242)
        buttonAnuluj.Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
        buttonAnuluj.FlatAppearance.BorderSize = 0
        buttonAnuluj.FlatStyle = FlatStyle.Flat
        buttonAnuluj.Anchor = AnchorStyles.None

        panelBottom.Controls.Add(buttonZapisz)
        panelBottom.Controls.Add(buttonAnuluj)

        buttonZapisz.Location = New System.Drawing.Point((panelBottom.Width - buttonZapisz.Width - buttonAnuluj.Width - 10) * 0.7, 10)
        buttonAnuluj.Location = New System.Drawing.Point(buttonZapisz.Location.X + buttonZapisz.Width + 10, 10)

        detailsForm.ActiveControl = buttonZapisz

        AddHandler buttonAnuluj.Click, Sub(senderAnuluj As Object, eAnuluj As EventArgs)
                                           detailsForm.Close()
                                           settings = LoadSettings()
                                       End Sub

        AddHandler buttonZapisz.Click, Sub(senderobj As Object, e1 As EventArgs)

                                           ' Zapisanie ustawień i ponowne załadowanie

                                           buttonZapisz.Enabled = False
                                           If checkUstawieniaKolumnZapiszNaStale_On_Off.Checked = True Then
                                               SaveSettings(settings)
                                               settings = LoadSettings()
                                           End If

                                           If checkUstawieniaKolumnPrzywrocDomyslne_On_Off.Checked = True Then
                                               Dim defaultSettings As AppSettings = GetDefaultSettingsForKolumns()
                                               SaveSettings(defaultSettings)

                                               settings = LoadSettings()

                                               ' Ustaw widoczność kolumn na podstawie domyślnych ustawień
                                               DataGridView1.Columns("Nazwa hosta").Visible = settings.kolumnaNazwaHostaON
                                               DataGridView1.Columns("Dodatkowe informacje").Visible = settings.kolumnaDodatkoweInfoON
                                               DataGridView1.Columns("MAC").Visible = settings.kolumnaMacON
                                               DataGridView1.Columns("Licznik M").Visible = settings.kolumnaLicznikMonoON
                                               DataGridView1.Columns("Licznik K").Visible = settings.kolumnaLicznikKolorON
                                               DataGridView1.Columns("Toner Bk").Visible = settings.kolumnaTonerBkON
                                               DataGridView1.Columns("%Bk").Visible = settings.kolumnaBkPercentON
                                               DataGridView1.Columns("Toner Y").Visible = settings.kolumnaTonerYON
                                               DataGridView1.Columns("%Y").Visible = settings.kolumnaYPercentON
                                               DataGridView1.Columns("Toner M").Visible = settings.kolumnaTonerMON
                                               DataGridView1.Columns("%M").Visible = settings.kolumnaMPercentON
                                               DataGridView1.Columns("Toner C").Visible = settings.kolumnaTonerCON
                                               DataGridView1.Columns("%C").Visible = settings.kolumnaCPercentON

                                               check_NazwaHosta_On_Off.Checked = settings.kolumnaNazwaHostaON
                                               check_DodatkoweInfo_On_Off.Checked = settings.kolumnaDodatkoweInfoON
                                               check_Mac_On_Off.Checked = settings.kolumnaMacON
                                               check_LicznikMono_On_Off.Checked = settings.kolumnaLicznikMonoON
                                               check_LicznikKolor_On_Off.Checked = settings.kolumnaLicznikKolorON
                                               check_TonerBk_On_Off.Checked = settings.kolumnaTonerBkON
                                               check_BkPercent_On_Off.Checked = settings.kolumnaBkPercentON
                                               check_TonerY_On_Off.Checked = settings.kolumnaTonerYON
                                               check_YPercent_On_Off.Checked = settings.kolumnaYPercentON
                                               check_TonerM_On_Off.Checked = settings.kolumnaTonerMON
                                               check_MPercent_On_Off.Checked = settings.kolumnaMPercentON
                                               check_TonerC_On_Off.Checked = settings.kolumnaTonerCON
                                               check_CPercent_On_Off.Checked = settings.kolumnaCPercentON

                                               ' Ustaw domyślne sortowanie kolumn w DataGridView na podstawie domyślnych ustawień
                                               Dim columnName As String = ""
                                               Dim sortDirection As System.ComponentModel.ListSortDirection = System.ComponentModel.ListSortDirection.Ascending

                                               If settings.kolumnaSortAdresAscON Then
                                                   columnName = "Adres"
                                                   sortDirection = System.ComponentModel.ListSortDirection.Ascending
                                               ElseIf settings.kolumnaSortAdresDescON Then
                                                   columnName = "Adres"
                                                   sortDirection = System.ComponentModel.ListSortDirection.Descending
                                               ElseIf settings.kolumnaSortNazwaHostaAscON Then
                                                   columnName = "Nazwa hosta"
                                                   sortDirection = System.ComponentModel.ListSortDirection.Ascending
                                               ElseIf settings.kolumnaSortNazwaHostaDescON Then
                                                   columnName = "Nazwa hosta"
                                                   sortDirection = System.ComponentModel.ListSortDirection.Descending
                                               ElseIf settings.kolumnaSortUrzadzenieAscON Then
                                                   columnName = "Urządzenie"
                                                   sortDirection = System.ComponentModel.ListSortDirection.Ascending
                                               ElseIf settings.kolumnaSortUrzadzenieDescON Then
                                                   columnName = "Urządzenie"
                                                   sortDirection = System.ComponentModel.ListSortDirection.Descending
                                               ElseIf settings.kolumnaSortSerialAscON Then
                                                   columnName = "Nr seryjny"
                                                   sortDirection = System.ComponentModel.ListSortDirection.Ascending
                                               ElseIf settings.kolumnaSortSerialDescON Then
                                                   columnName = "Nr seryjny"
                                                   sortDirection = System.ComponentModel.ListSortDirection.Descending
                                               ElseIf settings.kolumnaSortMiejscePostojuAscON Then
                                                   columnName = "Miejsce postoju"
                                                   sortDirection = System.ComponentModel.ListSortDirection.Ascending
                                               ElseIf settings.kolumnaSortMiejscePostojuDescON Then
                                                   columnName = "Miejsce postoju"
                                                   sortDirection = System.ComponentModel.ListSortDirection.Descending
                                               ElseIf settings.kolumnaSortDodatkoweInfoAscON Then
                                                   columnName = "Dodatkowe informacje"
                                                   sortDirection = System.ComponentModel.ListSortDirection.Ascending
                                               ElseIf settings.kolumnaSortDodatkoweInfoDescON Then
                                                   columnName = "Dodatkowe informacje"
                                                   sortDirection = System.ComponentModel.ListSortDirection.Descending
                                               End If

                                               ' Jeśli istnieje kolumna o wybranej nazwie, zastosuj sortowanie
                                               If DataGridView1.Columns.Contains(columnName) Then
                                                   DataGridView1.Sort(DataGridView1.Columns(columnName), sortDirection)
                                               End If

                                               Dim comboBoxSortowanie As ComboBox = Nothing
                                               For Each control As Control In contentPanel.Controls
                                                   If TypeOf control Is GroupBox Then
                                                       Dim groupBox As GroupBox = DirectCast(control, GroupBox)
                                                       For Each innerControl As Control In groupBox.Controls
                                                           If TypeOf innerControl Is ComboBox Then
                                                               comboBoxSortowanie = DirectCast(innerControl, ComboBox)
                                                               Exit For
                                                           End If
                                                       Next
                                                   End If
                                               Next
                                               comboBoxSortowanie.SelectedItem = Nothing
                                           Else

                                               ' Pobierz zaznaczone kolumny i ukryj niezaznaczone
                                               For Each control As Control In contentPanel.Controls
                                                   If TypeOf control Is CheckBox Then
                                                       Dim checkBox As CheckBox = DirectCast(control, CheckBox)
                                                       Dim columnName As String = checkBox.Text

                                                       ' Sprawdź, czy kolumna o danej nazwie istnieje w DataGridView
                                                       If DataGridView1.Columns.Contains(columnName) Then
                                                           ' Ustaw widoczność kolumny na podstawie stanu checkboxa
                                                           DataGridView1.Columns(columnName).Visible = checkBox.Checked
                                                           ' Zapamiętaj stan checkboxa w słowniku
                                                           columnStates(columnName) = checkBox.Checked
                                                       End If
                                                   End If
                                               Next

                                               ' Znajdź ComboBox_Sortowanie w contentPanel
                                               Dim comboBoxSortowanie As ComboBox = Nothing
                                               For Each control As Control In contentPanel.Controls
                                                   If TypeOf control Is GroupBox Then
                                                       Dim groupBox As GroupBox = DirectCast(control, GroupBox)
                                                       For Each innerControl As Control In groupBox.Controls
                                                           If TypeOf innerControl Is ComboBox Then
                                                               comboBoxSortowanie = DirectCast(innerControl, ComboBox)
                                                               Exit For
                                                           End If
                                                       Next
                                                   End If
                                               Next

                                               ' Jeśli znaleziono ComboBox, wykonaj sortowanie
                                               If comboBoxSortowanie IsNot Nothing AndAlso comboBoxSortowanie.SelectedItem IsNot Nothing Then
                                                   ' Pobierz wybrany element z ComboBox
                                                   Dim selectedColumn As SortableColumn = CType(comboBoxSortowanie.SelectedItem, SortableColumn)

                                                   ' Ustal nazwy kolumn i kierunek sortowania na podstawie wybranego elementu
                                                   Dim columnName As String = ""
                                                   Dim sortDirection As System.ComponentModel.ListSortDirection = System.ComponentModel.ListSortDirection.Ascending

                                                   ' Mapowanie nazw elementów w ComboBox na nazwy kolumn i kierunek sortowania
                                                   Select Case selectedColumn.ActualName
                                                       Case "kolumnaSortAdresAscON"
                                                           columnName = "Adres"
                                                           sortDirection = System.ComponentModel.ListSortDirection.Ascending
                                                       Case "kolumnaSortAdresDescON"
                                                           columnName = "Adres"
                                                           sortDirection = System.ComponentModel.ListSortDirection.Descending
                                                       Case "kolumnaSortNazwaHostaAscON"
                                                           columnName = "Nazwa hosta"
                                                           sortDirection = System.ComponentModel.ListSortDirection.Ascending
                                                       Case "kolumnaSortNazwaHostaDescON"
                                                           columnName = "Nazwa hosta"
                                                           sortDirection = System.ComponentModel.ListSortDirection.Descending
                                                       Case "kolumnaSortUrzadzenieAscON"
                                                           columnName = "Urządzenie"
                                                           sortDirection = System.ComponentModel.ListSortDirection.Ascending
                                                       Case "kolumnaSortUrzadzenieDescON"
                                                           columnName = "Urządzenie"
                                                           sortDirection = System.ComponentModel.ListSortDirection.Descending
                                                       Case "kolumnaSortSerialAscON"
                                                           columnName = "Nr seryjny"
                                                           sortDirection = System.ComponentModel.ListSortDirection.Ascending
                                                       Case "kolumnaSortSerialDescON"
                                                           columnName = "Nr seryjny"
                                                           sortDirection = System.ComponentModel.ListSortDirection.Descending
                                                       Case "kolumnaSortMiejscePostojuAscON"
                                                           columnName = "Miejsce postoju"
                                                           sortDirection = System.ComponentModel.ListSortDirection.Ascending
                                                       Case "kolumnaSortMiejscePostojuDescON"
                                                           columnName = "Miejsce postoju"
                                                           sortDirection = System.ComponentModel.ListSortDirection.Descending
                                                       Case "kolumnaSortDodatkoweInfoAscON"
                                                           columnName = "Dodatkowe informacje"
                                                           sortDirection = System.ComponentModel.ListSortDirection.Ascending
                                                       Case "kolumnaSortDodatkoweInfoDescON"
                                                           columnName = "Dodatkowe informacje"
                                                           sortDirection = System.ComponentModel.ListSortDirection.Descending
                                                   End Select

                                                   ' Jeśli istnieje kolumna o wybranej nazwie, zastosuj sortowanie
                                                   If DataGridView1.Columns.Contains(columnName) Then
                                                       DataGridView1.Sort(DataGridView1.Columns(columnName), sortDirection)
                                                   End If
                                               End If
                                           End If
                                       End Sub


        Dim buttonZakoncz As New Button()
        With buttonZakoncz
            .Text = "Zakończ"
            .DialogResult = DialogResult.OK
            .Size = New System.Drawing.Size(90, 30)
            .BackColor = Color.FromArgb(0, 68, 102)
            .ForeColor = Color.FromArgb(242, 242, 242)
            .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
            .FlatAppearance.BorderSize = 0
            .FlatStyle = FlatStyle.Flat
            .Anchor = AnchorStyles.None
        End With


        AddHandler buttonZakoncz.Click, Sub()
                                            detailsForm.Close()
                                        End Sub

        ' Wywołanie metody do tworzenia zakładek i przycisków na formularzu Narzędzia
        CreateTabs_UkladKolumn(detailsForm, contentPanel, buttonZapisz, buttonZakoncz)


        ' Wyświetlenie formularza jako modalne okno dialogowe
        detailsForm.ShowDialog()

    End Sub

    ' Funkcja odpowiedzialna za tworzenie zakładek i dodawanie ich do formularza Narzędzia
    Private Sub CreateTabs_UkladKolumn(detailsForm As Form, contentPanel As Panel, buttonZapisz As Button, buttonZakoncz As Button)
        ' Tworzenie czterech przykładowych przycisków (zakładek)
        Dim button1 As New Button()

        ' Ustawienia przycisków z dłuższymi etykietami
        SetupButton(button1, "Ustawienia kolumn", 10, 20)

        ' Dodanie obsługi zdarzeń MouseEnter, MouseLeave i Click do każdego przycisku
        AddHandler button1.MouseEnter, Sub(sender As Object, e As EventArgs) HandleButtonHover(sender, e)
        AddHandler button1.MouseLeave, Sub(sender As Object, e As EventArgs) HandleButtonLeave(sender, e)
        AddHandler button1.Click, Sub(sender As Object, e As EventArgs) HandleButtonClick_UkladKolumn(sender, contentPanel, 1, buttonZapisz, buttonZakoncz)

        detailsForm.Controls.Add(button1)

        ' Dodanie separatorów między przyciskami
        Dim separator1 As New Panel()
        separator1.BackColor = kolorBorder ' Separator między przyciskami
        separator1.Size = New System.Drawing.Size(140, 2)
        separator1.Location = New System.Drawing.Point(10, 50)

        ' Dodajemy separatory do formularza
        detailsForm.Controls.Add(separator1)

        ' Wywołujemy funkcję kliknięcia dla pierwszego przycisku, aby był domyślnie aktywny
        HandleButtonClick_UkladKolumn(button1, contentPanel, 1, buttonZapisz, buttonZakoncz)

        ' Dodanie obsługi zdarzenia Paint do panelu bocznego w celu rysowania borderu
        AddHandler contentPanel.Paint, AddressOf DrawPanelBorder
    End Sub

    ' Obsługa kliknięcia przycisków zakładek dla formularza Narzędzia
    Private Sub HandleButtonClick_UkladKolumn(sender As Object, contentPanel As Panel, tabIndex As Integer, buttonZapisz As Button, buttonZakoncz As Button)
        ' Ustawienie aktywnego przycisku
        Dim clickedButton As Button = DirectCast(sender, Button)
        If currentActiveButton IsNot Nothing Then
            ' Resetowanie poprzedniego aktywnego przycisku
            currentActiveButton.BackColor = kolorButtons
            currentActiveButton.Size = New System.Drawing.Size(140, 30)
            currentActiveButton.FlatAppearance.BorderSize = 1
            currentActiveButton.FlatAppearance.BorderColor = kolorBorder
        End If

        ' Ustawienie nowego aktywnego przycisku
        currentActiveButton = clickedButton
        currentActiveButton.BackColor = Color.White
        currentActiveButton.Size = New System.Drawing.Size(140, 30)
        currentActiveButton.FlatAppearance.BorderSize = 0

        ' Dodanie rysowania borderu wokół aktywnego przycisku
        AddHandler currentActiveButton.Paint, AddressOf DrawButtonBorder

        ' Wyczyść zawartość panelu i wyświetl odpowiednią zawartość dla zakładki
        contentPanel.Controls.Clear()

        Select Case tabIndex

            Case 1

                ' Tworzenie GroupBox do trzymania CheckBoxów
                Dim ramkaUstawieniaKolumnWidocznosc As New GroupBox()
                With ramkaUstawieniaKolumnWidocznosc
                    .Text = "Widoczne kolumny"
                    .Size = New System.Drawing.Size(contentPanel.Width - 20, 160) ' Wysokość dostosowana dla 3 kolumn
                    .Location = New System.Drawing.Point(10, 10)
                    .Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Bold)
                End With

                ' Konfiguracja rozmiaru i rozmieszczenia CheckBoxów
                Dim checkBoxWidth As Integer = 150 ' Szerokość CheckBoxa
                Dim checkBoxHeight As Integer = 15 ' Wysokość CheckBoxa
                Dim horizontalSpacing As Integer = 10 ' Odstęp między kolumnami CheckBoxów
                Dim verticalSpacing As Integer = 10 ' Odstęp między CheckBoxami w pionie

                ' Zmienna do kontroli położenia CheckBoxów
                Dim left As Integer = 30 ' Początkowa pozycja lewej dla pierwszej kolumny
                Dim top As Integer = 35 ' Początkowa pozycja góry
                Dim columnCount As Integer = 0 ' Licznik kolumn
                Dim itemsInColumn As Integer = 0 ' Licznik CheckBoxów w aktualnej kolumnie

                ' Lista istniejących CheckBoxów do przypisania
                Dim checkBoxList As New List(Of CheckBox) From {
    check_NazwaHosta_On_Off, check_DodatkoweInfo_On_Off, check_Mac_On_Off, check_LicznikMono_On_Off,
    check_LicznikKolor_On_Off, check_TonerBk_On_Off, check_BkPercent_On_Off, check_TonerY_On_Off, check_YPercent_On_Off,
    check_TonerM_On_Off, check_MPercent_On_Off, check_TonerC_On_Off, check_CPercent_On_Off
}

                ' Lista nazw do przypisania tekstu do CheckBoxów
                Dim columnNames As New List(Of String) From {
    "Nazwa hosta", "Dodatkowe informacje", "MAC", "Licznik M", "Licznik K",
    "Toner Bk", "%Bk", "Toner Y", "%Y", "Toner M", "%M", "Toner C", "%C"
}

                ' Dodaj EventHandler do każdego CheckBoxa z listy i ustaw jego właściwości
                For i As Integer = 0 To checkBoxList.Count - 1
                    Dim checkBox As CheckBox = checkBoxList(i)
                    checkBox.Text = columnNames(i)
                    checkBox.Font = New System.Drawing.Font("Calibri", 9.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                    checkBox.AutoSize = False ' Wyłącz automatyczne dopasowanie
                    checkBox.Size = New System.Drawing.Size(checkBoxWidth, checkBoxHeight) ' Ustaw rozmiar

                    ' Ustaw lokalizację CheckBoxa na podstawie aktualnego położenia
                    checkBox.Location = New System.Drawing.Point(left, top)
                    contentPanel.Controls.Add(checkBox)

                    ' Aktualizacja pozycji w pionie (dla następnego CheckBoxa w tej samej kolumnie)
                    top += checkBoxHeight + verticalSpacing
                    itemsInColumn += 1

                    ' Przypisz odpowiedni EventHandler do każdego CheckBoxa
                    Select Case checkBox.Text
                        Case "Nazwa hosta"
                            AddHandler checkBox.CheckedChanged, Sub(senderObj As Object, eArgs As EventArgs)
                                                                    settings.kolumnaNazwaHostaON = check_NazwaHosta_On_Off.Checked
                                                                    buttonZapisz.Enabled = True
                                                                End Sub
                        Case "Dodatkowe informacje"
                            AddHandler checkBox.CheckedChanged, Sub(senderObj As Object, eArgs As EventArgs)
                                                                    settings.kolumnaDodatkoweInfoON = check_DodatkoweInfo_On_Off.Checked
                                                                    buttonZapisz.Enabled = True
                                                                End Sub
                        Case "MAC"
                            AddHandler checkBox.CheckedChanged, Sub(senderObj As Object, eArgs As EventArgs)
                                                                    settings.kolumnaMacON = check_Mac_On_Off.Checked
                                                                    buttonZapisz.Enabled = True
                                                                End Sub
                        Case "Licznik M"
                            AddHandler checkBox.CheckedChanged, Sub(senderObj As Object, eArgs As EventArgs)
                                                                    settings.kolumnaLicznikMonoON = check_LicznikMono_On_Off.Checked
                                                                    buttonZapisz.Enabled = True
                                                                End Sub
                        Case "Licznik K"
                            AddHandler checkBox.CheckedChanged, Sub(senderObj As Object, eArgs As EventArgs)
                                                                    settings.kolumnaLicznikKolorON = check_LicznikKolor_On_Off.Checked
                                                                    buttonZapisz.Enabled = True
                                                                End Sub
                        Case "Toner Bk"
                            AddHandler checkBox.CheckedChanged, Sub(senderObj As Object, eArgs As EventArgs)
                                                                    settings.kolumnaTonerBkON = check_TonerBk_On_Off.Checked
                                                                    buttonZapisz.Enabled = True
                                                                End Sub
                        Case "%Bk"
                            AddHandler checkBox.CheckedChanged, Sub(senderObj As Object, eArgs As EventArgs)
                                                                    settings.kolumnaBkPercentON = check_BkPercent_On_Off.Checked
                                                                    buttonZapisz.Enabled = True
                                                                End Sub
                        Case "Toner Y"
                            AddHandler checkBox.CheckedChanged, Sub(senderObj As Object, eArgs As EventArgs)
                                                                    settings.kolumnaTonerYON = check_TonerY_On_Off.Checked
                                                                    buttonZapisz.Enabled = True
                                                                End Sub
                        Case "%Y"
                            AddHandler checkBox.CheckedChanged, Sub(senderObj As Object, eArgs As EventArgs)
                                                                    settings.kolumnaYPercentON = check_YPercent_On_Off.Checked
                                                                    buttonZapisz.Enabled = True
                                                                End Sub
                        Case "Toner M"
                            AddHandler checkBox.CheckedChanged, Sub(senderObj As Object, eArgs As EventArgs)
                                                                    settings.kolumnaTonerMON = check_TonerM_On_Off.Checked
                                                                    buttonZapisz.Enabled = True
                                                                End Sub
                        Case "%M"
                            AddHandler checkBox.CheckedChanged, Sub(senderObj As Object, eArgs As EventArgs)
                                                                    settings.kolumnaMPercentON = check_MPercent_On_Off.Checked
                                                                    buttonZapisz.Enabled = True
                                                                End Sub
                        Case "Toner C"
                            AddHandler checkBox.CheckedChanged, Sub(senderObj As Object, eArgs As EventArgs)
                                                                    settings.kolumnaTonerCON = check_TonerC_On_Off.Checked
                                                                    buttonZapisz.Enabled = True
                                                                End Sub
                        Case "%C"
                            AddHandler checkBox.CheckedChanged, Sub(senderObj As Object, eArgs As EventArgs)
                                                                    settings.kolumnaCPercentON = check_CPercent_On_Off.Checked
                                                                    buttonZapisz.Enabled = True
                                                                End Sub



                    End Select

                    ' Jeśli liczba CheckBoxów w aktualnej kolumnie osiągnie 5, przejdź do następnej kolumny
                    If itemsInColumn >= 5 Then
                        ' Przejdź do kolejnej kolumny
                        columnCount += 1
                        itemsInColumn = 0 ' Reset liczby CheckBoxów w aktualnej kolumnie

                        ' Ustaw pozycję dla nowej kolumny
                        left += checkBoxWidth + horizontalSpacing ' Przesunięcie w prawo do nowej kolumny
                        top = 30 ' Zresetuj pozycję góry dla nowej kolumny
                    End If
                Next
                ' Dodaj GroupBox do panelu
                contentPanel.Controls.Add(ramkaUstawieniaKolumnWidocznosc)

                'ODCZYT USTAWIEŃ
                check_NazwaHosta_On_Off.Checked = settings.kolumnaNazwaHostaON
                check_DodatkoweInfo_On_Off.Checked = settings.kolumnaDodatkoweInfoON
                check_Mac_On_Off.Checked = settings.kolumnaMacON
                check_LicznikMono_On_Off.Checked = settings.kolumnaLicznikMonoON
                check_LicznikKolor_On_Off.Checked = settings.kolumnaLicznikKolorON
                check_TonerBk_On_Off.Checked = settings.kolumnaTonerBkON
                check_BkPercent_On_Off.Checked = settings.kolumnaBkPercentON
                check_TonerY_On_Off.Checked = settings.kolumnaTonerYON
                check_YPercent_On_Off.Checked = settings.kolumnaYPercentON
                check_TonerM_On_Off.Checked = settings.kolumnaTonerMON
                check_MPercent_On_Off.Checked = settings.kolumnaMPercentON
                check_TonerC_On_Off.Checked = settings.kolumnaTonerCON
                check_CPercent_On_Off.Checked = settings.kolumnaCPercentON


                ' Tworzenie ramki dla ustawień sortowania
                Dim ramkaUstawieniaKolumnSortowanie As New GroupBox()
                With ramkaUstawieniaKolumnSortowanie
                    .Text = "Sortowanie"
                    .Size = New System.Drawing.Size(contentPanel.Width - 20, 65)
                    .Location = New System.Drawing.Point(10, ramkaUstawieniaKolumnWidocznosc.Height + 30)
                    .Font = New System.Drawing.Font("Calibri", 9, System.Drawing.FontStyle.Bold)
                End With

                ' Tworzenie ComboBox dla opcji sortowania
                Dim ComboBox_Sortowanie As New ComboBox()
                With ComboBox_Sortowanie
                    .Location = New System.Drawing.Point(20, 25)
                    .Font = New System.Drawing.Font("Calibri", 9.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                    .Width = 200
                    .ForeColor = Color.Black
                    .DropDownStyle = ComboBoxStyle.DropDownList
                End With

                ' Dodanie ComboBox do ramki grupującej i panelu głównego
                ramkaUstawieniaKolumnSortowanie.Controls.Add(ComboBox_Sortowanie)
                contentPanel.Controls.Add(ramkaUstawieniaKolumnSortowanie)

                ' Definiowanie listy pozycji sortowania z rzeczywistymi nazwami kolumn
                Dim sortableColumns As New List(Of SortableColumn) From {
    New SortableColumn("", ""),
    New SortableColumn("Adres: rosnąco", "kolumnaSortAdresAscON"),
    New SortableColumn("Adres: malejąco", "kolumnaSortAdresDescON"),
    New SortableColumn("Nazwa hosta: rosnąco", "kolumnaSortNazwaHostaAscON"),
    New SortableColumn("Nazwa hosta: malejąco", "kolumnaSortNazwaHostaDescON"),
    New SortableColumn("Urządzenie: rosnąco", "kolumnaSortUrzadzenieAscON"),
    New SortableColumn("Urządzenie: malejąco", "kolumnaSortUrzadzenieDescON"),
    New SortableColumn("Nr seryjny: rosnąco", "kolumnaSortSerialAscON"),
    New SortableColumn("Nr seryjny: malejąco", "kolumnaSortSerialDescON"),
    New SortableColumn("Miejsce postoju: rosnąco", "kolumnaSortMiejscePostojuAscON"),
    New SortableColumn("Miejsce postoju: malejąco", "kolumnaSortMiejscePostojuDescON"),
    New SortableColumn("Dodatkowe informacje: rosnąco", "kolumnaSortDodatkoweInfoAscON"),
    New SortableColumn("Dodatkowe informacje: malejąco", "kolumnaSortDodatkoweInfoDescON")
}

                ' Przypisanie listy do ComboBox jako źródła danych
                ComboBox_Sortowanie.DataSource = sortableColumns

                ' ODCZYT USTAWIEŃ - ustawienie domyślnie wybranego elementu na podstawie ustawień
                If settings.kolumnaSortAdresAscON Then
                    ComboBox_Sortowanie.SelectedItem = sortableColumns.FirstOrDefault(Function(x) x.ActualName = "kolumnaSortAdresAscON")
                ElseIf settings.kolumnaSortAdresDescON Then
                    ComboBox_Sortowanie.SelectedItem = sortableColumns.FirstOrDefault(Function(x) x.ActualName = "kolumnaSortAdresDescON")
                ElseIf settings.kolumnaSortNazwaHostaAscON Then
                    ComboBox_Sortowanie.SelectedItem = sortableColumns.FirstOrDefault(Function(x) x.ActualName = "kolumnaSortNazwaHostaAscON")
                ElseIf settings.kolumnaSortNazwaHostaDescON Then
                    ComboBox_Sortowanie.SelectedItem = sortableColumns.FirstOrDefault(Function(x) x.ActualName = "kolumnaSortNazwaHostaDescON")
                ElseIf settings.kolumnaSortUrzadzenieAscON Then
                    ComboBox_Sortowanie.SelectedItem = sortableColumns.FirstOrDefault(Function(x) x.ActualName = "kolumnaSortUrzadzenieAscON")
                ElseIf settings.kolumnaSortUrzadzenieDescON Then
                    ComboBox_Sortowanie.SelectedItem = sortableColumns.FirstOrDefault(Function(x) x.ActualName = "kolumnaSortUrzadzenieDescON")
                ElseIf settings.kolumnaSortSerialAscON Then
                    ComboBox_Sortowanie.SelectedItem = sortableColumns.FirstOrDefault(Function(x) x.ActualName = "kolumnaSortSerialAscON")
                ElseIf settings.kolumnaSortSerialDescON Then
                    ComboBox_Sortowanie.SelectedItem = sortableColumns.FirstOrDefault(Function(x) x.ActualName = "kolumnaSortSerialDescON")
                ElseIf settings.kolumnaSortMiejscePostojuAscON Then
                    ComboBox_Sortowanie.SelectedItem = sortableColumns.FirstOrDefault(Function(x) x.ActualName = "kolumnaSortMiejscePostojuAscON")
                ElseIf settings.kolumnaSortMiejscePostojuDescON Then
                    ComboBox_Sortowanie.SelectedItem = sortableColumns.FirstOrDefault(Function(x) x.ActualName = "kolumnaSortMiejscePostojuDescON")
                ElseIf settings.kolumnaSortDodatkoweInfoAscON Then
                    ComboBox_Sortowanie.SelectedItem = sortableColumns.FirstOrDefault(Function(x) x.ActualName = "kolumnaSortDodatkoweInfoAscON")
                ElseIf settings.kolumnaSortDodatkoweInfoDescON Then
                    ComboBox_Sortowanie.SelectedItem = sortableColumns.FirstOrDefault(Function(x) x.ActualName = "kolumnaSortDodatkoweInfoDescON")
                End If

                ' Obsługa zmiany wartości w ComboBox (SelectedIndexChanged)
                AddHandler ComboBox_Sortowanie.SelectedIndexChanged, Sub(senderComboBox As Object, eArgs As EventArgs)

                                                                         ' Zmienna do przechowywania wybranego elementu z ComboBox
                                                                         Dim selectedColumn As SortableColumn = CType(ComboBox_Sortowanie.SelectedItem, SortableColumn)

                                                                         ' Wyzerowanie wszystkich właściwości sortowania
                                                                         settings.kolumnaSortAdresAscON = False
                                                                         settings.kolumnaSortAdresDescON = False
                                                                         settings.kolumnaSortNazwaHostaAscON = False
                                                                         settings.kolumnaSortNazwaHostaDescON = False
                                                                         settings.kolumnaSortUrzadzenieAscON = False
                                                                         settings.kolumnaSortUrzadzenieDescON = False
                                                                         settings.kolumnaSortSerialAscON = False
                                                                         settings.kolumnaSortSerialDescON = False
                                                                         settings.kolumnaSortMiejscePostojuAscON = False
                                                                         settings.kolumnaSortMiejscePostojuDescON = False
                                                                         settings.kolumnaSortDodatkoweInfoAscON = False
                                                                         settings.kolumnaSortDodatkoweInfoDescON = False
                                                                         If selectedColumn IsNot Nothing Then
                                                                             ' Ustawienie właściwej wartości sortowania w zależności od wybranej opcji
                                                                             Select Case selectedColumn.ActualName
                                                                                 Case "kolumnaSortAdresAscON"
                                                                                     settings.kolumnaSortAdresAscON = True
                                                                                 Case "kolumnaSortAdresDescON"
                                                                                     settings.kolumnaSortAdresDescON = True
                                                                                 Case "kolumnaSortNazwaHostaAscON"
                                                                                     settings.kolumnaSortNazwaHostaAscON = True
                                                                                 Case "kolumnaSortNazwaHostaDescON"
                                                                                     settings.kolumnaSortNazwaHostaDescON = True
                                                                                 Case "kolumnaSortUrzadzenieAscON"
                                                                                     settings.kolumnaSortUrzadzenieAscON = True
                                                                                 Case "kolumnaSortUrzadzenieDescON"
                                                                                     settings.kolumnaSortUrzadzenieDescON = True
                                                                                 Case "kolumnaSortSerialAscON"
                                                                                     settings.kolumnaSortSerialAscON = True
                                                                                 Case "kolumnaSortSerialDescON"
                                                                                     settings.kolumnaSortSerialDescON = True
                                                                                 Case "kolumnaSortMiejscePostojuAscON"
                                                                                     settings.kolumnaSortMiejscePostojuAscON = True
                                                                                 Case "kolumnaSortMiejscePostojuDescON"
                                                                                     settings.kolumnaSortMiejscePostojuDescON = True
                                                                                 Case "kolumnaSortDodatkoweInfoAscON"
                                                                                     settings.kolumnaSortDodatkoweInfoAscON = True
                                                                                 Case "kolumnaSortDodatkoweInfoDescON"
                                                                                     settings.kolumnaSortDodatkoweInfoDescON = True
                                                                             End Select
                                                                         End If
                                                                         ' Aktywacja przycisku Zapisz po dokonaniu zmiany
                                                                         buttonZapisz.Enabled = True
                                                                     End Sub


                With checkUstawieniaKolumnZapiszNaStale_On_Off
                    .Text = "Zapisz ustawienia na stałe"
                    .Size = New System.Drawing.Size(250, 20)
                    .Font = New System.Drawing.Font("Calibri", 10.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                End With

                With checkUstawieniaKolumnPrzywrocDomyslne_On_Off
                    .Text = "Przywróć ustawienia domyslne"
                    .Size = New System.Drawing.Size(250, 20)
                    .Font = New System.Drawing.Font("Calibri", 10.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
                End With

                contentPanel.Controls.Add(checkUstawieniaKolumnZapiszNaStale_On_Off)
                contentPanel.Controls.Add(checkUstawieniaKolumnPrzywrocDomyslne_On_Off)

                checkUstawieniaKolumnZapiszNaStale_On_Off.Location = New System.Drawing.Point(20, 280)
                checkUstawieniaKolumnPrzywrocDomyslne_On_Off.Location = New System.Drawing.Point(20, 305)



                AddHandler checkUstawieniaKolumnZapiszNaStale_On_Off.CheckedChanged, Sub(sendercheck, e)
                                                                                         ' Jeśli zaznaczono checkUstawieniaKolumnZapiszNaStale_On_Off
                                                                                         If checkUstawieniaKolumnZapiszNaStale_On_Off.Checked Then
                                                                                             ' Odznacz i zablokuj drugi CheckBox
                                                                                             checkUstawieniaKolumnPrzywrocDomyslne_On_Off.Checked = False
                                                                                             checkUstawieniaKolumnPrzywrocDomyslne_On_Off.Enabled = False
                                                                                         Else
                                                                                             ' Odblokuj drugi CheckBox
                                                                                             checkUstawieniaKolumnPrzywrocDomyslne_On_Off.Enabled = True
                                                                                         End If
                                                                                         buttonZapisz.Enabled = True
                                                                                     End Sub

                AddHandler checkUstawieniaKolumnPrzywrocDomyslne_On_Off.CheckedChanged, Sub(sendercheck, e)
                                                                                            ' Jeśli zaznaczono checkUstawieniaKolumnPrzywrocDomyslne_On_Off
                                                                                            If checkUstawieniaKolumnPrzywrocDomyslne_On_Off.Checked Then
                                                                                                ' Odznacz i zablokuj pierwszy CheckBox
                                                                                                checkUstawieniaKolumnZapiszNaStale_On_Off.Checked = False
                                                                                                checkUstawieniaKolumnZapiszNaStale_On_Off.Enabled = False
                                                                                            Else
                                                                                                ' Odblokuj pierwszy CheckBox
                                                                                                checkUstawieniaKolumnZapiszNaStale_On_Off.Enabled = True
                                                                                            End If
                                                                                            buttonZapisz.Enabled = True
                                                                                        End Sub

        End Select
    End Sub

    ' MENU UKŁAD KOLUMN - CD...
    Private Sub OkButton_Click(sender As Object, e As EventArgs)
        ' Aktualizuj widoczność kolumn na podstawie stanu checkboxów
        For Each kvp As KeyValuePair(Of String, CheckBox) In columnCheckBoxes
            Dim columnName As String = kvp.Key
            Dim checkBox As CheckBox = kvp.Value

            DataGridView1.Columns(columnName).Visible = checkBox.Checked
        Next
    End Sub

    Private Sub DataGridView1_ColumnHeaderMouseClick(sender As Object, e As DataGridViewCellMouseEventArgs) Handles DataGridView1.ColumnHeaderMouseClick
        If TypeOf sender Is DataGridView Then
            Dim dataGridView As DataGridView = DirectCast(sender, DataGridView)

            ' Ustaw właściwość Visible na False dla copyMenuItem
            copyMenuItem.Visible = False
            copyMenuItem1.Visible = False
            copyMenuItem2.Visible = False
            copyMenuItem3.Visible = False
            copyMenuItem4.Visible = False
            copyMenuItem5.Visible = False

        End If
    End Sub

    Private Sub DataGridView1_CellMouseDown(sender As Object, e As DataGridViewCellMouseEventArgs) Handles DataGridView1.CellMouseDown
        If e.Button = MouseButtons.Right AndAlso e.RowIndex >= 0 AndAlso e.ColumnIndex >= 0 Then
            Dim columnName As String = DataGridView1.Columns(e.ColumnIndex).Name
            If columnName = "Toner BK" Or columnName = "Toner Y" Or columnName = "Toner M" Or columnName = "Toner C" Or columnName = "%BK" Or columnName = "%Y" Or columnName = "%M" Or columnName = "%C" Then

                DataGridView1.CurrentCell = DataGridView1.Rows(e.RowIndex).Cells(e.ColumnIndex)
                copyMenuItem.Visible = False ' Ukrycie elementu menu kontekstowego
                copyMenuItem1.Visible = False
                copyMenuItem2.Visible = False
                copyMenuItem3.Visible = False
                copyMenuItem4.Visible = False
                copyMenuItem5.Visible = False
            Else
                DataGridView1.CurrentCell = DataGridView1.Rows(e.RowIndex).Cells(e.ColumnIndex)
                copyMenuItem.Visible = True ' Wyświetlenie elementu menu kontekstowego
                copyMenuItem1.Visible = True
                copyMenuItem2.Visible = True
                copyMenuItem3.Visible = True
                copyMenuItem4.Visible = True
                copyMenuItem5.Visible = True
                copyMenuItem1.Tag = e.RowIndex ' Przechowaj indeks wiersza w Tag właściwości copyMenuItem1
            End If

            contextMenuStrip1.Show(MousePosition)
        End If
    End Sub

    ' MODYFIKACJA DANYCH DRUKARKI ZA POMOCĄ DWUKLIKU
    Private Sub DataGridView1_CellDoubleClick(sender As Object, e As DataGridViewCellEventArgs) Handles DataGridView1.CellDoubleClick
        ' Sprawdzenie, czy kliknięcie nie było na nagłówku kolumny
        If e.RowIndex >= 0 Then
            EdytujUrzadzenie(sender, e)
        End If
    End Sub


    ' MODYFIKACJA DANYCH DRUKARKI ZA POMOCĄ MENU EDYTUJ URZĄDZENIE
    Private Sub copyMenuItem3_Click(sender As Object, e As EventArgs) Handles copyMenuItem3.Click
        EdytujUrzadzenie(sender, e)
    End Sub

    Private Function GetAllControls(container As Control) As IEnumerable(Of Control)
        Dim controls = container.Controls.Cast(Of Control)()
        Return controls.SelectMany(Function(ctrl) GetAllControls(ctrl)).Concat(controls)
    End Function

    'EXPORT DO PDF
    Private Sub ExportToPDF(dataGridView As DataGridView, filePath As String, selectedColumns As List(Of String))
        ' Obliczanie sum kolumn Licznik M i Licznik K
        Dim sumLicznikM As Decimal = 0
        Dim sumLicznikK As Decimal = 0
        Dim totalDevices As Integer = 0

        ' Przechodzenie przez wiersze DataGridView w celu obliczenia sum
        For Each row As DataGridViewRow In dataGridView.Rows
            If Not row.IsNewRow Then
                totalDevices += 1 ' Liczba urządzeń
                ' Dodawanie wartości z kolumny "Licznik M"
                If selectedColumns.Contains("Licznik M") AndAlso row.Cells("Licznik M").Value IsNot Nothing Then
                    Dim licznikMValue As Decimal
                    If Decimal.TryParse(row.Cells("Licznik M").Value.ToString(), licznikMValue) Then
                        sumLicznikM += licznikMValue
                    End If
                End If
                ' Dodawanie wartości z kolumny "Licznik K"
                If selectedColumns.Contains("Licznik K") AndAlso row.Cells("Licznik K").Value IsNot Nothing Then
                    Dim licznikKValue As Decimal
                    If Decimal.TryParse(row.Cells("Licznik K").Value.ToString(), licznikKValue) Then
                        sumLicznikK += licznikKValue
                    End If
                End If
            End If
        Next

        ' Ustawienie mniejszych marginesów: 10 jednostek dla lewej i prawej, 100 jednostek dla górnej, 30 dla dolnej
        Using document As New Document(PageSize.A4.Rotate(), 10, 10, 150, 30)
            Dim writer As PdfWriter = PdfWriter.GetInstance(document, New FileStream(filePath, FileMode.Create))
            document.Open()

            ' Tworzenie obiektu klasy MyPageEvents i przypisanie danych do nagłówka
            Dim pageEvents As New MyPageEvents()
            pageEvents.ReportDateTime = DateTime.Now ' Data i godzina generowania raportu
            pageEvents.TotalDevices = totalDevices ' Liczba urządzeń
            pageEvents.LicznikMSum = sumLicznikM ' Suma Licznika M
            pageEvents.LicznikKSum = sumLicznikK ' Suma Licznika K
            pageEvents.HeaderFontSize = 10 ' Ustawienie rozmiaru czcionki
            writer.PageEvent = pageEvents

            ' Ścieżka do czcionki (np. Calibri.ttf lub inna obsługująca polskie znaki)
            Dim fontPath As String = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Calibri.ttf")
            Dim baseFont As BaseFont = BaseFont.CreateFont(fontPath, BaseFont.IDENTITY_H, BaseFont.EMBEDDED)
            Dim headerFont As New iTextSharp.text.Font(baseFont, 9, iTextSharp.text.Font.BOLD)
            Dim cellFont As New iTextSharp.text.Font(baseFont, 8, iTextSharp.text.Font.NORMAL)

            ' Tworzenie tabeli o liczbie kolumn równej liczbie wybranych kolumn + 1 (dla numeru porządkowego)
            Dim table As New PdfPTable(selectedColumns.Count + 1)

            ' Słownik przechowujący szerokości kolumn dla ich nazw
            Dim columnWidthsByName As New Dictionary(Of String, Single) From {
            {"Lp.", 0.3F},
            {"Adres", 0.8F},
            {"Nazwa hosta", 1.2F},
            {"Urządzenie", 2.0F},
            {"Nr seryjny", 1.0F},
            {"MAC", 1.0F},
            {"Miejsce postoju", 1.0F},
            {"Dodatkowe informacje", 1.4F},
            {"Licznik M", 0.6F},
            {"Licznik K", 0.6F},
            {"%BK", 0.4F},
            {"%Y", 0.4F},
            {"%M", 0.4F},
            {"%C", 0.4F}
        }

            ' Ustawienie szerokości kolumn na podstawie nazw
            Dim columnWidths As Single() = New Single(selectedColumns.Count) {}

            ' Ustawienie szerokości dla kolumny z numerem porządkowym
            columnWidths(0) = columnWidthsByName("Lp.")

            ' Ustawienie szerokości dla wybranych kolumn na podstawie nazw
            For i As Integer = 1 To selectedColumns.Count
                Dim columnName As String = selectedColumns(i - 1)
                If columnWidthsByName.ContainsKey(columnName) Then
                    columnWidths(i) = columnWidthsByName(columnName)
                Else
                    columnWidths(i) = 1.0F ' Domyślna szerokość, jeśli brak dopasowania nazwy kolumny
                End If
            Next

            ' Ustawienie szerokości tabeli na 100% dostępnej przestrzeni
            table.WidthPercentage = 100

            ' Ustawienie proporcji szerokości kolumn
            table.SetWidths(columnWidths)

            ' Dodanie nagłówka dla kolumny z numerem porządkowym
            Dim headerCell As New PdfPCell(New Phrase("Lp.", headerFont))
            headerCell.HorizontalAlignment = Element.ALIGN_CENTER
            headerCell.BackgroundColor = BaseColor.LIGHT_GRAY ' Opcjonalnie: kolor tła nagłówków
            table.AddCell(headerCell)

            ' Dodanie nagłówków dla pozostałych kolumn
            For Each column In selectedColumns
                Dim headerCellData As New PdfPCell(New Phrase(column, headerFont))
                headerCellData.HorizontalAlignment = Element.ALIGN_CENTER
                headerCellData.BackgroundColor = BaseColor.LIGHT_GRAY ' Opcjonalnie: kolor tła nagłówków
                table.AddCell(headerCellData)
            Next

            ' Ustawienie liczby wierszy nagłówka, aby powtarzały się na każdej stronie
            table.HeaderRows = 1 ' Pierwszy wiersz to nagłówek, który będzie powtarzany na każdej stronie

            ' Dodanie wierszy danych
            Dim rowIndex As Integer = 1 ' Zmienna do numerowania wierszy
            For Each row As DataGridViewRow In dataGridView.Rows
                If Not row.IsNewRow Then
                    ' Dodanie komórki z numerem porządkowym
                    Dim orderCell As New PdfPCell(New Phrase(rowIndex.ToString(), cellFont))
                    orderCell.HorizontalAlignment = Element.ALIGN_CENTER
                    table.AddCell(orderCell)

                    ' Dodanie pozostałych danych
                    For Each column In selectedColumns
                        Dim cellText As String = If(row.Cells(column).Value IsNot Nothing, row.Cells(column).Value.ToString(), String.Empty)
                        Dim dataCell As New PdfPCell(New Phrase(cellText, cellFont))
                        dataCell.HorizontalAlignment = Element.ALIGN_LEFT ' Wyrównanie tekstu w komórce
                        table.AddCell(dataCell)
                    Next
                    rowIndex += 1 ' Zwiększenie numeru porządkowego
                End If
            Next

            ' Dodanie tabeli do dokumentu
            document.Add(table)

            ' Zamykanie dokumentu
            document.Close()
        End Using
    End Sub

    'EXPORT DO XLSX Z UŻYCIEM ClosedXML
    Public Sub ExportToExcel(dataGridView As DataGridView, filePath As String, selectedColumns As List(Of String))

        ' Tworzymy nowy plik Excel przy użyciu ClosedXML
        Dim wb As New ClosedXML.Excel.XLWorkbook()
        Dim ws As ClosedXML.Excel.IXLWorksheet = wb.Worksheets.Add("Zestawienie aktualnych urządzeń")

        ' Styl dla nagłówków (pogrubiony tekst)
        Dim headerStyle As ClosedXML.Excel.IXLStyle = wb.Style
        headerStyle.Font.Bold = True

        ' Pobranie aktualnej daty i godziny
        Dim reportDateTime As String = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")

        ' Obliczenie liczby urządzeń i sumy dla kolumn „Licznik M” i „Licznik K”
        Dim totalDevices As Integer = dataGridView.Rows.Count
        Dim licznikMSum As Decimal = 0
        Dim licznikKSum As Decimal = 0

        For Each row As DataGridViewRow In dataGridView.Rows
            If Not row.IsNewRow Then
                Dim licznikMValue As Decimal
                Dim licznikKValue As Decimal

                ' Sprawdzenie i dodanie wartości Licznik M
                If Decimal.TryParse(row.Cells("Licznik M").Value?.ToString(), licznikMValue) Then
                    licznikMSum += licznikMValue
                End If

                ' Sprawdzenie i dodanie wartości Licznik K
                If Decimal.TryParse(row.Cells("Licznik K").Value?.ToString(), licznikKValue) Then
                    licznikKSum += licznikKValue
                End If
            End If
        Next

        ' Dodajemy nagłówki raportu w wyższych wierszach
        ws.Cell(1, 1).Value = "Data i godzina sporządzenia raportu:"
        ws.Cell(1, 2).Value = reportDateTime
        ws.Range(1, 1, 1, 2).Style = headerStyle ' Ustawienie pogrubionego stylu dla nagłówka

        ws.Cell(2, 1).Value = "Liczba urządzeń:"
        ws.Cell(2, 2).Value = totalDevices
        ws.Range(2, 1, 2, 2).Style = headerStyle ' Ustawienie pogrubionego stylu dla nagłówka

        ws.Cell(3, 1).Value = "Suma Licznika M dla wszystkich urządzeń:"
        ws.Cell(3, 2).Value = licznikMSum
        ws.Range(3, 1, 3, 2).Style = headerStyle ' Ustawienie pogrubionego stylu dla nagłówka

        ws.Cell(4, 1).Value = "Suma Licznika K dla wszystkich urządzeń:"
        ws.Cell(4, 2).Value = licznikKSum
        ws.Range(4, 1, 4, 2).Style = headerStyle ' Ustawienie pogrubionego stylu dla nagłówka

        ' Dodajemy nagłówki kolumn z danych (zaczynając od wiersza 6, poniżej informacji o raporcie)
        For i As Integer = 0 To selectedColumns.Count - 1
            ws.Cell(6, i + 1).Value = selectedColumns(i)
            ws.Cell(6, i + 1).Style = headerStyle ' Nagłówki kolumn także będą pogrubione
        Next

        ' Dodajemy dane z wybranych kolumn (zaczynając od wiersza 7, poniżej nagłówków kolumn)
        For rowIndex As Integer = 0 To dataGridView.Rows.Count - 1
            If Not dataGridView.Rows(rowIndex).IsNewRow Then
                For columnIndex As Integer = 0 To selectedColumns.Count - 1
                    Dim columnName As String = selectedColumns(columnIndex)
                    ws.Cell(rowIndex + 7, columnIndex + 1).Value = dataGridView.Rows(rowIndex).Cells(columnName).Value?.ToString()
                Next
            End If
        Next

        ' Automatyczne dopasowanie szerokości kolumn do zawartości
        ws.Columns().AdjustToContents()

        ' Zapisujemy plik Excel
        wb.SaveAs(filePath)

    End Sub

    ' Funkcja szyfrująca tekst (np. hasło)
    Private Function EncryptString(plainText As String, key As String) As String
        If String.IsNullOrEmpty(plainText) Then Return String.Empty

        Dim aes As New AesCryptoServiceProvider()
        Dim iv As Byte() = aes.IV
        Dim encrypted As Byte()

        Using encryptor As ICryptoTransform = aes.CreateEncryptor(Encoding.UTF8.GetBytes(key), iv)
            Using ms As New System.IO.MemoryStream()
                Using cs As New CryptoStream(ms, encryptor, CryptoStreamMode.Write)
                    Using sw As New System.IO.StreamWriter(cs)
                        sw.Write(plainText)
                    End Using
                End Using
                encrypted = ms.ToArray()
            End Using
        End Using

        ' Połącz IV i zaszyfrowane dane
        Dim combined As Byte() = New Byte(iv.Length + encrypted.Length - 1) {}
        Buffer.BlockCopy(iv, 0, combined, 0, iv.Length)
        Buffer.BlockCopy(encrypted, 0, combined, iv.Length, encrypted.Length)

        ' Zakoduj w Base64 i zwróć
        Return Convert.ToBase64String(combined)
    End Function

    ' Funkcja deszyfrująca tekst
    Private Function DecryptString(encryptedText As String, key As String) As String
        If String.IsNullOrEmpty(encryptedText) Then Return String.Empty

        Dim combined As Byte() = Convert.FromBase64String(encryptedText)
        Dim iv As Byte() = New Byte(15) {} ' IV ma zawsze 16 bajtów dla AES
        Dim encrypted As Byte() = New Byte(combined.Length - 17) {}

        Buffer.BlockCopy(combined, 0, iv, 0, iv.Length)
        Buffer.BlockCopy(combined, iv.Length, encrypted, 0, encrypted.Length)

        Dim aes As New AesCryptoServiceProvider()
        Dim decrypted As String

        Using decryptor As ICryptoTransform = aes.CreateDecryptor(Encoding.UTF8.GetBytes(key), iv)
            Using ms As New System.IO.MemoryStream(encrypted)
                Using cs As New CryptoStream(ms, decryptor, CryptoStreamMode.Read)
                    Using sr As New System.IO.StreamReader(cs)
                        decrypted = sr.ReadToEnd()
                    End Using
                End Using
            End Using
        End Using

        Return decrypted
    End Function

    ' ZAPIS USTAWIEŃ DANYCH DO POŁĄCZENIA Z BAZĄ DANYCH
    Public Sub SaveConnectData(connect As dbConnect)
        Try
            ' Szyfruj hasło przed zapisaniem
            connect.connectToServerPassword = EncryptString(connect.connectToServerPassword, encryptionKey)
            Dim json As String = JsonConvert.SerializeObject(connect, Formatting.Indented)
            File.WriteAllText(connectFilePath, json)
        Catch ex As Exception
            Logger.Log("Błąd podczas zapisywania danych połączenia z bazą danych: " & ex.Message)
        End Try
    End Sub

    ' ODCZYT USTAWIEŃ DANYCH DO POŁĄCZENIA Z BAZĄ DANYCH
    Public Function LoadConnectData() As dbConnect
        If File.Exists(connectFilePath) Then
            ' Wczytanie JSON z pliku
            Dim jsonConnect As String = File.ReadAllText(connectFilePath)
            Dim connect As dbConnect = JsonConvert.DeserializeObject(Of dbConnect)(jsonConnect)

            ' Sprawdzenie, czy connect został prawidłowo zdeserializowany
            If connect Is Nothing Then
                ' Jeśli deserializacja nie powiodła się, ustaw domyślne wartości
                Dim defaultData As dbConnect = GetDefaultConnectData()
                SaveConnectData(defaultData)
                Return defaultData
            End If

            ' Odszyfruj hasło tylko, jeśli istnieje zaszyfrowane hasło
            If Not String.IsNullOrEmpty(connect.connectToServerPassword) Then
                connect.connectToServerPassword = DecryptString(connect.connectToServerPassword, encryptionKey)
            End If

            Return connect
        Else
            ' Plik nie istnieje, ustaw i zapisz domyślne wartości
            Dim defaultData As dbConnect = GetDefaultConnectData()
            SaveConnectData(defaultData)
            Return defaultData
        End If
    End Function


    ' DOMYŚLNE WPISY W dbConnect.json
    Private Function GetDefaultConnectData() As dbConnect
        Return New dbConnect With {
        .connectToServerHost = "",
        .connectToServerUsername = "",
        .connectToServerPassword = "",
        .connectToServerDatabase = "",
        .connectToServerKlient = ""
        }
    End Function


    ' ZAPIS USTAWIEŃ PROGRAMU
    Public Sub SaveSettings(settings As AppSettings)
        Try
            Dim json As String = JsonConvert.SerializeObject(settings, Formatting.Indented)
            File.WriteAllText(settingsFilePath, json)
        Catch ex As Exception
            Logger.Log("Błąd podczas zapisywania ustawień: " & ex.Message)
        End Try
    End Sub


    ' ODCZYT USTAWIEŃ PROGRAMU
    Public Function LoadSettings() As AppSettings
        Try
            If File.Exists(settingsFilePath) Then
                Dim json As String = File.ReadAllText(settingsFilePath)
                Dim settings As AppSettings = JsonConvert.DeserializeObject(Of AppSettings)(json)

                ' Jeśli obiekt `settings` jest pusty, ustaw domyślne wartości
                If settings Is Nothing Then
                    Dim defaultSettings As AppSettings = GetDefaultSettingsAll()
                    SaveSettings(defaultSettings)
                    Return defaultSettings
                Else
                    ' Sprawdzenie każdej właściwości w `settings`
                    ' Dla wartości logicznych (Boolean), używaj sprawdzenia `Is Nothing` dla nullable typu

                    ' Sprawdzenie wartości nullable
                    If settings.sposobOdczytuAuto Is Nothing Then settings.sposobOdczytuAuto = True
                    If settings.sposobOdczytuManual Is Nothing Then settings.sposobOdczytuManual = False
                    If settings.odczytAuto Is Nothing Then settings.odczytAuto = True
                    If settings.odczytManual Is Nothing Then settings.odczytManual = False

                    ' Sprawdzanie wartości liczbowych
                    If settings.odczytIloscOdczytow <= 0 Then settings.odczytIloscOdczytow = 4
                    If settings.odczytHoursPierwszyOdczyt < 0 OrElse settings.odczytHoursPierwszyOdczyt > 23 Then settings.odczytHoursPierwszyOdczyt = 8
                    If settings.odczytMinutesPierwszyOdczyt < 0 OrElse settings.odczytMinutesPierwszyOdczyt > 59 Then settings.odczytMinutesPierwszyOdczyt = 0

                    ' Sprawdzanie daty
                    If settings.odczytOstatniOdczyt = DateTime.MinValue Then settings.odczytOstatniOdczyt = DateTime.Now

                    ' Sprawdzenie dla wartości logicznych, użycie `Is Nothing`
                    If settings.slownikMiejscePostojuON Is Nothing Then settings.slownikMiejscePostojuON = False
                    If settings.slownikDodatkoweInfoON Is Nothing Then settings.slownikDodatkoweInfoON = False
                    If settings.kolumnaNazwaHostaON Is Nothing Then settings.kolumnaNazwaHostaON = False
                    If settings.kolumnaDodatkoweInfoON Is Nothing Then settings.kolumnaDodatkoweInfoON = False
                    If settings.kolumnaMacON Is Nothing Then settings.kolumnaMacON = False
                    If settings.kolumnaLicznikMonoON Is Nothing Then settings.kolumnaLicznikMonoON = True
                    If settings.kolumnaLicznikKolorON Is Nothing Then settings.kolumnaLicznikKolorON = True
                    If settings.kolumnaTonerBkON Is Nothing Then settings.kolumnaTonerBkON = True
                    If settings.kolumnaBkPercentON Is Nothing Then settings.kolumnaBkPercentON = True
                    If settings.kolumnaTonerYON Is Nothing Then settings.kolumnaTonerYON = True
                    If settings.kolumnaYPercentON Is Nothing Then settings.kolumnaYPercentON = True
                    If settings.kolumnaTonerMON Is Nothing Then settings.kolumnaTonerMON = True
                    If settings.kolumnaMPercentON Is Nothing Then settings.kolumnaMPercentON = True
                    If settings.kolumnaTonerCON Is Nothing Then settings.kolumnaTonerCON = True
                    If settings.kolumnaCPercentON Is Nothing Then settings.kolumnaCPercentON = True
                    If settings.kolumnaSortAdresAscON Is Nothing Then settings.kolumnaSortAdresAscON = False
                    If settings.kolumnaSortAdresDescON Is Nothing Then settings.kolumnaSortAdresDescON = False
                    If settings.kolumnaSortNazwaHostaAscON Is Nothing Then settings.kolumnaSortNazwaHostaAscON = False
                    If settings.kolumnaSortNazwaHostaDescON Is Nothing Then settings.kolumnaSortNazwaHostaDescON = False
                    If settings.kolumnaSortUrzadzenieAscON Is Nothing Then settings.kolumnaSortUrzadzenieAscON = False
                    If settings.kolumnaSortUrzadzenieDescON Is Nothing Then settings.kolumnaSortUrzadzenieDescON = False
                    If settings.kolumnaSortSerialAscON Is Nothing Then settings.kolumnaSortSerialAscON = False
                    If settings.kolumnaSortSerialDescON Is Nothing Then settings.kolumnaSortSerialDescON = False
                    If settings.kolumnaSortMiejscePostojuAscON Is Nothing Then settings.kolumnaSortMiejscePostojuAscON = False
                    If settings.kolumnaSortMiejscePostojuDescON Is Nothing Then settings.kolumnaSortMiejscePostojuDescON = False
                    If settings.kolumnaSortDodatkoweInfoAscON Is Nothing Then settings.kolumnaSortDodatkoweInfoAscON = False
                    If settings.kolumnaSortDodatkoweInfoDescON Is Nothing Then settings.kolumnaSortDodatkoweInfoDescON = False

                    ' Po wprowadzeniu poprawek zapisujemy ustawienia zaktualizowane domyślnymi wartościami (opcjonalnie)
                    ' SaveSettings(settings)
                End If

                Return settings
            Else
                ' Plik nie istnieje, ustaw i zapisz domyślne wartości
                Dim defaultSettings As AppSettings = GetDefaultSettingsAll()
                SaveSettings(defaultSettings)
                Return defaultSettings
            End If
        Catch ex As Exception
            MessageBox.Show("Błąd podczas odczytywania ustawień: " & ex.Message)
            ' W przypadku błędu zwróć domyślne ustawienia
            Return GetDefaultSettingsAll()
        End Try
    End Function

    ' USTAWIENIA DOMYŚLNE WSZYSTKIE
    Private Function GetDefaultSettingsAll() As AppSettings
        Return New AppSettings With {
        .sposobOdczytuAuto = True,
        .sposobOdczytuManual = False,
        .odczytAuto = True,
        .odczytManual = False,
        .odczytIloscOdczytow = 4,
        .odczytHoursPierwszyOdczyt = 8,
        .odczytMinutesPierwszyOdczyt = 0,
        .odczytOstatniOdczyt = DateTime.Now,
        .slownikMiejscePostojuON = False,
        .slownikDodatkoweInfoON = False,
        .kolumnaNazwaHostaON = False,
        .kolumnaDodatkoweInfoON = False,
        .kolumnaMacON = False,
        .kolumnaLicznikMonoON = True,
        .kolumnaLicznikKolorON = True,
        .kolumnaTonerBkON = True,
        .kolumnaBkPercentON = True,
        .kolumnaTonerYON = True,
        .kolumnaYPercentON = True,
        .kolumnaTonerMON = True,
        .kolumnaMPercentON = True,
        .kolumnaTonerCON = True,
        .kolumnaCPercentON = True,
        .kolumnaSortAdresAscON = False,
        .kolumnaSortAdresDescON = False,
        .kolumnaSortNazwaHostaAscON = False,
        .kolumnaSortNazwaHostaDescON = False,
        .kolumnaSortUrzadzenieAscON = False,
        .kolumnaSortUrzadzenieDescON = False,
        .kolumnaSortSerialAscON = False,
        .kolumnaSortSerialDescON = False,
        .kolumnaSortMiejscePostojuAscON = False,
        .kolumnaSortMiejscePostojuDescON = False,
        .kolumnaSortDodatkoweInfoAscON = False,
        .kolumnaSortDodatkoweInfoDescON = False
    }
    End Function

    ' USTAWIENIA DOMYŚLNE
    Private Function GetDefaultSettingsForSetings() As AppSettings
        Return New AppSettings With {
        .sposobOdczytuAuto = True,
        .sposobOdczytuManual = False,
        .odczytAuto = True,
        .odczytManual = False,
        .odczytIloscOdczytow = 4,
        .odczytHoursPierwszyOdczyt = 8,
        .odczytMinutesPierwszyOdczyt = 0,
        .odczytOstatniOdczyt = DateTime.Now,
        .slownikMiejscePostojuON = False,
        .slownikDodatkoweInfoON = False,
        .kolumnaNazwaHostaON = False,
        .kolumnaDodatkoweInfoON = False,
        .kolumnaMacON = False,
        .kolumnaLicznikMonoON = True,
        .kolumnaLicznikKolorON = True,
        .kolumnaTonerBkON = True,
        .kolumnaBkPercentON = True,
        .kolumnaTonerYON = True,
        .kolumnaYPercentON = True,
        .kolumnaTonerMON = True,
        .kolumnaMPercentON = True,
        .kolumnaTonerCON = True,
        .kolumnaCPercentON = True,
        .kolumnaSortAdresAscON = False,
        .kolumnaSortAdresDescON = False,
        .kolumnaSortNazwaHostaAscON = False,
        .kolumnaSortNazwaHostaDescON = False,
        .kolumnaSortUrzadzenieAscON = False,
        .kolumnaSortUrzadzenieDescON = False,
        .kolumnaSortSerialAscON = False,
        .kolumnaSortSerialDescON = False,
        .kolumnaSortMiejscePostojuAscON = False,
        .kolumnaSortMiejscePostojuDescON = False,
        .kolumnaSortDodatkoweInfoAscON = False,
        .kolumnaSortDodatkoweInfoDescON = False
    }
    End Function

    ' USTAWIENIA DOMYŚLNE DLA KOLUMN
    Private Function GetDefaultSettingsForKolumns() As AppSettings
        Return New AppSettings With {
        .kolumnaNazwaHostaON = False,
        .kolumnaDodatkoweInfoON = False,
        .kolumnaMacON = False,
        .kolumnaLicznikMonoON = True,
        .kolumnaLicznikKolorON = True,
        .kolumnaTonerBkON = True,
        .kolumnaBkPercentON = True,
        .kolumnaTonerYON = True,
        .kolumnaYPercentON = True,
        .kolumnaTonerMON = True,
        .kolumnaMPercentON = True,
        .kolumnaTonerCON = True,
        .kolumnaCPercentON = True,
        .kolumnaSortAdresAscON = False,
        .kolumnaSortAdresDescON = False,
        .kolumnaSortNazwaHostaAscON = False,
        .kolumnaSortNazwaHostaDescON = False,
        .kolumnaSortUrzadzenieAscON = False,
        .kolumnaSortUrzadzenieDescON = False,
        .kolumnaSortSerialAscON = False,
        .kolumnaSortSerialDescON = False,
        .kolumnaSortMiejscePostojuAscON = False,
        .kolumnaSortMiejscePostojuDescON = False,
        .kolumnaSortDodatkoweInfoAscON = False,
        .kolumnaSortDodatkoweInfoDescON = False
    }
    End Function

    ' FUNKCJA DO URUCHAMIANIA HARMONOGRAMU
    Sub StartScheduler()

        'Jeśli jest włączona opcja automatycznego odczytu urządzeń to scheduler zadziała
        If settings.odczytAuto Then


            ' Zatrzymaj istniejący harmonogram, jeśli istnieje
            StopScheduler()

            Dim now As DateTime = DateTime.Now
            Dim initialRunTime As DateTime

            ' DAŁEM TAKIE ZABEZPIECZENIE BO SPORADYCZNIE PRZY TESTACH ZAPISYWAŁA SIĘ DZIWNA GODZINA, NIE WIEM CZEMU
            If settings.odczytHoursPierwszyOdczyt >= 0 AndAlso settings.odczytHoursPierwszyOdczyt <= 23 AndAlso settings.odczytMinutesPierwszyOdczyt >= 0 AndAlso settings.odczytMinutesPierwszyOdczyt <= 59 Then
                ' Sprawdź, czy zmieniły się ustawienia godziny pierwszego uruchomienia
                If settings.odczytHoursPierwszyOdczyt <> settings.odczytOstatniZnanyHoursPierwszyOdczyt Or settings.odczytMinutesPierwszyOdczyt <> settings.odczytOstatniZnanyMinutesPierwszyOdczyt Then
                    ' Jeśli godzina pierwszego odczytu się zmieniła, ustaw nowy czas uruchomienia na podstawie nowych ustawień
                    initialRunTime = New DateTime(now.Year, now.Month, now.Day, settings.odczytHoursPierwszyOdczyt, settings.odczytMinutesPierwszyOdczyt, 0)


                    ' Zaktualizuj znane ustawienia pierwszego uruchomienia
                    settings.odczytOstatniZnanyHoursPierwszyOdczyt = settings.odczytHoursPierwszyOdczyt
                    settings.odczytOstatniZnanyMinutesPierwszyOdczyt = settings.odczytMinutesPierwszyOdczyt
                    ' Zapisz nowe ustawienia
                    SaveSettings(settings)


                    ' Jeśli nowy czas uruchomienia jest w przeszłości, ustaw na jutro
                    If initialRunTime < now Then
                        initialRunTime = initialRunTime.AddDays(1)
                    End If
                ElseIf settings.odczytOstatniOdczyt <> DateTime.MinValue Then
                    ' Kontynuuj harmonogram od czasu ostatniego uruchomienia
                    initialRunTime = settings.odczytOstatniOdczyt.AddMinutes(settings.odczytIloscOdczytow)

                    ' Oblicz ile pełnych interwałów minęło od ostatniego odczytu
                    Dim elapsedTime As TimeSpan = now - settings.odczytOstatniOdczyt
                    Dim passedIntervals As Integer = Math.Floor(elapsedTime.TotalHours / settings.odczytIloscOdczytow)

                    ' Jeżeli minęło więcej niż jeden interwał, ustaw harmonogram na kolejny dostępny czas
                    If passedIntervals > 0 Then
                        initialRunTime = initialRunTime.AddMinutes(passedIntervals * settings.odczytIloscOdczytow)
                    End If
                Else
                    ' Ustaw pierwszy odczyt na podstawie ustawień
                    initialRunTime = New DateTime(now.Year, now.Month, now.Day, settings.odczytHoursPierwszyOdczyt, settings.odczytMinutesPierwszyOdczyt, 0)

                    If initialRunTime < now Then
                        initialRunTime = initialRunTime.AddDays(1)
                    End If
                End If

                Dim timeToFirstRun As TimeSpan = initialRunTime - now

                ' Jeżeli czas do pierwszego uruchomienia jest w przeszłości, zaplanuj na najbliższy interwał
                If timeToFirstRun.TotalMilliseconds < 0 Then
                    ' Oblicz następny dostępny czas na podstawie interwału
                    initialRunTime = now.AddMinutes(settings.odczytIloscOdczytow)
                    timeToFirstRun = initialRunTime - now
                End If

                ' Ustaw timer na wykonanie pierwszego odczytu
                odczytTimer = New System.Timers.Timer(timeToFirstRun.TotalMilliseconds)
                AddHandler odczytTimer.Elapsed, AddressOf RunFirstOdczyt
                odczytTimer.AutoReset = False
                odczytTimer.Start()
            End If
        End If
    End Sub

    Sub StopScheduler()
        If odczytTimer IsNot Nothing Then
            odczytTimer.Stop()
            odczytTimer.Dispose()
            odczytTimer = Nothing
        End If
    End Sub

    'PIERWSZE URUCHOMIENIE HARMONOGRAMU
    Sub RunFirstOdczyt(sender As Object, e As System.Timers.ElapsedEventArgs)
        ' Uruchom funkcję odczytu danych
        UpdateDataSafely()

        ' Ustawienie interwału na podstawie wybranej liczby godzin
        Dim odczytIntervalHours As Integer = settings.odczytIloscOdczytow
        Dim interval As Double = TimeSpan.FromMinutes(odczytIntervalHours).TotalMilliseconds

        ' Ustawienie timera do cyklicznego odczytu
        If interval > 0 Then
            odczytTimer.Interval = interval
            odczytTimer.AutoReset = True
            odczytTimer.Start()
        Else
            odczytTimer.Stop()
        End If
    End Sub

    ' Bezpieczne wywołanie aktualizacji danych z wątku UI
    Sub UpdateDataSafely()
        ' Aktualizuj czas ostatniego uruchomienia
        settings.odczytOstatniOdczyt = DateTime.Now
        SaveSettings(settings)
        If Me.InvokeRequired Then
            Me.Invoke(New MethodInvoker(AddressOf UpdateDataInTable))
        Else
            UpdateDataInTable()
        End If
        ' Po zaktualizowaniu danych, uruchom ponownie harmonogram
        StartScheduler()
    End Sub

    ' Obsługa zamknięcia formularza detailsForm
    Private Sub OnDetailsFormClosed(sender As Object, e As FormClosedEventArgs)
        ' Przywrócenie oryginalnego koloru przycisku btnDodaj
        Me.btnRefresh.BackColor = originalColorButtonsMenu
        Me.btnTransfer.BackColor = originalColorButtonsMenu
        Me.btnDodaj.BackColor = originalColorButtonsMenu
        Me.btnSzukaj.BackColor = originalColorButtonsMenu
        Me.btnTools.BackColor = originalColorButtonsMenu
        Me.btnUstawienia.BackColor = originalColorButtonsMenu
        Me.btnHelp.BackColor = originalColorButtonsMenu
    End Sub

    ' ZACHOWANIE PRZYCISKÓW MENU
    ' Obsługa zdarzenia MouseEnter - ustawienie koloru na biały po najechaniu myszką
    '  Private Sub Button_MouseEnter(sender As Object, e As EventArgs) Handles btnRefresh.MouseEnter, btnTransfer.MouseEnter, btnDodaj.MouseEnter, btnSzukaj.MouseEnter, btnTools.MouseEnter, btnUstawienia.MouseEnter, btnHelp.MouseEnter
    '      Dim btn As Button = DirectCast(sender, Button)
    '
    '      If Not originalStyles.ContainsKey(btn) Then
    '          originalStyles(btn) = Tuple.Create(btn.Font, btn.Location, btn.BackColor, btn.Size, btn.FlatAppearance.BorderSize)
    '      End If
    '
    '      ' Ustawienie stylu Flat i koloru na biały
    '      btn.FlatStyle = FlatStyle.Flat
    '      btn.FlatAppearance.BorderSize = 0
    '      btn.BackColor = Color.White
    '      btn.FlatAppearance.MouseOverBackColor = Color.White
    '      btn.FlatAppearance.MouseDownBackColor = Color.White
    '  End Sub
    '
    '  ' Obsługa zdarzenia MouseLeave - przywracanie oryginalnych kolorów
    '  Private Sub Button_MouseLeave(sender As Object, e As EventArgs) Handles btnRefresh.MouseLeave, btnTransfer.MouseLeave, btnDodaj.MouseLeave, btnSzukaj.MouseLeave, btnTools.MouseLeave, btnUstawienia.MouseLeave, btnHelp.MouseLeave
    '      Dim btn As Button = DirectCast(sender, Button)
    '
    '      If originalStyles.ContainsKey(btn) Then
    '          btn.BackColor = originalStyles(btn).Item3
    '          btn.FlatAppearance.BorderSize = originalStyles(btn).Item5
    '          btn.FlatAppearance.MouseOverBackColor = originalStyles(btn).Item3
    '          btn.FlatAppearance.MouseDownBackColor = originalStyles(btn).Item3
    '      End If
    '  End Sub
    '
    '  ' Obsługa zdarzenia MouseDown - zmiana koloru na biały po kliknięciu
    '  Private Sub Button_MouseDown(sender As Object, e As MouseEventArgs) Handles btnRefresh.MouseDown, btnTransfer.MouseDown, btnDodaj.MouseDown, btnSzukaj.MouseDown, btnTools.MouseDown, btnUstawienia.MouseDown, btnHelp.MouseDown
    '      Dim btn As Button = DirectCast(sender, Button)
    '
    '      btn.FlatStyle = FlatStyle.Flat
    '      btn.FlatAppearance.BorderSize = 0
    '      btn.BackColor = Color.White
    '      btn.FlatAppearance.MouseDownBackColor = Color.White
    '      btn.FlatAppearance.MouseOverBackColor = Color.White
    '  End Sub
    '
    '  ' Obsługa zdarzenia MouseUp - zmiana koloru po zwolnieniu przycisku
    '  Private Sub Button_MouseUp(sender As Object, e As MouseEventArgs) Handles btnRefresh.MouseUp, btnTransfer.MouseUp, btnDodaj.MouseUp, btnSzukaj.MouseUp, btnTools.MouseUp, btnUstawienia.MouseUp, btnHelp.MouseUp
    '      Dim btn As Button = DirectCast(sender, Button)
    '
    '      btn.FlatStyle = FlatStyle.Flat
    '      btn.FlatAppearance.BorderSize = 0
    '      btn.BackColor = Color.White
    '      btn.FlatAppearance.MouseDownBackColor = Color.White
    '      btn.FlatAppearance.MouseOverBackColor = Color.White
    '  End Sub



    ' ZACHOWANIE PRZYCISKÓW MENU SZUKAJ
    '  Private Sub btnMenuSzukaj_MouseEnter(sender As Object, e As EventArgs)
    '      Dim btn As Button = DirectCast(sender, Button)
    '      btn.Location = New System.Drawing.Point(btn.Location.X + 1, btn.Location.Y - 2)
    '      btn.Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, GraphicsUnit.Point, CType(238, Byte))
    '
    '  End Sub
    '
    '  ' Funkcja przywracająca oryginalny rozmiar przycisku po opuszczeniu myszą
    '  Private Sub btnMenuSzukaj_MouseLeave(sender As Object, e As EventArgs)
    '      Dim btn As Button = DirectCast(sender, Button)
    '      btn.Location = New System.Drawing.Point(btn.Location.X - 1, btn.Location.Y + 2)
    '      btn.Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, GraphicsUnit.Point, CType(238, Byte))
    '      btn.BackColor = Color.FromArgb(0, 68, 102)
    '      btn.ForeColor = Color.White
    '  End Sub

    ' Funkcja obsługująca zamknięcie formularza
    '   Private Sub OnDetailsFormClosed(sender As Object, e As FormClosedEventArgs)
    '
    '       Dim totalSerialNumbers As Integer = GetSerialNumberCount()
    '
    '       If totalSerialNumbers <= 0 Then
    '           btnRefresh.Enabled = False
    '           btnTransfer.Enabled = False
    '           btnDodaj.Enabled = True
    '           btnSzukaj.Enabled = True
    '           btnTools.Enabled = True
    '           btnUstawienia.Enabled = True
    '           btnHelp.Enabled = True
    '       Else
    '           ' Włączenie wszystkich przycisków po zamknięciu formularza
    '           btnRefresh.Enabled = True
    '           btnTransfer.Enabled = True
    '           btnDodaj.Enabled = True
    '           btnSzukaj.Enabled = True
    '           btnTools.Enabled = True
    '           btnUstawienia.Enabled = True
    '           btnHelp.Enabled = True
    '
    '           ' Resetowanie referencji do klikniętego przycisku
    '           clickedButton = Nothing
    '       End If
    '   End Sub

    '   Private Sub btn_Click(sender As Object, e As EventArgs) Handles btnSzukaj.Click, btnRefresh.Click, btnTransfer.Click, btnDodaj.Click, btnTools.Click, btnUstawienia.Click, btnHelp.Click
    '       ' Zapisanie referencji do klikniętego przycisku
    '       clickedButton = CType(sender, Button)
    '
    '       ' Wyłączenie wszystkich przycisków oprócz klikniętego
    '       For Each btn As Button In {btnRefresh, btnTransfer, btnDodaj, btnSzukaj, btnTools, btnUstawienia, btnHelp}
    '           If btn IsNot clickedButton Then
    '               btn.Enabled = False
    '           End If
    '       Next
    '   End Sub


    '  Private Sub btnMenuSzukaj_EnabledChanged(sender As Object, e As EventArgs)
    '      Dim btn As Button = DirectCast(sender, Button)
    '      If btn.Enabled Then
    '          btn.BackColor = Color.FromArgb(217, 217, 217) ' Oryginalny kolor tła
    '      Else
    '          btn.BackColor = Color.Red ' Kolor tła, gdy przycisk jest wyłączony
    '          btn.ForeColor = Color.FromArgb(204, 204, 204)
    '      End If
    '  End Sub
    ' Private Sub Timer1_Tick(sender As Object, e As EventArgs) Handles Timer1.Tick
    '    UpdateDataInTable()
    'End Sub

    Private Sub UpdatePanels()
        Dim totalSerialNumbers As Integer = GetSerialNumberCount()
        Dim currentDateTime As String = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")

        If totalSerialNumbers <= 0 Then
            LabelOnline.Visible = False
            LabelOnlineText.Text = ""
            LabelOnlineNapis.Visible = False
            LabelOffline.Visible = False
            LabelOfflineNapis.Visible = False
            LabelOfflineText.Text = ""
            btnRefresh.Enabled = False
            btnTransfer.Enabled = False
            TextBoxSzukajUrzadzenia.Visible = False

        ElseIf disaableBottomInfo Then

            LabelOnline.Visible = False
            LabelOnlineText.Visible = False
            LabelOnlineNapis.Visible = False
            LabelOffline.Visible = False
            LabelOfflineNapis.Visible = False
            LabelOfflineText.Visible = False
            LabelOstatniOdczyt.Visible = False
            LabelOstatniOdczytText.Visible = False
            LabelOstatniOdczytText.Visible = False
            LabelOstatniTransfer.Visible = False
            LabelOstatniTransferText.Visible = False
            LabelOstatniTransferText.Visible = False

        Else

            labelPanelBottomLiczbaAllText.Text = totalSerialNumbers
            LabelOnline.Visible = True
            LabelOnlineNapis.Visible = True
            LabelOnlineText.Visible = True
            LabelOnlineText.Text = statusCountOnline.ToString()
            LabelOffline.Visible = True
            LabelOfflineNapis.Visible = True
            LabelOfflineText.Visible = True
            LabelOfflineText.Text = statusCountOffline.ToString()
            LabelOstatniOdczyt.Visible = True
            LabelOstatniOdczytText.Visible = True
            LabelOstatniOdczytText.Text = currentDateTime
            LabelOstatniTransfer.Visible = True
            LabelOstatniTransferText.Visible = True
            LabelOstatniTransferText.Text = currentDateTime
            TextBoxSzukajUrzadzenia.Visible = True
        End If
        If Not File.Exists(filePath) Then
            btnRefresh.Enabled = False
            btnTransfer.Enabled = False
        End If

    End Sub

    ' Funkcja ograniczająca wprowadzanie tylko cyfr i kropek oraz ograniczenie do 3 cyfr w oktetach
    Private Sub RestrictToIpFormat(textBox As TextBox, e As KeyPressEventArgs)
        ' Dozwolone znaki: cyfry i kropki
        If Not Char.IsDigit(e.KeyChar) AndAlso e.KeyChar <> "."c AndAlso e.KeyChar <> ControlChars.Back Then
            e.Handled = True ' Blokuj inne znaki
            Return
        End If

        ' Ograniczenie do maksymalnie 3 cyfr w każdym oktecie
        Dim parts As String() = textBox.Text.Split("."c)
        Dim currentPart As String = parts.Last()

        If Char.IsDigit(e.KeyChar) Then
            ' Jeśli jest już 3 cyfry w aktualnym oktecie, blokuj wprowadzenie kolejnej
            If currentPart.Length >= 3 Then
                e.Handled = True
            End If
        ElseIf e.KeyChar = "."c Then
            ' Nie pozwól na więcej niż 3 kropki w sumie
            If parts.Length >= 4 Then
                e.Handled = True
            End If
        End If
    End Sub

    ' Funkcja walidująca adres IP
    Private Sub ValidateIp(textBox As TextBox, buttonZapisz As Button)
        Dim ipPattern As String = "^(\d{1,3}\.){3}\d{1,3}$" ' Wzorzec IP

        Dim input As String = textBox.Text
        Dim isValid As Boolean = False

        ' Sprawdzenie, czy tekst pasuje do wzorca IP
        If Regex.IsMatch(input, ipPattern) Then
            ' Sprawdzenie, czy oktety są w zakresie 0-255
            Dim oktety As String() = input.Split("."c)
            isValid = True

            For Each oktet As String In oktety
                Dim value As Integer
                If Integer.TryParse(oktet, value) Then
                    If value < 0 Or value > 255 Then
                        isValid = False
                        Exit For
                    End If
                Else
                    isValid = False
                    Exit For
                End If
            Next
        End If

        ' Zmiana koloru tła w zależności od poprawności
        If isValid Then
            textBox.BackColor = Color.LightGreen
            buttonZapisz.Enabled = True ' Włącz przycisk, jeśli adres IP jest prawidłowy
        Else
            textBox.BackColor = Color.LightCoral ' Niepoprawny adres
            buttonZapisz.Enabled = False ' Wyłącz przycisk, jeśli adres IP jest nieprawidłowy
        End If
    End Sub

    ' FUNKCJE SUBSTR 
    Private Function GetSubstring(value As String) As String
        If value.Contains("lpr://") Then
            ' Podziel wartość na części za pomocą "lpr://"
            Dim parts As String() = value.Split(New String() {"lpr://"}, StringSplitOptions.None)
            If parts.Length > 1 Then
                ' Weź drugą część i podziel ją za pomocą "." i "/"
                Dim subParts As String() = parts(1).Split(New Char() {"."c, "/"c}, StringSplitOptions.None)
                If subParts.Length > 0 Then
                    Return subParts(0).Trim()
                End If
            End If
        End If
        Return String.Empty
    End Function

    <DllImport("user32.dll", CharSet:=CharSet.Auto)>
    Private Shared Function SendMessage(ByVal hWnd As IntPtr, ByVal msg As Integer, ByVal wParam As IntPtr, ByVal lParam As String) As IntPtr
    End Function


    Private Const EM_SETCUEBANNER As Integer = &H1501
    Private Sub CenterTextBox()
        ' Oblicz nową pozycję TextBox, aby był wyśrodkowany w panelu
        Dim panelWidth As Integer = Me.Panel1.ClientSize.Width
        Dim panelHeight As Integer = Me.Panel1.ClientSize.Height
        Dim textBoxWidth As Integer = Me.TextBoxSzukajUrzadzenia.Width
        Dim textBoxHeight As Integer = Me.TextBoxSzukajUrzadzenia.Height
        Me.TextBoxSzukajUrzadzenia.Left = (panelWidth - textBoxWidth) - 10
        Me.TextBoxSzukajUrzadzenia.Top = (panelHeight - textBoxHeight) \ 2
        ProgressBar1.Size = New System.Drawing.Size(Panel1.Width / 3, 12)
        ProgressBar1.Location = New System.Drawing.Point(Panel1.Width / 3.5, 25)
        progressLabel.Location = New System.Drawing.Point((Panel1.Width + PanelMenu.Width) / 2.5, ProgressBar1.Bottom + 5)
        LabelOstatniOdczyt.Location = New System.Drawing.Point(PanelBottom.Width - PanelMenu.Width - 560, (PanelBottom.Height - LabelOstatniOdczyt.Height) / 2)
        LabelOstatniOdczytText.Location = New System.Drawing.Point(PanelBottom.Width - PanelMenu.Width - 400, (PanelBottom.Height - LabelOstatniOdczytText.Height) / 2)
        LabelOstatniTransfer.Location = New System.Drawing.Point(PanelBottom.Width - PanelMenu.Width - 220, (PanelBottom.Height - LabelOstatniTransfer.Height) / 2)
        LabelOstatniTransferText.Location = New System.Drawing.Point(PanelBottom.Width - PanelMenu.Width - 50, (PanelBottom.Height - LabelOstatniTransferText.Height) / 2)
    End Sub
    Private Sub Form1_ReSize(sender As Object, e As EventArgs)
        CenterTextBox()
        If Me.WindowState = FormWindowState.Minimized Then
            ' Ukrycie okna
            Me.Hide()
            ' Ukrycie z paska zadań
            Me.ShowInTaskbar = False
        End If
    End Sub
    Private Sub SetPlaceholder()
        ' Ustawienie placeholdera
        SendMessage(Me.TextBoxSzukajUrzadzenia.Handle, EM_SETCUEBANNER, IntPtr.Zero, "Szukaj")
    End Sub

    Private Function GetSubstring_2(value As String) As String
        If value.Length > 5 Then ' XEROX Name=SUM-DKIER2
            Return value.Substring(5)
        Else
            Return String.Empty
        End If
    End Function

    ' WYCIĄGANIE INTERESUJĄCYCH WYRAZÓW WG. ICH KOLEJNOŚCI
    Function GetWordsByIndices(input As String, indices As Integer()) As List(Of String)
        ' Podziel wartość na słowa
        Dim words As String() = input.Split(" "c)

        ' Wyciągnij słowa na podstawie przekazanych indeksów
        Dim selectedWords As New List(Of String)
        For Each index As Integer In indices
            If index < words.Length Then
                selectedWords.Add(words(index))
            Else
                selectedWords.Add(String.Empty)
            End If
        Next

        ' Zwróć wynik jako lista
        Return selectedWords
    End Function

    ' POBRANIE MAC NA PODSTAWIE ARP
    Private Function GetMacAddressFromArp(ipAddress As String) As String
        Dim macAddress As String = String.Empty
        Try
            Dim process As New Process()
            process.StartInfo.FileName = "arp"
            process.StartInfo.Arguments = "-a " & ipAddress
            process.StartInfo.UseShellExecute = False
            process.StartInfo.RedirectStandardOutput = True
            process.StartInfo.CreateNoWindow = True
            process.Start()

            Dim output As String = process.StandardOutput.ReadToEnd()
            process.WaitForExit()

            ' Wzorzec regex do wyciągania adresu MAC
            Dim macPattern As String = "([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})"
            Dim regex As New Regex(macPattern)
            Dim match As Match = regex.Match(output)

            If match.Success Then
                macAddress = match.Value.ToUpper().Replace("-", ":")
            End If
        Catch ex As Exception
            macAddress = "N/A"
        End Try

        Return macAddress
    End Function


    Function ByteArrayToMacAddress(bytes As Byte()) As String
        Return String.Join(":", bytes.Select(Function(b) b.ToString("X2")))
    End Function
    ' POZIOM TONERÓW
    Private Function GetTonerLevel(tonerPercent As Integer) As String
        Select Case tonerPercent
            Case 0
                Return ""
            Case 1 To 5
                Return ""
            Case 6 To 9
                Return "▌▌"
            Case 10 To 14
                Return "▌▌▌"
            Case 15 To 19
                Return "▌▌▌▌"
            Case 20 To 24
                Return "▌▌▌▌▌"
            Case 25 To 29
                Return "▌▌▌▌▌▌"
            Case 30 To 34
                Return "▌▌▌▌▌▌▌"
            Case 35 To 39
                Return "▌▌▌▌▌▌▌▌"
            Case 40 To 44
                Return "▌▌▌▌▌▌▌▌▌"
            Case 45 To 49
                Return "▌▌▌▌▌▌▌▌▌▌"
            Case 50 To 54
                Return "▌▌▌▌▌▌▌▌▌▌▌"
            Case 55 To 59
                Return "▌▌▌▌▌▌▌▌▌▌▌▌"
            Case 60 To 64
                Return "▌▌▌▌▌▌▌▌▌▌▌▌▌"
            Case 65 To 69
                Return "▌▌▌▌▌▌▌▌▌▌▌▌▌▌"
            Case 70 To 74
                Return "▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌"
            Case 75 To 79
                Return "▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌"
            Case 80 To 84
                Return "▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌"
            Case 85 To 89
                Return "▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌"
            Case 90 To 94
                Return "▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌"
            Case 95 To 100
                Return "▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌▌"
            Case Else
                Return "?"
        End Select
    End Function

    Private Sub PanelTop_Paint(sender As Object, e As PaintEventArgs) Handles PanelTop.Paint

    End Sub

    Private Sub btnHelp_Click(sender As Object, e As EventArgs) Handles btnHelp.Click

    End Sub







    '   Private Sub btnUstawienia_Paint(sender As Object, e As PaintEventArgs) Handles btnUstawienia.Paint
    '       ' Wybór koloru pędzla (np. czarny) i ustawienie grubości pióra
    '       Dim borderColor As Color = Color.FromArgb(204, 204, 204)
    '       Dim borderWidth As Integer = 5
    '
    '       ' Stworzenie pióra do rysowania krawędzi
    '       Using pen As New Pen(borderColor, borderWidth)
    '           ' Rysowanie linii dolnej od lewej do prawej krawędzi
    '           e.Graphics.DrawLine(pen, 0, btnUstawienia.Height - borderWidth, btnUstawienia.Width, btnUstawienia.Height - borderWidth)
    '       End Using
    '   End Sub
End Class


' Deklaracja klasy CustomMessageBox z dodatkowymi elementami graficznymi
Public Class CustomMessageBox
    Inherits Form

    Private labelMessage As Label
    Private buttonOK As Button
    Private pictureBoxIcon As PictureBox
    Private panelBottom1 As Panel

    ' Konstruktor z dodatkowymi elementami
    Public Sub New(message As String, title As String, icon As System.Drawing.Image)
        ' Ustawienia okna
        Me.Text = title
        Me.Size = New System.Drawing.Size(600, 280)
        Me.FormBorderStyle = FormBorderStyle.FixedDialog
        Me.StartPosition = FormStartPosition.CenterScreen
        Me.MaximizeBox = False
        Me.MinimizeBox = False
        Me.BackColor = Color.White

        ' Label z wiadomością
        labelMessage = New Label()
        labelMessage.Text = message
        labelMessage.Size = New System.Drawing.Size(400, 80)
        labelMessage.Location = New System.Drawing.Point(150, 80)
        labelMessage.Font = New System.Drawing.Font("Calibri", 13.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
        labelMessage.ForeColor = Color.Black
        Me.Controls.Add(labelMessage)

        ' PictureBox z ikoną
        pictureBoxIcon = New PictureBox()
        With pictureBoxIcon
            .Size = New System.Drawing.Size(90, 80)
            .Location = New System.Drawing.Point(30, 60)
            .Image = icon
            .SizeMode = PictureBoxSizeMode.StretchImage
        End With
        Me.Controls.Add(pictureBoxIcon)

        ' Przyciski OK w panelu dolnym
        panelBottom1 = New Panel()
        With panelBottom1
            .Dock = DockStyle.Bottom
            .Height = 60
            .BackColor = Color.FromArgb(235, 235, 224)
        End With

        buttonOK = New Button()
        With buttonOK
            .Text = "OK"
            .FlatStyle = FlatStyle.Flat
            .FlatAppearance.BorderSize = 0
            .Size = New System.Drawing.Size(80, 30)
            .Anchor = AnchorStyles.None
            .BackColor = Color.FromArgb(0, 68, 102)
            .ForeColor = Color.FromArgb(242, 242, 242)
            .Font = New System.Drawing.Font("Calibri", 12.0!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(238, Byte))
        End With
        AddHandler buttonOK.Click, AddressOf Me.ButtonOK_Click

        panelBottom1.Controls.Add(buttonOK)
        buttonOK.Location = New System.Drawing.Point(250, (panelBottom1.Height - buttonOK.Height) \ 2)


        Me.Controls.Add(panelBottom1)
    End Sub

    ' Obsługa kliknięcia przycisku OK
    Private Sub ButtonOK_Click(sender As Object, e As EventArgs)
        Me.DialogResult = DialogResult.OK
        Me.Close()
    End Sub

    ' Funkcja wyświetlająca niestandardowe okno dialogowe
    Public Shared Function Show(message As String, title As String, icon As System.Drawing.Image) As DialogResult
        Dim msgBox As New CustomMessageBox(message, title, icon)
        Return msgBox.ShowDialog()
    End Function
End Class



'Klasa pomocnicza dla mapowania nazw kolumn tabeli a combobox
Public Class SortableColumn
    Public Property DisplayName As String
    Public Property ActualName As String

    Public Sub New(displayName As String, actualName As String)
        Me.DisplayName = displayName
        Me.ActualName = actualName
    End Sub

    Public Overrides Function ToString() As String
        Return DisplayName
    End Function
End Class

' Klasa do zarządzania nagłówkiem i stopką
Public Class MyPageEvents
    Inherits PdfPageEventHelper

    ' Pola dla dodatkowych danych
    Public Property ReportDateTime As DateTime
    Public Property TotalDevices As Integer
    Public Property LicznikMSum As Decimal
    Public Property LicznikKSum As Decimal
    Public Property HeaderFontSize As Integer = 10 ' Możliwość ustawienia rozmiaru czcionki nagłówka

    ' Metoda dodająca nagłówek i stopkę
    Public Overrides Sub OnEndPage(writer As PdfWriter, document As Document)
        Dim cb As PdfContentByte = writer.DirectContent

        ' Ścieżka do czcionki
        Dim fontPath As String = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Calibri.ttf")
        Dim baseFont As BaseFont = BaseFont.CreateFont(fontPath, BaseFont.IDENTITY_H, BaseFont.EMBEDDED)
        Dim headerFont As New iTextSharp.text.Font(baseFont, 16, iTextSharp.text.Font.BOLD) ' Czcionka dla nagłówka tytułu
        Dim infoFont As New iTextSharp.text.Font(baseFont, HeaderFontSize, iTextSharp.text.Font.NORMAL) ' Czcionka dla tekstu normalnego
        Dim boldFont As New iTextSharp.text.Font(baseFont, HeaderFontSize, iTextSharp.text.Font.BOLD) ' Czcionka pogrubiona

        ' Dodanie nagłówka z tytułem
        Dim headerTitle As New Paragraph("Zestawienie aktualnych urządzeń", headerFont)
        headerTitle.Alignment = Element.ALIGN_LEFT

        ' Tabela dla tytułu raportu
        Dim titleTable As New PdfPTable(1)
        titleTable.TotalWidth = document.PageSize.Width - document.LeftMargin - document.RightMargin
        titleTable.LockedWidth = True ' Blokowanie szerokości tabeli
        titleTable.AddCell(New PdfPCell(headerTitle) With {
            .Border = iTextSharp.text.Rectangle.NO_BORDER,
            .HorizontalAlignment = Element.ALIGN_CENTER
        })

        ' Ustawienie pozycji nagłówka z tytułem raportu
        titleTable.WriteSelectedRows(0, -1, document.LeftMargin, document.PageSize.Height - 20, cb)

        ' Dodanie informacji o dacie, liczbie urządzeń oraz sumach liczników
        Dim infoTable As New PdfPTable(1)
        infoTable.TotalWidth = document.PageSize.Width - document.LeftMargin - document.RightMargin
        infoTable.LockedWidth = True

        ' Utworzenie fragmentów tekstu (chunks) z pogrubieniem dla wartości
        Dim reportDatePhrase As New Phrase()
        reportDatePhrase.Add(New Chunk("Data i godzina sporządzenia raportu: ", infoFont))
        reportDatePhrase.Add(New Chunk(ReportDateTime.ToString(), boldFont)) ' Pogrubiona data

        Dim totalDevicesPhrase As New Phrase()
        totalDevicesPhrase.Add(New Chunk("Liczba urządzeń: ", infoFont))
        totalDevicesPhrase.Add(New Chunk(TotalDevices.ToString(), boldFont)) ' Pogrubiona liczba urządzeń

        Dim licznikMPhrase As New Phrase()
        licznikMPhrase.Add(New Chunk("Suma Licznika M dla wszystkich urządzeń: ", infoFont))
        licznikMPhrase.Add(New Chunk(LicznikMSum.ToString(), boldFont)) ' Pogrubiona suma licznika M

        Dim licznikKPhrase As New Phrase()
        licznikKPhrase.Add(New Chunk("Suma Licznika K dla wszystkich urządzeń: ", infoFont))
        licznikKPhrase.Add(New Chunk(LicznikKSum.ToString(), boldFont)) ' Pogrubiona suma licznika K

        ' Dodawanie informacji do tabeli
        infoTable.AddCell(New PdfPCell(reportDatePhrase) With {
            .Border = iTextSharp.text.Rectangle.NO_BORDER,
            .HorizontalAlignment = Element.ALIGN_LEFT
        })
        infoTable.AddCell(New PdfPCell(totalDevicesPhrase) With {
            .Border = iTextSharp.text.Rectangle.NO_BORDER,
            .HorizontalAlignment = Element.ALIGN_LEFT
        })
        infoTable.AddCell(New PdfPCell(licznikMPhrase) With {
            .Border = iTextSharp.text.Rectangle.NO_BORDER,
            .HorizontalAlignment = Element.ALIGN_LEFT
        })
        infoTable.AddCell(New PdfPCell(licznikKPhrase) With {
            .Border = iTextSharp.text.Rectangle.NO_BORDER,
            .HorizontalAlignment = Element.ALIGN_LEFT
        })

        ' Ustawienie pozycji tabeli z informacjami
        infoTable.WriteSelectedRows(0, -1, document.LeftMargin, document.PageSize.Height - 60, cb)

        ' Dodanie stopki z numerem strony
        Dim footerFont As New iTextSharp.text.Font(baseFont, 10, iTextSharp.text.Font.ITALIC)
        Dim footer As New Paragraph("Strona " & writer.PageNumber, footerFont)
        footer.Alignment = Element.ALIGN_CENTER

        ' Tworzenie tabeli dla stopki
        Dim footerTable As New PdfPTable(1)
        footerTable.TotalWidth = document.PageSize.Width - document.LeftMargin - document.RightMargin
        footerTable.LockedWidth = True ' Blokowanie szerokości tabeli
        footerTable.AddCell(New PdfPCell(footer) With {
            .Border = iTextSharp.text.Rectangle.NO_BORDER,
            .HorizontalAlignment = Element.ALIGN_CENTER
        })

        ' Ustawienie pozycji stopki
        footerTable.WriteSelectedRows(0, -1, document.LeftMargin, 30, cb)
    End Sub
End Class

Public Class CustomUnicastIPAddressInformation
    Inherits UnicastIPAddressInformation

    Private ReadOnly _address As System.Net.IPAddress
    Private ReadOnly _ipv4Mask As System.Net.IPAddress

    Public Sub New(address As System.Net.IPAddress, mask As System.Net.IPAddress)
        _address = address
        _ipv4Mask = mask
    End Sub

    ' Nadpisanie wymaganych właściwości MustOverride
    Public Overrides ReadOnly Property Address As System.Net.IPAddress
        Get
            Return _address
        End Get
    End Property

    Public Overrides ReadOnly Property IPv4Mask As System.Net.IPAddress
        Get
            Return _ipv4Mask
        End Get
    End Property

    Public Overrides ReadOnly Property AddressPreferredLifetime As Long
        Get
            Return 0 ' Domyślna wartość
        End Get
    End Property

    Public Overrides ReadOnly Property AddressValidLifetime As Long
        Get
            Return 0 ' Domyślna wartość
        End Get
    End Property

    Public Overrides ReadOnly Property DhcpLeaseLifetime As Long
        Get
            Return 0 ' Domyślna wartość
        End Get
    End Property

    Public Overrides ReadOnly Property DuplicateAddressDetectionState As DuplicateAddressDetectionState
        Get
            Return DuplicateAddressDetectionState.Preferred ' Domyślna wartość
        End Get
    End Property

    Public Overrides ReadOnly Property PrefixOrigin As PrefixOrigin
        Get
            Return PrefixOrigin.Manual ' Domyślna wartość
        End Get
    End Property

    Public Overrides ReadOnly Property SuffixOrigin As SuffixOrigin
        Get
            Return SuffixOrigin.Manual ' Domyślna wartość
        End Get
    End Property

    Public Overrides ReadOnly Property IsDnsEligible As Boolean
        Get
            Return True ' Domyślna wartość
        End Get
    End Property

    Public Overrides ReadOnly Property IsTransient As Boolean
        Get
            Return False ' Domyślna wartość
        End Get
    End Property
End Class

Public Class PrinterInfo
    Public Property Manufacture As String
    Public Property Hostname As String
    Public Property MarkaModel As String
    Public Property SerialNumber As String
    Public Property MAC As String
    Public Property IPAddress As String
    Public Property IPAddressDns As String
    Public Property tonerLevelBk As String
    Public Property tonerLevelY As String
    Public Property tonerLevelM As String
    Public Property tonerLevelC As String
    Public Property tonerBkPercent As String
    Public Property tonerYPercent As String
    Public Property tonerMPercent As String
    Public Property tonerCPercent As String
    Public Property counterTotal As String
    Public Property counterMonoPrt As String
    Public Property counterKolorPrt As String
    Public Property counterTwoKolorPrt As String
    Public Property counterMonoCopy As String
    Public Property counterKolorCopy As String
    Public Property counterTwoKolorCopy As String
    Public Property counterSingleKolorCopy As String
    Public Property counterMonoPrtScan As String
    Public Property counterKolorPrtScan As String
    Public Property counterMonoPrtFax As String
    Public Property counterKolorPrtFax As String
    Public Property counterTotalScan As String
    Public Property counterAdfScan As String
    Public Property counterAdf1SidesScan As String
    Public Property counterAdf2SidesScan As String
    Public Property counterGlassScan As String
    Public Property IsColorPrinter As Boolean
    Public Property IsAdvancedPrinter As Boolean


End Class

